<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Loop (Dateiinhalt lesen) - Syntax &amp; Verwendung | AutoHotkey v1</title>
<meta name="description" content="Die Loop-Read-Anweisung ruft die Zeilen einer Textdatei nacheinander ab." />
<meta name="ahk:equiv-v2" content="lib/LoopRead.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Loop (Dateiinhalt lesen)</h1>

<p>Ruft die Zeilen einer Textdatei nacheinander ab (performanter als <a href="FileReadLine.htm">FileReadLine</a>).</p>

<pre class="Syntax"><span class="func">Loop, Read</span>, EingabeDatei <span class="optional">, AusgabeDatei</span></pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Read</dt>
  <dd><p>Dieser Parameter muss das Wort READ sein.</p></dd>

  <dt>EingabeDatei</dt>
  <dd><p>Name der Textdatei, die von der Schleife gelesen werden soll. Wenn kein absoluter Pfad angegeben ist, wird die Datei im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet. Windows- und Unix-Formate werden unterstützt, d.h. die Zeilen der Datei können entweder mit einem Wagenrücklauf-Zeilenvorschub-Paar (`r`n) oder nur mit einem Zeilenvorschub (`n) enden.</p></dd>

  <dt>AusgabeDatei</dt>
  <dd><p>(Optional) Name der Datei, die während der Schleifenausführung geöffnet bleibt. Wenn kein absoluter Pfad angegeben ist, wird die Datei im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet.</p>
      <p>Innerhalb der Schleife benötigt der <a href="FileAppend.htm">FileAppend</a>-Befehl nur einen Parameter, um den zu schreibenden Text an die spezielle Datei anzufügen. Diese Art des Anfügens ist performanter als <a href="FileAppend.htm">FileAppend</a> im 2-Parameter-Modus, da die Datei nicht bei jeder Operation geschlossen und wieder geöffnet werden muss. Achten Sie darauf, einen Zeilenvorschub (`n) nach dem Text einzufügen, falls notwendig.</p>
      <p>Die Datei wird nicht geöffnet, wenn nie etwas in sie geschrieben wird. Dies ist der Fall, wenn die Schleife null Wiederholungen hat oder nie den <a href="FileAppend.htm">FileAppend</a>-Befehl verwendet.</p>
          <p><strong>Zeilenumbruchübersetzung:</strong> Um die Zeilenumbruchübersetzung zu deaktivieren, setzen Sie ein Sternchen vor den Dateinamen. Dies hat zur Folge, dass jeder Zeilenumbruch als einzelner Zeilenvorschub (`n) statt wie unter Windows üblich als Wagenrücklauf-Zeilenvorschub-Paar (`r`n) geschrieben wird. Zum Beispiel: <code class="no-highlight"><strong>*</strong>C:\Meine Unix-Datei.txt</code>. Selbst wenn das Sternchen nicht angegeben ist - die Zeilenumbruchübersetzung wird automatisch deaktiviert, <u>sobald</u> ein <a href="FileAppend.htm">FileAppend</a> in der Schleife ein Wagenrücklauf-Zeilenvorschub-Paar (`r`n) schreibt.</p>
      <p><strong>Standardausgabe (stdout):</strong> Geben Sie ein Sternchen (*) für <em>AusgabeDatei</em> an, um einen via <a href="FileAppend.htm">FileAppend</a> geschriebenen Text zur Standardausgabe (stdout) zu senden. Diese Art von Text kann auf eine Datei umgeleitet, an eine EXE-Datei weitergeleitet oder von <a href="_ErrorStdOut.htm">umfangreichen Texteditoren</a> abgefangen werden. Allerdings wird ein zur Standardausgabe gesendeter Text nicht in der Eingabeaufforderung angezeigt, von der aus die Zeile gestartet wurde. Dies kann umgangen werden, indem 1) <span class="ver">[v1.1.33+]</span> das Skript mit der <a href="../misc/Ahk2ExeDirectives.htm#ConsoleApp">Ahk2Exe-ConsoleApp-Direktive</a> kompiliert wird, oder 2) die Ausgabe des Skripts via Piping an einen anderen Befehl oder an ein anderes Programm weitergeleitet wird. Weitere Informationen finden Sie unter <a href="FileAppend.htm">FileAppend</a>.</p>
      <p><strong>Escapezeichenversehene Kommas:</strong> Im Gegensatz zum letzten Parameter der meisten anderen Befehle müssen Kommas in <em>AusgabeDatei</em> mit einem Escapezeichen versehen werden (<code class="no-highlight">`,</code>).</p></dd>

</dl>

<h2 id="Remarks">Bemerkungen</h2>
<p>Eine dateilesende Schleife ist nützlich, wenn alle Zeilen in einer Textdatei nacheinander abgearbeitet werden sollen. Diese Schleife ist performanter als <a href="FileReadLine.htm">FileReadLine</a>, weil: 1) die Datei während der gesamten Operation geöffnet bleibt; und 2) die Datei nicht jedes Mal neu eingelesen werden muss, um die gewünschte Zeilennummer zu finden.</p>
<p id="LoopReadLine">Die interne Variable <strong>A_LoopReadLine</strong> ist nur in einer dateilesenden Schleife von Bedeutung. Sie enthält den Inhalt der aktuellen Zeile ohne das Wagenrücklauf-Zeilenvorschub-Paar (`r`n) am Ende. Wenn eine innere dateilesende Schleife von einer äußeren dateilesenden Schleife umschlossen ist, hat die Dateizeile der innersten Schleife Vorrang.</p>
<p>Es können Zeilen mit einer Länge von bis zu 65534 Zeichen gelesen werden. Wenn eine Zeile diese Länge überschreitet, werden die restlichen Zeichen bei der nächsten Schleifenwiederholung gelesen.</p>
<p>In einer dateilesenden Schleife wird oft <a href="StrSplit.htm">StrSplit()</a>, <a href="StringSplit.htm">StringSplit</a> oder eine <a href="LoopParse.htm">parsende Schleife</a> verwendet, um den Inhalt von jeder gefundenen Zeile in <em>EingabeDatei</em> zu parsen. Wenn z.B. jede Zeile in <em>EingabeDatei</em> eine Reihe von tabgetrennten Feldern ist, können solche Felder einzeln wie folgt abgerufen werden:</p>
<pre>Loop, read, C:\Datenbank-Export.txt
{
    Loop, parse, A_LoopReadLine, %A_Tab%
    {
        MsgBox, Feld Nr. %A_Index% ist %A_LoopField%.
    }
}</pre>
<p>Um eine komplette Datei in eine Variable zu laden, verwenden Sie <a href="FileRead.htm">FileRead</a>, weil es deutlich performanter ist als eine Schleife (insbesondere bei großen Dateien).</p>
<p>Um mehrere Dateien simultan zu lesen oder zu schreiben, verwenden Sie <a href="FileOpen.htm">FileOpen()</a>.</p>
<p>Auf der <a href="Loop.htm">Loop</a>-Seite finden Sie Informationen zu <a href="Block.htm">Blöcken</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> und A_Index (die in jeder Schleifenvariante verwendet werden kann).</p>
<p>Mit <a href="FileEncoding.htm">FileEncoding</a> können Sie kontrollieren, wie eine Datei ohne Byte-Order-Markierung dekodiert werden soll.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="FileOpen.htm">FileOpen()</a>/<a href="File.htm">File-Objekt</a>, <a href="FileRead.htm">FileRead</a>, <a href="FileReadLine.htm">FileReadLine</a>, <a href="FileAppend.htm">FileAppend</a>, <a href="Sort.htm">Sort</a>, <a href="Loop.htm">Loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blöcke</a>, <a href="FileSetAttrib.htm">FileSetAttrib</a>, <a href="FileSetTime.htm">FileSetTime</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExFileAppend">
<p><a class="ex_number" href="#ExFileAppend"></a> Prüft nacheinander alle Zeilen in der ersten Datei, ob sie das Wort FAMILIE enthalten. Ist dies der Fall, wird die jeweilige Zeile in die zweite Datei geschrieben. Entkommentieren Sie die erste Zeile, um die zweite Datei zu überschreiben, anstatt ihr Text anzufügen.</p>
<pre><em>;FileDelete, C:\Dokumente\Familienadressen.txt</em>

Loop, read, C:\Dokumente\Adressliste.txt, C:\Dokumente\Familienadressen.txt
{
    if InStr(A_LoopReadLine, "Familie")
        FileAppend, %A_LoopReadLine%`n
}</pre>
</div>

<div class="ex" id="ExLastLine">
<p><a class="ex_number" href="#ExLastLine"></a> Ruft die letzte Zeile einer Textdatei ab.</p>
<pre>Loop, read, C:\Logdatei.txt
    letzteZeile := A_LoopReadLine  <em>; Enthält nach Schleifenende die letzte Zeile.</em></pre>
</div>

<div class="ex" id="ExURL">
<p><a class="ex_number" href="#ExURL"></a> Versucht, alle FTP- und HTTP-URLs aus einer Text- oder HTML-Datei zu extrahieren.</p>
<pre>FileSelectFile, QuelleDatei, 3,, Wählen Sie eine Text- oder HTML-Datei zur Analyse aus:
if (QuelleDatei = "")
    return  <em>; Beendet das Skript in diesem Fall.</em>

SplitPath, QuelleDatei,, QuelleDateiPfad,, QuelleDateiOhneEnd
ZielDatei := QuelleDateiPfad "\" QuelleDateiOhneEnd " Extrahierte Links.txt"

if FileExist(ZielDatei)
{
    MsgBox, 4,, Existierende Datei überschreiben? Drücken Sie Nein, um die Links anzufügen.`n`nDATEI: %ZielDatei%
    IfMsgBox, Yes
        FileDelete, %ZielDatei%
}

LinksAnzahl := 0
Loop, read, %QuelleDatei%, %ZielDatei%
{
    URLSuchZkette := A_LoopReadLine
    Gosub, URLSuche
}
MsgBox %LinksAnzahl% Links wurden gefunden und in "%ZielDatei%" geschrieben.
return


URLSuche:
<em>; Das wird so gemacht, weil einige URLs andere URLs eingebettet haben:</em>
URLStart1 := InStr(URLSuchZkette, "https://")
URLStart2 := InStr(URLSuchZkette, "http://")
URLStart3 := InStr(URLSuchZkette, "ftp://")
URLStart4 := InStr(URLSuchZkette, "www.")

<em>; Die Startposition ganz links finden:</em>
URLStart := URLStart1  <em>; Standardwert setzen.</em>
Loop
{
    <em>; Es hilft der Performanz (zumindest in einem Skript mit vielen Variablen),</em>
    <em>; "URLStart%A_Index%" nur einmal aufzulösen:</em>
    ArrayElement := URLStart%A_Index%
    if (ArrayElement = "")  <em>; Ende des <a href="../misc/Arrays.htm#pseudo">Pseudo-Arrays</a> erreicht.</em>
        break
    if (ArrayElement = 0)  <em>; Dieses Element ist disqualifiziert.</em>
        continue
    if (URLStart = 0)
        URLStart := ArrayElement
    else <em>; URLStart enthält gültige Position, also mit ArrayElement vergleichen.</em>
    {
        if (ArrayElement != 0)
            if (ArrayElement &lt; URLStart)
                URLStart := ArrayElement
    }
}

if (URLStart = 0)  <em>; Keine URLs in URLSuchZkette.</em>
    return

<em>; Andernfalls diese URL extrahieren:</em>
URL := SubStr(URLSuchZkette, URLStart)  <em>; Beginnenden/unwichtigen Teil auslassen.</em>
Loop, parse, URL, %A_Tab%%A_Space%&lt;&gt;  <em>; Erstes Leer-, Tab- oder Winkelzeichen finden (falls verfügbar).</em>
{
    URL := A_LoopField
    break  <em>; d.h. Schleife nur 1x wiederholen, um das erste "Feld" abzurufen.</em>
}
<em>; Wenn die obige Schleife wegen fehlender Endungszeichen null Wiederholungen
; hatte, den Inhalt der URL-Variable unverändert lassen.</em>

<em>; Wenn URL mit einem doppelten Anführungszeichen endet, dieses entfernen.
; Vorerst wird StrReplace verwendet, aber beachte, dass Anführungszeichen
; in URLs scheinbar legitim sind und dadurch beschädigt werden könnten:</em>
BereinigteURL := StrReplace(URL, "`"")
FileAppend, %BereinigteURL%`n
LinksAnzahl += 1

<em>; Prüfen, ob weitere URLs in dieser Zeile vorkommen:</em>
ZuEntfernendeZeichen := StrLen(URL)
ZuEntfernendeZeichen += URLStart
URLSuchZkette := SubStr(URLSuchZkette, ZuEntfernendeZeichen)
Gosub, URLSuche  <em>; Rekursiver Aufruf von sich selbst.</em>
return</pre>
</div>

</body>
</html>
