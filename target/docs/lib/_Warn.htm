<!DOCTYPE HTML>
<html lang="de">
<head>
<title>#Warn - Syntax &amp; Verwendung | AutoHotkey v1</title>
<meta name="description" content='Die #Warn-Direktive aktiviert oder deaktiviert bestimmte Warnungen, die auf mögliche Fehler vonseiten des Programmierers hinweisen, wie z.B. Schreibfehler oder fehlende "globale" Deklarationen.' />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>#Warn <span class="ver">[v1.0.95.00+]</span></h1>

<p>Aktiviert oder deaktiviert bestimmte Warnungen, die auf mögliche Fehler vonseiten des Programmierers hinweisen, wie z.B. Schreibfehler oder fehlende "globale" Deklarationen.</p>

<pre class="Syntax"><span class="func">#Warn</span> <span class="optional">WarnungTyp, WarnungModus</span></pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>WarnungTyp</dt>
  <dd>
      <p>Wenn weggelassen, wird standardmäßig <em>All</em> verwendet. Andernfalls geben Sie den Typ der Warnung an, die aktiviert oder deaktiviert werden soll.</p>
      <p id="UseUnset"><strong>UseUnsetLocal</strong> oder <strong>UseUnsetGlobal</strong>: Warnt, wenn eine Variable gelesen wird, die vorher weder einen Wert zugewiesen bekommen hat, noch via <a href="VarSetCapacity.htm">VarSetCapacity()</a> initialisiert wurde. Wenn die Variable absichtlich leer sein soll, weisen Sie ihr eine leere Zeichenkette zu, um diese Warnung zu unterdrücken. <a href="IsSet.htm">IsSet()</a> kann verwendet werden, um zu prüfen, ob das Lesen einer Variable diese Warnung auslösen würde.</p>
      <p>Dieser Warnungstyp behandelt lokale und globale Variablen getrennt voneinander, da es eher unüblich ist, globale Variablen wegen ihrer persistenten und skriptweiten Art vorab zu initialisieren. Daher ist es möglich, diesen Warnungstyp für lokale Variablen zu aktivieren und für globale Variablen zu deaktivieren.</p>
      <pre>#Warn
<em>;y := ""  ; Dies würde die Warnung unterdrücken.</em>
x := y    <em>; y hat keinen Wert zugewiesen bekommen.</em></pre>
      <p id="UseEnv"><strong>UseEnv:</strong> Warnt, wenn AutoHotkey automatisch entscheidet, eine <a href="../Concepts.htm#environment-variables">Umgebungsvariable</a> anstelle einer leeren Skriptvariable zu verwenden. Dies passiert manchmal, wenn der Name einer Umgebungsvariable zufällig mit dem Namen einer Skriptvariable übereinstimmt. Diese Warnung erscheint, wenn ein Zugriff auf so eine Variable erfolgt, aber nicht, wenn <a href="_NoEnv.htm">#NoEnv</a> im Skript angegeben ist (aus mehreren Gründen empfohlen).</p>
      <pre>#Warn
<em>;#NoEnv             ; Fügen Sie diese Zeile hinzu, wenn "temp" keine Umgebungsvariable sein soll.</em>
<em>;EnvGet temp, TEMP  ; Diese Zeile würde den Wert der Umgebungsvariable in eine Skriptvariable kopieren.</em>
temp := ""          <em>; Trotz dieser Zeile scheint temp immer noch einen Wert zu haben.</em>
MsgBox % temp       <em>; Diese Zeile greift auf die Umgebungsvariable "TEMP" zu.</em></pre>
      <p id="LocalSameAsGlobal"><strong>LocalSameAsGlobal:</strong> Zeigt vor Beginn der Skriptausführung eine Warnung an, wenn <em>undeklarierte</em> lokale Variablen den gleichen Namen wie globale Variablen haben. Diese Warnung soll Fehler vermeiden, die auftreten können, wenn vergessen wurde, eine globale Variable innerhalb einer Funktion vor dem Zugriffsversuch zu deklarieren. Wenn die globale Variable tatsächlich lokal sein soll, kann die Warnung mit einer Deklaration wie <code>local x</code> oder <code>static y</code> unterdrückt werden. Diese Warnung wird niemals für Variablen angezeigt, die sich innerhalb einer <a href="../Functions.htm#ForceLocal">Force-Local</a>-Funktion befinden.</p>
      <pre>#Warn
g := 1
ShowG() {       <em>; Die Warnung wird auch angezeigt, wenn die Funktion nicht aufgerufen wird.</em>
    <em>;global g   ; &lt;-- Dies wird für den Zugriff auf die globale Variable benötigt.</em>
    MsgBox % g  <em>; Ohne Deklaration ist "g" eine leere lokale Variable.</em>
}</pre>
      <p id="ClassOverwrite"><strong>ClassOverwrite</strong> <span class="ver">[v1.1.27+]</span>: Zeigt vor Beginn der Skriptausführung eine Warnung an, wenn Zuweisungen auf eine Klassenvariable angewendet werden. Zum Beispiel zeigt <code>box := new Box</code> eine Warnung an, wenn <em>Box</em> eine Klasse ist, da dies die Klasse überschreiben würde (die als superglobal definierte <em>Box</em>-Variable). Warnungen werden auch für Ausgabevariablen von Befehlen angezeigt, jedoch nicht für ByRef-Parameter. Für verschachtelte Klassen oder dynamische Variablenreferenzen werden keine Warnungen angezeigt.</p>
      <p id="Unreachable"><strong>Unreachable</strong> <span class="ver">[v1.1.33+]</span>: Zeigt vor Beginn der Skriptausführung eine Warnung an, wenn unmittelbar nach einem <code>Return</code>, <code>Break</code>, <code>Continue</code>, <code>Throw</code>, <code>Goto</code> oder <code>Exit</code> eine Zeile auf gleicher Verschachtelungsebene folgt, es sei denn, diese Zeile ist das Ziel eines Labels. Damit wird zwar nicht der gesamte unerreichbare Code erkannt, aber zumindest häufig auftretende Fehler wie zum Beispiel:</p>
      <ul>
        <li>Platzierung von Initialisierungscode (z.B. eine Zuweisung oder <a href="GroupAdd.htm">GroupAdd</a>) zwischen Hotkey-Subroutinen, obwohl dieser Code in den <a href="../Language.htm#auto-execute-section">automatischen Ausführungsbereich</a> gehört.</li>
        <li>Platzierung der ersten Zeile einer "mehrzeiligen" Hotkey-Subroutine auf derselben Zeile wie das Hotkey-Label. Dies führt dazu, dass der Hotkey als <a href="../Hotkeys.htm#Intro">einzeiliger Hotkey</a> erkannt wird, mit einem impliziten <code>return</code>, das die Ausführung aller nachfolgenden Zeilen verhindert. Entsprechend ist die Platzierung von <code>return</code> nach einem einzeiligen Hotkey überflüssig und führt zu einer Warnung.</li>
        <li>Platzierung einer <a href="../Language.htm#subroutines">Subroutine</a> innerhalb einer anderen Subroutine, was den Ausführungsablauf unterbricht.</li>
      </ul>
      <p>Wenn der Code nicht erreichbar sein soll – z.B. wenn ein <code>return</code> verwendet wurde, um einen Codeblock vorübergehend zu deaktivieren, oder wenn ein Hotkey oder Hotstring durch Auskommentieren vorübergehend deaktiviert wurde – sollten Sie in Erwägung ziehen, den nicht erreichbaren Code ebenfalls auszukommentieren. Sie können die Warnung auch unterdrücken, indem Sie ein <a href="../misc/Labels.htm">Label</a> über der ersten nicht erreichbaren Zeile definieren.</p>
      <p><strong>All:</strong> Wendet den angegebenen <em>WarnungModus</em> auf alle unterstützten Warnungstypen an.</p>
    </dd>

  <dt>WarnungModus</dt>
  <dd>
      <p>Wenn weggelassen, wird standardmäßig <em>MsgBox</em> verwendet. Andernfalls geben Sie einen Wert an, der festlegt, wie Warnungen übermittelt werden sollen.</p>
      <p><strong>MsgBox:</strong> Zeigt ein Mitteilungsfenster an, das die Warnung beschreibt. Beachten Sie, dass das Skript nach dem Schließen des Mitteilungsfensters normal weiterläuft.</p>
      <p><strong>StdOut</strong> <span class="ver">[v1.1.04+]</span>: Sendet eine Beschreibung der Warnung zur Standardausgabe (<em>stdout</em>), inklusive Dateiname und Zeilennummer. Auf diese Weise können umfangreiche Texteditoren wie SciTE die Warnungen abfangen, ohne das Skript zu unterbrechen – der Benutzer kann später den Ausgabebereich des Texteditors verwenden, um zu einer fehlerhaften Zeile zu springen.</p>
      <p><strong>OutputDebug:</strong> Sendet eine Beschreibung der Warnung zum Debugger, um sie anzuzeigen. Wenn kein Debugger aktiv ist, hat dieser Modus keinen Effekt. Weitere Details finden Sie unter <a href="OutputDebug.htm">OutputDebug</a>.</p>
      <p><strong>Off:</strong> Deaktiviert alle Warnungen für den angegebenen <em>WarnungTyp</em>.</p>
    </dd>

</dl>
<h2 id="Remarks">Bemerkungen</h2>
	<p>Wenn diese Direktive im Skript nicht angegeben ist, sind alle Warnungen ausgeschaltet.</p>
	<p>Warnungen können während der Skriptausführung weder aktiviert noch deaktiviert werden; die Einstellungen werden beim Laden des Skripts festgelegt. Folglich ist die Position der Direktive innerhalb des Skripts ohne Bedeutung (und kann wie alle anderen Direktiven nicht bedingt ausgeführt werden).</p>
	<p>Die Anordnung der #Warn-Direktiven ist allerdings entscheidend: die letzte Direktive, die eine bestimmte Warnung setzt, bestimmt den Modus dieser Warnung. Zum Beispiel haben die beiden unteren Direktiven den kombinierten Effekt, alle Warnungen außer UseEnv zu aktivieren:</p>
<pre>#Warn All
#Warn UseEnv, Off

EnvSet EnvVar, 1
x := EnvVar       <em>; Okay, da #NoEnv nicht verwendet wurde.</em>
x := NotAnEnvVar  <em>; Warnung.</em>
</pre>
<h2 id="Related">Siehe auch</h2>
<p><a href="../Functions.htm#Local">Lokale und globale Variablen</a></p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExAllOff">
<p><a class="ex_number" href="#ExAllOff"></a> Deaktiviert alle Warnungen. Das ist der Standardzustand.</p>
<pre>#Warn All, Off</pre>
</div>

<div class="ex" id="ExOmitted">
<p><a class="ex_number" href="#ExOmitted"></a> Aktiviert alle Warnungstypen und zeigt alle Warnungen in einem Mitteilungsfenster an.</p>
<pre>#Warn</pre>
</div>

<div class="ex" id="ExUseUnsetLocalOutputDebug">
<p><a class="ex_number" href="#ExUseUnsetLocalOutputDebug"></a> Warnt, wenn eine lokale Variable verwendet wird, bevor sie gesetzt wurde, und sendet alle Warnungen zum OutputDebug.</p>
<pre>#Warn UseUnsetLocal, OutputDebug</pre>
</div>

</body>
</html>
