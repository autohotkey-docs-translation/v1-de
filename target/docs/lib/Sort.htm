<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Sort - Syntax &amp; Verwendung | AutoHotkey v1</title>
<meta name="description" content="Der Sort-Befehl sortiert den Inhalt einer Variable in alphabetischer, numerischer oder zufälliger Reihenfolge (entfernt optional Duplikate)." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Sort</h1>

<p>Sortiert den Inhalt einer Variable in alphabetischer, numerischer oder zufälliger Reihenfolge (entfernt optional Duplikate).</p>

<pre class="Syntax"><span class="func">Sort</span>, VarName <span class="optional">, Optionen</span></pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>VarName</dt>
  <dd><p>Name der Variable, deren Inhalt sortiert werden soll. Dieser Parameter kann kein Ausdruck sein.</p></dd>

  <dt>Optionen</dt>
  <dd><p>Wenn leer oder weggelassen, wird der Inhalt in aufsteigender alphabetischer Reihenfolge sortiert (Groß-/Kleinschreibung-sensitiv), wobei ein Zeilenvorschub (`n) als Trennzeichen verwendet wird. Andernfalls geben Sie eine Zeichenkette an, die aus einer oder mehreren der unten aufgeführten <a href="#Options">Optionen</a> besteht (in beliebiger Reihenfolge, optional durch Leerzeichen getrennt):</p></dd>

</dl>

<h2 id="Options">Optionen</h2>
<p><strong>C:</strong> Groß-/Kleinschreibung-sensitive Sortierung (wird ignoriert, wenn die N-Option vorhanden ist). Wenn sowohl C als auch CL weggelassen werden, werden die Großbuchstaben A bis Z und die entsprechenden Kleinbuchstaben bei der Sortierung als identisch betrachtet.</p>
<p><strong>CL</strong> <span class="ver">[v1.0.43.03+]</span>: Nicht-Groß-/Kleinschreibung-sensitive Sortierung gemäß den aktuellen Sprach- und Regionseinstellungen des Benutzers. Zum Beispiel behandeln die meisten englischen und westeuropäischen Sprach- und Regionseinstellungen die Großbuchstaben A bis Z, einschließlich ANSI-Großbuchstaben wie Ä und Ü, und die entsprechenden Kleinbuchstaben als identisch. Diese Methode verwendet auch eine "Wortsortierung", die Bindestriche und Apostrophe so behandelt, dass Wörter wie "coop" und "co-op" zusammenbleiben. Je nach Inhalt der zu sortierenden Elemente ist die Performanz 1- bis 8-mal schlechter als die Standardmethode der Nichtsensitivität.</p>
<p><strong>D</strong><em>x</em>: Geben Sie für <em>x</em> ein Trennzeichen an, das den Anfang und das Ende pro Element in <em>VarName</em> bestimmt. Das Trennzeichen ist immer Groß-/Kleinschreibung-sensitiv. Wenn diese Option nicht verwendet wird, ist <em>x</em> standardmäßig ein Zeilenvorschub (`n). In den meisten Fällen funktioniert das auch, wenn Zeilen mit einem Wagenrücklauf-Zeilenvorschub-Paar (`r`n) enden, allerdings wird der Wagenrücklauf (`r) in die Vergleiche einbezogen, was Einfluss auf die Sortierreihenfolge hat. Zum Beispiel wird <code class="no-highlight">B`r`nA</code> wie erwartet sortiert, aber <code class="no-highlight">A`r`nA`t`r`nB</code> platziert <code class="no-highlight">A`t`r</code> vor <code class="no-highlight">A`r</code>.</p>
<p id="callback"><strong>F</strong> <em>MeineFunktion</em> <span class="ver">[v1.0.47+]</span>: Ermöglicht eine benutzerdefinierte Sortierung nach den Kriterien in <em>MeineFunktion</em> (allerdings dauert diese Sortierung wesentlich länger). Geben Sie den Buchstaben F an, gefolgt von beliebig vielen Leer-/Tabulatorzeichen, gefolgt vom Namen einer <a href="../Functions.htm">Funktion</a>, die verwendet werden soll, um zwei beliebige Elemente in der Liste zu vergleichen. Die Funktion muss zwei oder drei Parameter akzeptieren. Wenn die Funktion den ersten Parameter für größer als den zweiten hält, muss sie einen positiven Integer zurückgeben. Wenn die Funktion beide Parameter als gleich betrachtet, muss sie 0, "" oder nichts zurückgeben. Andernfalls muss sie einen negativen Integer zurückgeben. Wenn der Rückgabewert einen Dezimalpunkt enthält, wird dieser Teil ignoriert (d.h. 0.8 ist dasselbe wie 0). Der dritte Parameter (falls vorhanden) empfängt den Offset (in Zeichen) des zweiten Elements relativ zum ersten Element in der ursprünglichen/unsortierten Liste (siehe Beispiele). Die Funktion verwendet die gleichen globalen Einstellungen (z.B. <a href="StringCaseSense.htm">StringCaseSense</a>) wie der Sort-Befehl, der sie aufgerufen hat.</p>
<p class="note"><strong>Hinweis:</strong> Die F-Option bewirkt, dass alle anderen Optionen außer D, Z und U ignoriert werden (allerdings haben N, C und CL weiterhin Einfluss darauf, wie <a href="#unique">Duplikate</a> erkannt werden). Außerdem erfolgt keine Sortierung, wenn die angegebene Funktion: 1) nicht existiert; 2) weniger als zwei Parameter akzeptiert; oder 3) der erste oder zweite Parameter <a href="../Functions.htm#ByRef">ByRef</a> ist.</p>
<p><strong>N:</strong> Numerische Sortierung. Jedes Element wird als Zahl statt als Zeichenkette vermutet (wenn z.B. diese Option nicht verwendet wird, hat dies zur Folge, dass die Zeichenkette 233 wegen der alphabetischen Anordnung kleiner ist als Zeichenkette 40). Sowohl dezimale als auch hexadezimale Zeichenketten (z.B. 0xF1) werden als numerisch betrachtet. Zeichenketten, die nicht mit einer Zahl beginnen, werden beim Sortieren als 0 betrachtet. Zahlen werden als 64-Bit-Floating-Point-Werte behandelt, d.h. der Nachkommabereich jeder Zahl (falls vorhanden) wird berücksichtigt.</p>
<p><strong>P</strong><em>n</em>: Sortiert Elemente gemäß der Zeichenposition <em>n</em> (verwenden Sie keine Hexadezimalzahlen für <em>n</em>). Wenn diese Option nicht verwendet wird, ist <em>n</em> standardmäßig 1 (die Position des ersten Zeichens). Die Sortierung vergleicht jede Zeichenkette mit den anderen, beginnend beim ihrem <em>n</em>-ten Zeichen. Wenn <em>n</em> größer als die Länge der Zeichenkette ist, wird die Zeichenkette beim Sortieren als leer betrachtet. Wenn diese Option mit der N-Option (numerische Sortierung) verwendet wird, wird die Zeichenposition der Zeichenkette verwendet, die nicht notwendigerweise mit der Ziffernposition der Zahl übereinstimmt.</p>
<p><strong>R:</strong> Sortiert in umgekehrter Reihenfolge (alphabetisch oder numerisch, abhängig von den anderen Optionen).</p>
<p><strong>Random:</strong> Sortiert in zufälliger Reihenfolge. Diese Option bewirkt, dass alle anderen Optionen außer D, Z und U ignoriert werden (allerdings haben N, C und CL weiterhin Einfluss darauf, wie Duplikate erkannt werden). Beispiele:</p>
<pre>Sort, MeineVar, Random
Sort, MeineVar, Random Z D|</pre>
<p id="unique"><strong>U:</strong> Entfernt doppelte Elemente aus der Liste, um jedes Element einzigartig zu machen. <a href="../misc/ErrorLevel.htm">ErrorLevel</a> wird auf die Anzahl der entfernten Elemente gesetzt (andernfalls 0). Wenn die C-Option aktiv ist, muss die Groß-/Kleinschreibung der Elemente übereinstimmen, damit sie als identisch betrachtet werden. Wenn die N-Option aktiv ist, wird ein Element wie z.B. 2 als Duplikat von 2.0 betrachtet. Wenn die P- oder \-Option aktiv ist, muss das gesamte Element ein Duplikat sein, nicht nur die Teilzeichenkette, die für die Sortierung verwendet wird. Wenn die Random- oder F-Option aktiv ist, werden Duplikate nur entfernt, wenn sie nach der Sortierung direkt aneinander angrenzen. Wenn z.B. <code class="no-highlight">A|B|A</code> zufällig sortiert wird, kann das Ergebnis entweder ein oder zwei A enthalten.</p>
<p><strong>Z:</strong> Um diese Option zu verstehen, nehmen wir als Beispiel eine Variable, die <code class="no-highlight">ROT`nGRÜN`nBLAU`n</code> enthält. Wenn die Z-Option nicht verwendet wird, wird der letzte Zeilenvorschub (`n) als Teil des letzten Elements betrachtet, folglich sind es nur 3 Elemente. Wenn aber Z verwendet wird, wird das letzte `n (falls vorhanden) als Trennzeichen betrachtet, folglich sind es 4 Elemente und das letzte Element ist leer.</p>
<p><strong>\:</strong> Sortiert Elemente gemäß der Teilzeichenkette hinter dem letzten umgekehrten Schrägstrich. Wenn das Element keinen umgekehrten Schrägstrich hat, wird das gesamte Element als Teilzeichenkette betrachtet. Diese Option ist nützlich, um Dateinamen unabhängig von ihrem Pfad zu sortieren, wie im folgenden Beispiel, wo die Zeile AAA.txt oberhalb der Zeile BBB.txt eingeordnet wurde, da ihre Verzeichnisse bei der Sortierung ignoriert wurden:</p>
<pre class="no-highlight">C:\BBB\AAA.txt
C:\AAA\BBB.txt</pre>
<p class="note"><strong>Hinweis:</strong> Die Optionen N und P werden ignoriert, wenn die \-Option vorhanden ist.</p>
<h2 id="Remarks">Bemerkungen</h2>
<p>Dieser Befehl wird normalerweise verwendet, um eine Variable zu sortieren, die eine Liste von Zeilen enthält, wobei jede Zeile mit einem Zeilenvorschubzeichen (`n) endet. Um eine Liste von Zeilen in eine Variable zu bekommen, kann z.B. <a href="FileRead.htm">FileRead</a> verwendet werden, das den gesamten Inhalt einer Datei lädt.</p>
<p>Wenn es sich bei dem Variablennamen um <em>Clipboard</em> handelt und die Zwischenablage Dateien enthält (die z.B. aus einem geöffneten Explorer-Fenster kopiert wurden), werden diese Dateien mit einer sortierten Liste von Dateinamen ersetzt. Mit anderen Worten, die Zwischenablage enthält nach dieser Operation nicht mehr die Dateien selbst.</p>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> wird durch diesen Befehl nur geändert, wenn die U-Option aktiv ist.</p>
<p>Die maximale Kapazität einer Variable kann mit <a href="_MaxMem.htm">#MaxMem</a> erhöht werden.</p>
<p>Wenn eine große Variable sortiert wurde und ihr Inhalt später nicht mehr benötigt wird, kann sie leer gemacht werden, um ihr Speicher freizugeben, z.B. <code>MeineVar := ""</code>.</p>
<h2 id="Related">Siehe auch</h2>
<p><a href="FileRead.htm">FileRead</a>, <a href="LoopReadFile.htm">dateilesende Schleife</a>, <a href="LoopParse.htm">parsende Schleife</a>, <a href="StrSplit.htm">StrSplit()</a>, <a href="RegisterCallback.htm">RegisterCallback()</a>, <a href="../misc/Clipboard.htm">Clipboard</a>, <a href="_MaxMem.htm">#MaxMem</a>, <a href="StringSplit.htm">StringSplit</a></p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExNumbers">
<p><a class="ex_number" href="#ExNumbers"></a> Sortiert eine kommagetrennte Liste von Zahlen.</p>
<pre>MeineVar := "5,3,7,9,1,13,999,-4"
Sort MeineVar, N D,  <em>; Numerisch sortieren und Komma als Trennzeichen verwenden.</em>
MsgBox %MeineVar%   <em>; Das Ergebnis ist -4,1,3,5,7,9,13,999</em></pre>
</div>

<div class="ex" id="ExFileContents">
<p><a class="ex_number" href="#ExFileContents"></a> Sortiert den Inhalt einer Datei.</p>
<pre><a href="FileRead.htm">FileRead</a>, Inhalt, C:\Adressliste.txt
if not ErrorLevel  <em>; Erfolgreich geladen.</em>
{
    Sort, Inhalt
    FileDelete, C:\Adressliste (alphabetisch).txt
    FileAppend, %Inhalt%, C:\Adressliste (alphabetisch).txt
    Inhalt := ""  <em>; Speicher freigeben.</em>
}</pre>
</div>

<div class="ex" id="ExFilenames">
<p><a class="ex_number" href="#ExFilenames"></a> Erstellt einen Hotkey, der gedrückt werden kann, um Dateien in einem Explorer-Fenster zu kopieren, ihre Dateinamen zu sortieren und die sortierte Liste in die Zwischenablage einzufügen.</p>
<pre>#c:: <em>; WIN+C</em>
Clipboard := "" <em>; Muss leer sein, damit die Erkennung funktioniert.</em>
Send ^c
ClipWait 2
if ErrorLevel
    return
Sort Clipboard
MsgBox Bereit zum Einfügen:`n%Clipboard%
return</pre>
</div>

<div class="ex" id="ExCustom">
<p><a class="ex_number" href="#ExCustom"></a> Zeigt die benutzerdefinierte Sortierung mit einer Rückruffunktion.</p>
<pre>MeineVar := "def`nabc`nmno`nFGH`nco-op`ncoop`ncop`ncon`n"
Sort, MeineVar, F StringSort
StringSort(a1, a2)
{
    return a1 &gt; a2 ? 1 : a1 &lt; a2 ? -1 : 0  <em>; Sortiert alphabetisch, gemäß der Einstellung von <a href="StringCaseSense.htm">StringCaseSense</a>.</em>
}

MeineVar := "5,3,7,9,1,13,999,-4"
Sort, MeineVar, F IntegerSort D,
IntegerSort(a1, a2)
{
    return a1 - a2  <em>; Sortiert in aufsteigender numerischer Reihenfolge. Diese Methode funktioniert nur, wenn die Differenz einen vorzeichenfähigen 64-Bit-Integer nicht überschreiten kann.</em>
}

MeineVar := "1,2,3,4"
Sort, MeineVar, F UmgekehrteRichtung D,  <em>; Kehrt die Liste um, so dass sie 4,3,2,1 enthält.</em>
UmgekehrteRichtung(a1, a2, offset)
{
    return offset  <em>; Offset ist positiv, wenn in der originalen Liste a2 nach a1 kommt, andernfalls negativ.</em>
}</pre>
</div>

</body>
</html>
