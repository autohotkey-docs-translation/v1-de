<!DOCTYPE HTML>
<html lang="de">
<head>
<title>VarSetCapacity() - Syntax &amp; Verwendung | AutoHotkey v1</title>
<meta name="description" content="Die VarSetCapacity-Funktion erhöht die Speicherkapazität einer Variable oder gibt ihren Speicher frei. Normalerweise nur in Sonderfällen wie DllCall() notwendig." />
<meta name="ahk:equiv-v2" content="lib/VarSetStrCapacity.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>VarSetCapacity()</h1>

<p>Erhöht die Speicherkapazität einer Variable oder gibt ihren Speicher frei. Normalerweise nur in Sonderfällen wie <a href="DllCall.htm">DllCall()</a> notwendig.</p>

<pre class="Syntax">GewährteKapazität := <span class="func">VarSetCapacity</span>(ZielVar <span class="optional">, GewünschteKapazität, FüllByte</span>)</pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>ZielVar</dt>
  <dd><p>Eine Variablenreferenz. Zum Beispiel: <code>VarSetCapacity(MeineVar, 1000)</code>. Dies kann auch eine dynamische Variable wie <code>Array%i%</code> oder ein <a href="../Functions.htm#ByRef">ByRef-Parameter einer Funktion</a> sein.</p></dd>

  <dt>GewünschteKapazität</dt>
  <dd><p>Wenn weggelassen, wird die aktuelle Kapazität der Variable zurückgegeben und ihr Inhalt bleibt unverändert. Andernfalls geht der gesamte Inhalt der Variable verloren (die Variable wird leer gemacht).</p>
      <p>Geben Sie für <em>GewünschteKapazität</em> die Anzahl der Bytes an, die die Variable nach der Anpassung enthalten soll. Für Unicode-Zeichenketten muss die doppelte Länge angegeben werden. <em>GewünschteKapazität</em> ist unabhängig vom internen Nullterminator. Zum Beispiel bewirkt die Angabe von 1, dass die Variable bis zu einem Byte zusätzlich zu ihrem internen Terminator enthalten kann. Hinweis: Die Variable wird automatisch erweitert, wenn ihr später vom Skript ein größerer Wert zugewiesen wird.</p>
      <p>Da diese Funktion oft nur aufgerufen wird, um eine bestimmte Mindestkapazität für die Variable sicherzustellen, wird die Funktion die Variable aus Performanzgründen nur dann verkleinern, wenn <em>GewünschteKapazität</em> 0 ist. Mit anderen Worten: Wenn die Variablenkapazität bereits größer als <em>GewünschteKapazität</em> ist, wird sie nicht reduziert (wobei die Variable aus Konsistenzgründen weiterhin leer gemacht wird).</p>
      <p>Um eine Variable explizit zu verkleinern, ist es daher notwendig, zuerst ihren Speicher mit <code>VarSetCapacity(Var, 0)</code> freizugeben und dann <code>VarSetCapacity(Var, NeueKapazität)</code> zu verwenden -- oder lassen Sie die Variable einfach bei Bedarf automatisch von Null aus erweitern.</p>
      <p>Aus Performanzgründen wird eine Variable mit einer ursprünglichen Kapazität von weniger als 64 Zeichen (128 Bytes in Unicode-Builds) in der Regel nicht freigegeben, da ihr Speicher permanenter Natur ist. In diesem Fall wird statt 0 die aktuelle Kapazität zurückgegeben.</p>
      <p>Aus Performanzgründen kann der Speicher einer Variable mit einer Kapazität von weniger als 4096 Bytes nicht durch Zuweisung einer leeren Zeichenkette (z.B. <code>Var := ""</code>) freigegeben werden. Allerdings kann <code>VarSetCapacity(Var, 0)</code> den Speicher freigeben.</p>
      <p id="neg1"><span class="ver">[v1.0.44.03+]</span>: Geben Sie -1 für <em>GewünschteKapazität</em> an, um die intern-gespeicherte Zeichenkettenlänge der Variable auf die Länge des aktuellen Inhalts zu aktualisieren. Dies ist in Situationen nützlich, wo die Variable indirekt geändert wurde, z.B. durch Übergabe ihrer <a href="../Variables.htm#amp">Adresse</a> via <a href="DllCall.htm">DllCall()</a>. In diesem Modus gibt VarSetCapacity() die Länge in Bytes zurück, nicht die Kapazität.</p></dd>

  <dt>FüllByte</dt>
  <dd><p>Dieser Parameter wird normalerweise weggelassen, um zu verhindern, dass der Speicher der Zielvariable initialisiert wird (stattdessen wird die Variable einfach wie oben beschrieben leer gemacht). Andernfalls geben Sie eine Zahl zwischen 0 und 255 an. Jedes Byte im Speicherbereich der Zielvariable (ihre aktuelle Kapazität, die größer als <em>GewünschteKapazität</em> sein kann) wird auf diese Zahl gesetzt. 0 ist der am häufigsten verwendete Wert, der in Situationen nützlich ist, wo die Variable rohe Binärdaten enthalten wird, wie z.B. eine <a href="DllCall.htm#struct">DllCall-Struktur</a>.</p></dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Diese Funktion gibt die Anzahl der Bytes zurück, die <em>ZielVar</em> nun enthalten kann und größer gleich <em>GewünschteKapazität</em> sein wird. Wenn <em>ZielVar</em> keine gültige Variable ist (z.B. eine direkt geschriebene Zeichenkette oder Zahl), wird 0 zurückgegeben. Wenn das System nicht genügend Speicher hat, um die Änderung durchzuführen (sehr selten), wird ein Fehlerdialogfenster angezeigt und die aktuelle Kapazität zurückgegeben – dieses Verhalten kann sich in einer zukünftigen Version ändern.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Zusätzlich zu den in <a href="DllCall.htm#str">DllCall()</a> beschriebenen Verwendungen kann diese Funktion auch verwendet werden, um die Performanz beim Zusammensetzen einer Zeichenkette durch schrittweise Verkettung zu verbessern, indem mehrfache automatische Größenanpassungen vermieden werden, wenn die endgültige Länge der Zeichenkette bereits bekannt ist. In diesem Fall muss <em>GewünschteKapazität</em> nicht exakt sein: Der Performanzgewinn gilt auch dann noch, wenn die Kapazität zu klein ist, außerdem beginnt die Variable sich automatisch zu erweitern, wenn die Kapazität erschöpft ist. Bei zu hoher Kapazität wird ein Teil des Speichers verschwendet, aber nur vorübergehend, da der gesamte Speicher nach der Operation mit <code>VarSetCapacity(Var, 0)</code> oder <code>Var := ""</code> wieder freigegeben werden kann.</p>
<p><a href="_MaxMem.htm">#MaxMem</a> begrenzt nur die automatische Erweiterung, die eine Variable selbst durchführt. Diese Direktive hat keinen Einfluss auf VarSetCapacity().</p>
<h2 id="Related">Siehe auch</h2>
<p><a href="DllCall.htm">DllCall()</a>, <a href="_MaxMem.htm">#MaxMem</a>, <a href="NumPut.htm">NumPut()</a>, <a href="NumGet.htm">NumGet()</a></p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExConcat">
<p><a class="ex_number" href="#ExConcat"></a> Stellt sicher, dass <em>MeineVar</em> genügend Speicher hat.</p>
<pre>VarSetCapacity(MeineVar, 10240000)  <em>; ~10 MB</em>
Loop
{
    <em>; ...</em>
    MeineVar .= ZuVerkettendeZkette
    <em>; ...</em>
}</pre>
</div>

<div class="ex" id="ExDllCall">
<p><a class="ex_number" href="#ExDllCall"></a> Verwenden Sie eine Variable, um eine Zeichenkette von einer externen Funktion über <a href="DllCall.htm">DllCall()</a> zu empfangen.</p>
<pre><em>; Erforderlichen Pufferspeicher für eine Zeichenkette berechnen.</em>
bytes_per_char := A_IsUnicode ? 2 : 1
max_chars := 500
max_bytes := max_chars * bytes_per_char

Loop 2
{
    <em>; Speicher für die Verwendung mit DllCall reservieren.</em>
    VarSetCapacity(buf, max_bytes)

    if (A_Index = 1)
        <em>; Variable indirekt via DllCall ändern.</em>
        DllCall("wsprintf", <span class="red">"Ptr", &amp;buf</span>, "Str", "0x%08x", "UInt", 4919)
    else
        <em>; "str" verwenden, um die Länge automatisch zu aktualisieren:</em>
        DllCall("wsprintf", <span class="blue">"Str", buf</span>, "Str", "0x%08x", "UInt", 4919)

    <em>; Verkettung, um zu zeigen, warum die Länge aktualisiert werden muss:</em>
    wrong_str := buf . "&lt;end&gt;"
    wrong_len := StrLen(buf)

    <em>; Länge der Variable aktualisieren.</em>
    VarSetCapacity(buf, -1)

    right_str := buf . "&lt;end&gt;"
    right_len := StrLen(buf)

    MsgBox,
    (
    Vor der Aktualisierung
      Zeichenkette: %wrong_str%
      Länge: %wrong_len%

    Nach der Aktualisierung
      Zeichenkette: %right_str%
      Länge: %right_len%
    )
}
</pre>
</div>

</body>
</html>
