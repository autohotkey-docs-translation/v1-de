<!DOCTYPE HTML>
<html lang="de">
<head>
<title>TreeView (GUI) - Syntax &amp; Verwendung | AutoHotkey v1</title>
<meta name="description" content="Eine Baumansicht (engl. TreeView) wird verwendet, um eine Hierarchie von mehreren ineinander verschachtelten Elementen darzustellen. Diese Seite enthält die Funktionen, um sie zu modifizieren." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>

<body>
<h1>TreeView <span class="ver">[v1.0.44+]</span></h1>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Intro">Einführung und einfaches Beispiel</a></li>
  <li><a href="#Options">Optionen und Styles für den Optionen-Parameter</a></li>
  <li><a href="#BuiltIn">Interne TreeView-Funktionen</a></li>
  <li><a href="#notify">G-Label-Benachrichtigungen</a></li>
  <li><a href="#Remarks">Bemerkungen</a></li>
  <li><a href="#Examples">Beispiele</a></li>
</ul>

<h2 id="Intro">Einführung und einfaches Beispiel</h2>
<p>Eine Baumansicht (engl. TreeView) wird verwendet, um eine Hierarchie von mehreren ineinander verschachtelten Elementen darzustellen. Das wohl bekannteste Beispiel dafür ist der Navigationsbereich am linken Rand eines Explorer-Fensters, mit dem Laufwerke und Ordner ausgewählt werden können.</p>
<p>Eine typische TreeView sieht wie folgt aus:</p>
<img src="../static/ctrl_treeview.png" alt="TreeView" />
<p>Die Syntax zur Erstellung einer TreeView ist:</p>
<pre class="Syntax" id="GuiAdd"><span class="func">Gui</span>, Add, TreeView, Optionen</pre>
<p>Das folgende Beispiel ist ein lauffähiges Skript, das eine einfache Hierarchie von Elementen erstellt und anzeigt:</p>
<pre>Gui, Add, TreeView
<span class="red">P1</span> := <a href="#TV_Add">TV_Add</a>("Erstes Elternelement")
P1C1 := TV_Add("Erstes Kindelement von Elternelement 1", <span class="red">P1</span>)  <em>; P1 als Elternelement für dieses Element festlegen.</em>
P2 := TV_Add("Zweites Elternelement")
P2C1 := TV_Add("Erstes Kindelement von Elternelement 2", P2)
P2C2 := TV_Add("Zweites Kindelement von Elternelement 2", P2)
P2C2C1 := TV_Add("Erstes Kindelement von Kindelement 2", P2C2)

Gui, Show  <em>; Das Fenster und dessen TreeView anzeigen.</em>
return

GuiClose:  <em>; Skript beenden, wenn der Benutzer die GUI der TreeView schließt.</em>
ExitApp</pre>

<h2 id="Options">Optionen und Styles für den Optionen-Parameter</h2>
<p id="AltSubmit"><strong>AltSubmit:</strong> Teilt dem Skript mehr TreeView-Ereignisse als normal mit. Mit anderen Worten, das g-Label wird häufiger gestartet. Weitere Informationen finden Sie unter <a href="#notify">TreeView-Benachrichtigungen</a>.</p>
<p><strong>Background:</strong> Geben Sie das Wort <em>Background</em> an, unmittelbar gefolgt von einem Farbnamen (siehe <a href="Progress.htm#colors">Farbentabelle</a>) oder RGB-Wert (mit oder ohne 0x-Präfix). Beispiele: <code class="no-highlight">BackgroundSilver</code>, <code class="no-highlight">BackgroundFFDD99</code>. Wenn diese Option nicht vorhanden ist, verwendet die TreeView als Hintergrundfarbe standardmäßig die Farbe, die im letzten Parameter von <a href="Gui.htm#Color">Gui Color</a> definiert ist (wenn keine definiert ist, dann die Standardhintergrundfarbe des Systems). Mit <code class="no-highlight">BackgroundDefault</code> kann die Standardhintergrundfarbe des Systems gesetzt werden (in der Regel weiß). Zum Beispiel kann die Standardfarbe einer TreeView via <code>GuiControl, +BackgroundDefault, MeineTreeView</code> wiederhergestellt werden.</p>
<p><strong>Buttons:</strong> Geben Sie <code class="no-highlight">-Buttons</code> (minus Buttons) an, um die Plus- oder Minuszeichen auf der linken Seite eines Elements, das Kindelemente hat, zu entfernen.</p>
<p><strong>C:</strong> Textfarbe. Geben Sie den Buchstaben C an, unmittelbar gefolgt von einem Farbnamen (siehe <a href="Progress.htm#colors">Farbentabelle</a>) oder RGB-Wert (mit oder ohne 0x-Präfix). Beispiele: <code class="no-highlight">cRed</code>, <code class="no-highlight">cFF2211</code>, <code class="no-highlight">c0xFF2211</code>, <code class="no-highlight">cDefault</code>.</p>
<p id="Checked"><strong>Checked:</strong> Stellt eine CheckBox auf der linken Seite jedes Elements bereit. Geben Sie beim <a href="#TV_Add">Hinzufügen</a> eines Elements das Wort <em>Check</em> in den Optionen an, um die CheckBox vorerst im abgehakten Zustand anzuzeigen. Der Benutzer kann die CheckBox anklicken oder die Leertaste drücken, um ein Häkchen zu setzen oder zu entfernen. Um herauszufinden, welche Elemente aktuell in der TreeView abgehakt sind, rufen Sie <a href="#TV_GetNext">TV_GetNext()</a> oder <a href="#TV_Get">TV_Get()</a> auf.</p>
<p><strong>HScroll:</strong> Geben Sie <code class="no-highlight">-HScroll</code> (minus HScroll) an, um das horizontale Scrollen im Steuerelement zu deaktivieren (zusätzlich wird der horizontale Scrollbalken entfernt).</p>
<p id="ImageList"><strong>ImageList:</strong> Ermöglicht das Hinzufügen von Symbolen zu einer TreeView. Geben Sie das Wort <em>ImageList</em> an, unmittelbar gefolgt von der ImageList-ID, die von einem vorherigen <a href="ListView.htm#IL_Create">IL_Create()</a>-Aufruf zurückgegeben wurde. Diese Option funktioniert nur beim Erstellen einer TreeView (<a href="#TV_SetImageList">TV_SetImageList()</a> unterliegt nicht dieser Einschränkung). Hier ein funktionierendes Beispiel:</p>
<pre>ImageListID := <a href="ListView.htm#IL_Create">IL_Create</a>(10)  <em>; Eine ImageList mit einer anfänglichen Kapazität von 10 Symbolen erstellen.</em>
Loop 10  <em>; ImageList mit einigen Standardsymbolen des Systems füllen.</em>
    <a href="ListView.htm#IL_Add">IL_Add</a>(ImageListID, "shell32.dll", A_Index)
Gui, Add, TreeView, ImageList%ImageListID%
<a href="#TV_Add">TV_Add</a>("Elementname", 0, "Icon4")  <em>; Element zur TreeView hinzufügen und ein Ordnersymbol zuweisen.</em>
Gui Show</pre>
<p><strong>Lines:</strong> Geben Sie <code class="no-highlight">-Lines</code> (minus Lines) an, um die Verbindungslinien zwischen den Eltern- und Kindelementen zu verstecken. Das Entfernen solcher Linien verhindert allerdings auch, dass die Plus-/Minuszeichen bei Top-Level-Elementen angezeigt werden.</p>
<p id="ReadOnly"><strong>ReadOnly:</strong> Geben Sie <code class="no-highlight">-ReadOnly</code> (minus ReadOnly) an, um dem Benutzer das Editieren des Texts/Namens eines Elements zu erlauben. Um ein Element zu editieren, wählen Sie es aus und drücken Sie <kbd>F2</kbd> (siehe <a href="#WantF2">WantF2</a>-Option unten). Alternativ können Sie einmal auf ein Element klicken, um es auszuwählen, mindestens eine halbe Sekunde warten und dann erneut auf dasselbe Element klicken, um es zu editieren. Nach dem Editieren kann ein Element wie folgt unter seinen Geschwisterelementen alphabetisch neu positioniert werden:</p>
<pre>Gui, Add, TreeView, -ReadOnly gMeinBaum  <em>; Für gMeinBaum siehe <a href="#notify">TreeView-g-Label</a>.</em>
<em>; ...</em>
MeinBaum:
if (A_GuiEvent == "e")  <em>; Der Benutzer hat aufgehört, ein Element zu editieren (== ermöglicht einen Groß-/Kleinschreibung-sensitiven Vergleich).</em>
    TV_Modify(TV_GetParent(A_EventInfo), "Sort")  <em>; Funktioniert auch, wenn das Element kein Elternelement hat.</em>
return</pre>
<p><strong>R:</strong> Höhe in Zeilen (beim Erstellen). Geben Sie den Buchstaben R an, unmittelbar gefolgt von der Anzahl der Zeilen, für die innerhalb des Steuerelements Platz geschaffen werden soll. Zum Beispiel bewirkt <code class="no-highlight">R10</code>, dass das Steuerelement 10 Elemente hoch gemacht wird.</p>
<p id="WantF2"><strong>WantF2:</strong> Geben Sie <code class="no-highlight">-WantF2</code> (minus WantF2) an, um den Benutzer daran zu hindern, das aktuell ausgewählte Element mit <kbd>F2</kbd> zu <a href="#ReadOnly">editieren</a>. Diese Einstellung wird ignoriert, es sei denn, <a href="#ReadOnly">-ReadOnly</a> ist ebenfalls wirksam. Unabhängig von dieser Einstellung erhält das g-Label weiterhin <a href="#NotifyK">F2-Benachrichtigungen</a>.</p>
<p><strong>(Namenlose numerische Styles):</strong> Andere Styles als die oben genannten werden nur selten verwendet und haben daher keine Namen. Eine vollständige Liste finden Sie unter <a href="../misc/Styles.htm#TreeView">TreeView-Styles</a>.</p>

<h2 id="BuiltIn">Interne TreeView-Funktionen</h2>
<p>Alle folgenden TreeView-Funktionen arbeiten mit dem <a href="Gui.htm#DefaultWin">Standard-GUI-Fenster</a> des aktuellen Threads (was z.B. mit <code><a href="Gui.htm#Default">Gui, 2:Default</a></code> geändert werden kann). Wenn das Standardfenster nicht existiert oder keine TreeView-Steuerelemente hat, geben alle Funktionen Null zurück, um das Problem zu kennzeichnen.</p>
<p id="GuiTV">Wenn das Fenster mehr als ein TreeView-Steuerelement hat, arbeiten die Funktionen standardmäßig mit dem zuletzt hinzugefügten. Um dies zu ändern, verwenden Sie <code>Gui, TreeView, TreeViewName</code>, wobei <em>TreeViewName</em> entweder der Name der <a href="Gui.htm#var">zugeordneten Variable</a>, die ClassNN-Bezeichnung (wie vom internen Tool "Window Spy" angezeigt) oder in <span class="ver">[v1.1.04+]</span> die HWND-Nummer (eindeutige ID) der TreeView ist. Einmal geändert, werden alle existierenden und zukünftigen <a href="../misc/Threads.htm">Threads</a> die angegebene TreeView verwenden. <span class="ver">[v1.1.23+]</span>: <a href="../Variables.htm#DefaultTreeView">A_DefaultTreeView</a> enthält die aktuelle Einstellung.</p>

<p id="bifAddModifyDelete">Elementfunktionen:</p>
<ul>
  <li><a href="#TV_Add">TV_Add</a>: Fügt ein neues Element zur TreeView hinzu.</li>
  <li><a href="#TV_Modify">TV_Modify</a>: Ändert die Attribute und/oder den Namen eines Elements.</li>
  <li><a href="#TV_Delete">TV_Delete</a>: Löscht ein bestimmtes Element oder alle Elemente.</li>
</ul>

<p id="bifGet">Abruffunktionen:</p>
<ul>
  <li><a href="#TV_GetSelection">TV_GetSelection</a>: Gibt die ID-Nummer des ausgewählten Elements zurück.</li>
  <li><a href="#TV_GetCount">TV_GetCount</a>: Gibt die Gesamtzahl der Elemente im Steuerelement zurück.</li>
  <li><a href="#TV_GetParent">TV_GetParent</a>: Gibt die ID-Nummer des Elternelements eines bestimmten Elements zurück.</li>
  <li><a href="#TV_GetChild">TV_GetChild</a>: Gibt die ID-Nummer des ersten/obersten Kindelements eines bestimmten Elements zurück.</li>
  <li><a href="#TV_GetPrev">TV_GetPrev</a>: Gibt die ID-Nummer des Geschwisterelements zurück, das sich oberhalb eines bestimmten Elements befindet.</li>
  <li><a href="#TV_GetNext">TV_GetNext</a>: Gibt die ID-Nummer des nächsten Elements zurück, das sich unterhalb eines bestimmten Elements befindet.</li>
  <li><a href="#TV_GetText">TV_GetText</a>: Ruft den Text/Namen eines bestimmten Elements ab.</li>
  <li><a href="#TV_Get">TV_Get</a>: Gibt die ID-Nummer eines bestimmten Elements zurück, unter Beachtung des angegebenen Attributs.</li>
</ul>

<p id="bifIcon">Sonstige Funktionen:</p>
<ul>
  <li><a href="#TV_SetImageList">TV_SetImageList</a> <span class="ver">[v1.1.02+]</span>: Setzt oder ersetzt eine ImageList zur Darstellung von Symbolen.</li>
</ul>

<h3 id="TV_Add">TV_Add</h3>
<p>Fügt ein neues Element zur TreeView hinzu.</p>
<pre class="Syntax">ElementID := <span class="func">TV_Add</span>(Name, <span class="optional">ElternElementID, Optionen</span>)</pre>
<h4 class="func_section" id="TV_Add_Parameters">Parameter</h4>
<dl>
  <dt>Name</dt>
  <dd>
    <p>Der Anzeigetext des Elements, der textuell oder numerisch sein kann (einschließlich numerischer Ergebnisse von <a href="../Variables.htm#Expressions">Ausdrücken</a>).</p>
  </dd>
  <dt>ElternElementID</dt>
  <dd>
    <p>Wenn leer oder weggelassen, wird standardmäßig 0 verwendet, d.h. das Element wird als Top-Level-Element hinzugefügt. Andernfalls geben Sie die ID-Nummer des Elternelements des neuen Elements an.</p>
  </dd>
  <dt id="Options_for_TV_Add_and_TV_Modify">Optionen</dt>
  <dd>
    <p>Wenn leer oder weggelassen, werden standardmäßig keine Optionen verwendet. Andernfalls geben Sie eine oder mehrere Optionen aus der unteren Liste an (nicht Groß-/Kleinschreibung-sensitiv). Trennen Sie alle Optionen jeweils durch ein Leer- oder Tabulatorzeichen. Um eine Option zu entfernen, setzen Sie ein Minuszeichen davor. Um eine Option hinzuzufügen, lassen Sie das Vorzeichen weg oder setzen Sie ein Pluszeichen davor.</p>
    <p id="Bold"><strong>Bold:</strong> Stellt den Namen des Elements in fetter Schrift dar. Um dessen Schrift später wieder zu normalisieren, verwenden Sie <code>TV_Modify(ElementID, "-Bold")</code>. <span class="ver">[v1.1.30.01+]</span>: Direkt nach dem Wort <em>Bold</em> kann optional eine 0 oder 1 angegeben werden, um den Startzustand zu bestimmen.</p>
    <p id="Check"><strong>Check:</strong> Zeigt ein Häkchen links neben dem Element an (sofern die TreeView über <a href="#Checked">CheckBoxen</a> verfügt). Um das Häkchen später wieder zu entfernen, verwenden Sie <code>TV_Modify(ElementID, "-Check")</code>. Direkt nach dem Wort <em>Check</em> kann optional eine 0 oder 1 angegeben werden, um den Startzustand zu bestimmen. Mit anderen Worten, <code>"Check"</code> ist dasselbe wie <code>"Check" . VarEnhältEins</code> (wobei der Punkt ein <a href="../Variables.htm#concat">Verkettungsoperator</a> ist).</p>
    <p id="Expand"><strong>Expand:</strong> Klappt das Element auf, um seine Kindelemente (falls vorhanden) anzuzeigen. Um das Element später wieder zuzuklappen, verwenden Sie <code>TV_Modify(ElementID, "-Expand")</code>. Wenn es keine Kindelemente hat, gibt <a href="#TV_Modify">TV_Modify()</a> 0 anstelle der Element-ID zurück. <a href="#TV_Add">TV_Add()</a> hingegen markiert das Element als aufgeklappt, falls später noch Kindelemente hinzugefügt werden. Im Gegensatz zur <a href="#Select">Select</a>-Option unten wird beim Aufklappen eines Elements nicht automatisch das Elternelement aufgeklappt. Direkt nach dem Wort <em>Expand</em> kann optional eine 0 oder 1 angegeben werden, um den Startzustand zu bestimmen. Mit anderen Worten, <code>"Expand"</code> ist dasselbe wie <code>"Expand" . VarEnhältEins</code>.</p>
    <p><strong>First | Sort | N:</strong> Diese Optionen gelten nur für <a href="#TV_Add">TV_Add()</a>. Sie bestimmen die Position des neuen Elements relativ zu seinen Geschwisterelementen (ein <em>Geschwisterelement</em> befindet sich auf derselben Ebene). Wenn keine dieser Optionen vorhanden ist, wird das neue Element als letztes/unterstes Geschwisterelement hinzugefügt. Andernfalls geben Sie das Wort <em>First</em> an, um das Element als erstes/oberstes Geschwisterelement hinzuzufügen, oder das Wort <em>Sort</em>, um das Element unter seinen Geschwisterelementen in alphabetischer Reihenfolge einzufügen. Wenn eine Nummer (<em>N</em>) angegeben ist, wird diese als ID-Nummer des Geschwisterelements vermutet, hinter dem das neue Element eingefügt werden soll (wenn <em>N</em> die einzige Option ist, muss sie nicht in Anführungszeichen gesetzt werden).</p>
    <p><strong>Icon:</strong> Geben Sie das Wort <em>Icon</em> an, unmittelbar gefolgt von der Nummer des Symbols, das links neben dem Elementnamen angezeigt werden soll. Wenn diese Option fehlt, wird das erste Symbol in der <a href="#ImageList">ImageList</a> verwendet. Um ein leeres Symbol anzuzeigen, geben Sie eine Nummer größer als die Anzahl der Symbole in der ImageList an. Wenn dem Steuerelement keine ImageList zugewiesen wurde, wird kein Symbol angezeigt und kein Platz dafür reserviert.</p>
    <p id="Select"><strong>Select:</strong> Wählt das Element aus. Da immer nur ein Element ausgewählt werden kann, wird das zuvor ausgewählte Element automatisch abgewählt. Außerdem bewirkt diese Option, dass alle Elternelemente des neuen Elements, das ausgewählt wurde, aufgeklappt werden, falls erforderlich. Um die aktuelle Auswahl zu ermitteln, verwenden Sie <a href="#TV_GetSelection">TV_GetSelection()</a>.</p>
    <p><strong>Sort:</strong> In Verbindung mit <a href="#TV_Modify">TV_Modify()</a> bewirkt diese Option, dass die Kindelemente des angegebenen Elements in alphabetischer Reihenfolge sortiert werden. Um stattdessen alle Top-Level-Elemente zu sortieren, verwenden Sie <code>TV_Modify(0, "Sort")</code>. Wenn es keine Kindelemente hat, wird 0 anstelle der ID des geänderten Elements zurückgegeben.</p>
    <p><strong>Vis:</strong> Stellt sicher, dass das Element vollständig sichtbar ist, ggf. durch Scrollen der TreeView und/oder Aufklappen des Elternelements.</p>
    <p><strong>VisFirst:</strong> Dasselbe wie oben, außer dass die TreeView zusätzlich gescrollt wird, um das Element nach Möglichkeit ganz oben anzuzeigen. Diese Option ist in Verbindung mit <a href="#TV_Modify">TV_Modify()</a> grundsätzlich effektiver als mit <a href="#TV_Add">TV_Add()</a>.</p>
  </dd>
</dl>
<h4 class="func_section" id="TV_Add_Return_Value">Rückgabewert</h4>
<p>Bei Erfolg gibt diese Funktion die eindeutige ID-Nummer des neuen Elements zurück. Bei Misserfolg gibt sie 0 zurück.</p>
<h4 class="func_section" id="TV_Add_Remarks">Bemerkungen</h4>
<p>Um das Hinzufügen sehr vieler Elemente performanter zu machen, verwenden Sie <code>GuiControl, -Redraw, MeineTreeView</code>, bevor Sie die Elemente hinzufügen, und danach <code>GuiControl, +Redraw, MeineTreeView</code>.</p>

<h3 id="TV_Modify">TV_Modify</h3>
<p>Ändert die Attribute und/oder den Namen eines Elements.</p>
<pre class="Syntax">ElementID := <span class="func">TV_Modify</span>(ElementID <span class="optional">, Optionen, NeuerName</span>)</pre>
<h4 class="func_section" id="TV_Modify_Parameters">Parameter</h4>
<dl>
  <dt>ElementID</dt>
  <dd>
    <p>Die ID-Nummer des Elements, das geändert werden soll.</p>
  </dd>
  <dt>Optionen</dt>
  <dd>
    <p>Wenn dieser und der <em>NeuerName</em>-Parameter weggelassen werden, wird das Element ausgewählt. Andernfalls geben Sie eine oder mehrere Optionen aus der <a href="#Options_for_TV_Add_and_TV_Modify">obigen Liste</a> an.</p>
  </dd>
  <dt>NeuerName</dt>
  <dd>
    <p>Wenn weggelassen, bleibt der aktuelle Name unverändert. Andernfalls geben Sie den neuen Namen des Elements an.</p>
  </dd>
</dl>
<h4 class="func_section" id="TV_Modify_Return_Value">Rückgabewert</h4>
<p>Bei Erfolg gibt diese Funktion die ID des Elements zurück. Bei Misserfolg (oder teilweisem Misserfolg) gibt sie 0 zurück.</p>

<h3 id="TV_Delete">TV_Delete</h3>
<p>Löscht ein bestimmtes Element oder alle Elemente.</p>
<pre class="Syntax">IstGelöscht := <span class="func">TV_Delete</span>(<span class="optional">ElementID</span>)</pre>
<h4 class="func_section" id="TV_Delete_Parameters">Parameter</h4>
<dl>
  <dt>ElementID</dt>
  <dd>
    <p>Wenn leer oder weggelassen, werden <u>alle</u> Elemente in der TreeView gelöscht. Andernfalls geben Sie die ID-Nummer des Elements an, das gelöscht werden soll.</p>
  </dd>
</dl>
<h4 class="func_section" id="TV_Delete_Return_Value">Rückgabewert</h4>
<p>Bei Erfolg gibt diese Funktion 1 (true) zurück. Bei Misserfolg gibt sie 0 (false) zurück.</p>

<h3 id="TV_GetSelection">TV_GetSelection</h3>
<p>Gibt die ID-Nummer des ausgewählten Elements zurück.</p>
<pre class="Syntax">ElementID := <span class="func">TV_GetSelection</span>()</pre>
<h4 class="func_section" id="TV_GetSelection_Return_Value">Rückgabewert</h4>
<p>Diese Funktion gibt die ID-Nummer des ausgewählten Elements zurück.</p>

<h3 id="TV_GetCount">TV_GetCount</h3>
<p>Gibt die Gesamtzahl der Elemente im Steuerelement zurück.</p>
<pre class="Syntax">Anzahl := <span class="func">TV_GetCount</span>()</pre>
<h4 class="func_section" id="TV_GetCount_Return_Value">Rückgabewert</h4>
<p>Diese Funktion gibt die Gesamtzahl der Elemente im Steuerelement zurück. Der Wert wird immer sofort zurückgegeben, da das Steuerelement diese Zählung zwischenspeichert.</p>

<h3 id="TV_GetParent">TV_GetParent</h3>
<p>Gibt die ID-Nummer des Elternelements eines bestimmten Elements zurück.</p>
<pre class="Syntax">ElternElementID := <span class="func">TV_GetParent</span>(ElementID)</pre>
<h4 class="func_section" id="TV_GetParent_Parameters">Parameter</h4>
<dl>
  <dt>ElementID</dt>
  <dd>
    <p>Die ID-Nummer des Elements, das geprüft werden soll.</p>
  </dd>
</dl>
<h4 class="func_section" id="TV_GetParent_Return_Value">Rückgabewert</h4>
<p>Diese Funktion gibt die ID-Nummer des Elternelements des angegebenen Elements zurück. Wenn das Element kein Elternelement hat, gibt sie 0 zurück, was für alle Top-Level-Elemente gilt.</p>

<h3 id="TV_GetChild">TV_GetChild</h3>
<p>Gibt die ID-Nummer des ersten/obersten Kindelements eines bestimmten Elements zurück.</p>
<pre class="Syntax">KindElementID := <span class="func">TV_GetChild</span>(ElementID)</pre>
<h4 class="func_section" id="TV_GetChild_Parameters">Parameter</h4>
<dl>
  <dt>ElementID</dt>
  <dd>
    <p>Die ID-Nummer des Elements, das geprüft werden soll. Wenn 0, wird die ID-Nummer des ersten/obersten Elements in der TreeView zurückgegeben.</p>
  </dd>
</dl>
<h4 class="func_section" id="TV_GetChild_Return_Value">Rückgabewert</h4>
<p>Diese Funktion gibt die ID-Nummer des ersten/obersten Kindelements des angegebenen Elements zurück. Wenn dort kein Kindelement vorhanden ist, gibt sie 0 zurück.</p>

<h3 id="TV_GetPrev">TV_GetPrev</h3>
<p>Gibt die ID-Nummer des Geschwisterelements zurück, das sich oberhalb eines bestimmten Elements befindet.</p>
<pre class="Syntax">VorherigesElementID := <span class="func">TV_GetPrev</span>(ElementID)</pre>
<h4 class="func_section" id="TV_GetPrev_Parameters">Parameter</h4>
<dl>
  <dt>ElementID</dt>
  <dd>
    <p>Die ID-Nummer des Elements, das geprüft werden soll.</p>
  </dd>
</dl>
<h4 class="func_section" id="TV_GetPrev_Return_Value">Rückgabewert</h4>
<p>Diese Funktion gibt die ID-Nummer des Geschwisterelements zurück, das sich oberhalb des angegebenen Elements befindet. Wenn dort kein Geschwisterelement vorhanden ist, gibt sie 0 zurück.</p>

<h3 id="TV_GetNext">TV_GetNext</h3>
<p>Gibt die ID-Nummer des nächsten Elements zurück, das sich unterhalb eines bestimmten Elements befindet.</p>
<pre class="Syntax">NächstesElementID := <span class="func">TV_GetNext</span>(<span class="optional">ElementID, ElementTyp</span>)</pre>
<h4 class="func_section" id="TV_GetNext_Parameters">Parameter</h4>
<dl>
  <dt>ElementID</dt>
  <dd>
    <p>Wenn leer oder weggelassen, wird standardmäßig 0 verwendet, d.h. es wird die ID-Nummer des ersten/obersten Elements in der TreeView zurückgegeben. Andernfalls geben Sie die ID-Nummer des Elements an, das geprüft werden soll.</p>
  </dd>
  <dt>ElementTyp</dt>
  <dd>
    <p>Wenn weggelassen, wird die ID-Nummer des Geschwisterelements abgerufen, das sich unterhalb des angegebenen Elements befindet. Andernfalls geben Sie eine der folgenden Zeichenketten an:</p>
    <p><strong>Full</strong> oder <strong>F</strong>: Ruft das nächste Element unabhängig von seiner Beziehung zum angegebenen Element ab. Dadurch kann das Skript auf einfache Weise die gesamte TreeView Element für Element durchgehen. Siehe das Beispiel unten.</p>
    
    <p><strong>Check</strong>, <strong>Checked</strong> oder <strong>C</strong>: Ruft nur das nächste abgehakte Element ab.</p>
  </dd>
</dl>
<h4 class="func_section" id="TV_GetNext_Return_Value">Rückgabewert</h4>
<p>Diese Funktion gibt die ID-Nummer des nächsten Elements zurück, das sich unterhalb des angegebenen Elements befindet. Wenn dort kein nächstes Element vorhanden ist, gibt sie 0 zurück.</p>
<h4 class="func_section" id="TV_GetNext_Remarks">Bemerkungen</h4>
<p>Das folgende Beispiel durchläuft die gesamte TreeView Element für Element:</p>
<pre>ElementID := 0  <em>; Die Suche beim ersten Element beginnen.</em>
Loop
{
    ElementID := TV_GetNext(ElementID, "Full")  <em>; Ersetzen Sie "Full" mit "Checked", um alle abgehakten Elemente zu finden.</em>
    if not ElementID  <em>; Keine weiteren Elemente verfügbar.</em>
        break
    TV_GetText(ElementText, ElementID)
    MsgBox Das nächste Element ist %ElementID% und enthält "%ElementText%".
}</pre>

<h3 id="TV_GetText">TV_GetText</h3>
<p>Ruft den Text/Namen eines bestimmten Elements ab.</p>
<pre class="Syntax">ElementID := <span class="func">TV_GetText</span>(AusgabeVar, ElementID)</pre>
<h4 class="func_section" id="TV_GetText_Parameters">Parameter</h4>
<dl>
  <dt>AusgabeVar</dt>
  <dd>
    <p>Name der Ausgabevariable, in der der abgerufene Text gespeichert werden soll. Es werden nur bis zu 8191 Zeichen abgerufen. Bei Misserfolg wird sie leer gemacht.</p>
  </dd>
  <dt>ElementID</dt>
  <dd>
    <p>Die ID-Nummer des Elements, dessen Text abgerufen werden soll.</p>
  </dd>
</dl>
<h4 class="func_section" id="TV_GetText_Return_Value">Rückgabewert</h4>
<p>Bei Erfolg gibt diese Funktion die ID des Elements zurück. Bei Misserfolg gibt sie 0 zurück.</p>

<h3 id="TV_Get">TV_Get</h3>
<p>Gibt die ID-Nummer eines bestimmten Elements zurück, unter Beachtung des angegebenen Attributs.</p>
<pre class="Syntax">ElementID := <span class="func">TV_Get</span>(ElementID, Attribut)</pre>
<h4 class="func_section" id="TV_Get_Parameters">Parameter</h4>
<dl>
  <dt>ElementID</dt>
  <dd>
    <p>Die ID-Nummer des Elements, das geprüft werden soll.</p>
  </dd>
  <dt>Attribut</dt>
  <dd>
    <p>Geben Sie eine der folgenden Zeichenketten an:</p>
    <p><strong>E</strong>, <strong>Expand</strong> oder <strong>Expanded</strong>: Das Element ist gerade <a href="#Expand">aufgeklappt</a> (d.h. seine Kindelemente werden angezeigt).</p>
    <p><strong>C</strong>, <strong>Check</strong> oder <strong>Checked</strong>: Das Element hat ein <a href="#Check">Häkchen</a>.</p>
    <p><strong>B</strong> oder <strong>Bold</strong>: Das Element wird gerade <a href="#Bold">fett</a> dargestellt.</p>
  </dd>
</dl>
<h4 class="func_section" id="TV_Get_Return_Value">Rückgabewert</h4>
<p>Wenn das angegebene Element das angegebene Attribut hat, wird dessen ID zurückgegeben. Andernfalls wird 0 zurückgegeben.</p>
<h4 class="func_section" id="TV_Get_Remarks">Bemerkungen</h4>
<p>Da eine IF-Anweisung jeden Wert ungleich 0 als "wahr" ansieht, sind die folgenden zwei Zeilen funktionsgleich: <code>if TV_Get(ElementID, "Checked") = ElementID</code> und <code>if TV_Get(ElementID, "Checked")</code>.</p>

<h3 id="TV_SetImageList">TV_SetImageList <span class="ver">[v1.1.02+]</span></h3>
<p>Setzt oder ersetzt eine <a href="#ImageList">ImageList</a> zur Darstellung von Symbolen.</p>
<pre class="Syntax">VorherigeImageListID := <span class="func">TV_SetImageList</span>(ImageListID <span class="optional">, SymbolTyp</span>)</pre>
<h4 class="func_section" id="TV_SetImageList_Parameters">Parameter</h4>
<dl>
  <dt>ImageListID</dt>
  <dd>
    <p>Die ID-Nummer, die von einem früheren Aufruf von <a href="ListView.htm#IL_Create">IL_Create()</a> zurückgegeben wurde.</p>
  </dd>
  <dt>SymbolTyp</dt>
  <dd>
    <p>Wenn weggelassen, wird standardmäßig 0 verwendet. Andernfalls geben Sie 2 für Zustandssymbole an (Zustandssymbole werden nur indirekt via <a href="PostMessage.htm">SendMessage</a> unterstützt).</p>
  </dd>
  </dl>
<h4 class="func_section" id="TV_SetImageList_Return_Value">Rückgabewert</h4>
<p>Bei Erfolg gibt diese Funktion die ImageList-ID zurück, die zuvor mit der TreeView verknüpft war. Bei Misserfolg gibt sie 0 zurück. Eine nicht mehr verwendete ImageList sollte normalerweise mit <a href="ListView.htm#IL_Destroy">IL_Destroy()</a> zerstört werden.</p>

<h2 id="notify">G-Label-Benachrichtigungen (Primär)</h2>
<p>Es ist möglich, ein <a href="Gui.htm#label">g-Label</a> wie z.B. <code class="no-highlight"><strong>g</strong>MeineSubroutine</code> in den Optionen des Steuerelements anzugeben. Dadurch wird jedes Mal, wenn der Benutzer eine Aktion im Steuerelement ausführt, das Label <em>MeineSubroutine</em> gestartet. Diese Subroutine kann die internen Variablen <a href="../Variables.htm#Gui">A_Gui</a> und <a href="../Variables.htm#GuiControl">A_GuiControl</a> verwenden, um zu ermitteln, welches Fenster und welche TreeView für das Ereignis verantwortlich waren. Noch wichtiger ist, dass sie <strong>A_GuiEvent</strong> verwenden kann, die eine der folgenden Zeichenketten oder Buchstaben enthält (aus Kompatibilitätsgründen mit zukünftigen Versionen sollte ein Skript nicht davon ausgehen, dass das die einzig möglichen Werte sind):</p>
<p><strong>DoubleClick:</strong> Der Benutzer hat ein Element doppelt angeklickt. Die interne Variable A_EventInfo enthält die ID des Elements.</p>
<p><strong>D:</strong> Der Benutzer hat begonnen, ein Element via Maus zu ziehen (derzeit wird das Ziehen von Elementen intern nicht unterstützt). Die interne Variable A_EventInfo enthält die ID des Elements.</p>
<p><strong>d</strong> (kleines D): Dasselbe wie oben, außer dass beim Ziehen die rechte statt linke Maustaste verwendet wurde.</p>
<p><strong>e</strong> (kleines E): Der Benutzer hat aufgehört, ein Element zu editieren (der Benutzer kann Elemente nur editieren, wenn <a href="#ReadOnly">-ReadOnly</a> in den Optionen der TreeView vorhanden ist). Die interne Variable A_EventInfo enthält die ID des Elements.</p>
<p><strong>S:</strong> Ein neues Element wurde ausgewählt, entweder durch den Benutzer oder durch das Skript selbst. Die interne Variable A_EventInfo enthält die ID des neuen Elements.</p>

<h2 id="G-Label_Notifications_Secondary">G-Label-Benachrichtigungen (Sekundär)</h2>
<p>Wenn das Wort AltSubmit in den <a href="#Options">Optionen</a> der TreeView vorhanden ist, wird das g-Label häufiger gestartet und <strong>A_GuiEvent</strong> kann die folgenden zusätzlichen Werte enthalten:</p>
<p><strong>Normal:</strong> Der Benutzer hat ein Element mit der linken Maustaste angeklickt. Die interne Variable A_EventInfo enthält die ID des Elements.</p>
<p><strong>RightClick:</strong> Der Benutzer hat ein Element mit der rechten Maustaste angeklickt. Die interne Variable A_EventInfo enthält die ID des Elements. In den meisten Fällen ist es ratsam, kein Kontextmenü als Reaktion auf dieses Ereignis anzuzeigen. Verwenden Sie stattdessen das <a href="Gui.htm#GuiContextMenu">GuiContextMenu-Label</a>, da es auch die MENÜ-Taste erkennt. Zum Beispiel:</p>
<pre>GuiContextMenu:  <em>; Startet bei Rechtsklick oder Drücken der MENÜ-Taste.</em>
if (A_GuiControl != "MeineTreeView")  <em>; Diese Überprüfung ist optional. Das Menü wird nur für Klicks innerhalb der TreeView angezeigt.</em>
    return
<em>; Das Menü auf den Koordinaten A_GuiX und A_GuiY anzeigen. Diese Koordinaten
; sind auch dann korrekt, wenn der Benutzer die MENÜ-Taste drückt:</em>
Menu, MeinKontextmenü, Show, %A_GuiX%, %A_GuiY%
return</pre>
<p><strong>E:</strong> Der Benutzer hat begonnen, ein Element zu editieren (der Benutzer kann Elemente nur editieren, wenn <a href="#ReadOnly">-ReadOnly</a> in den Optionen der TreeView vorhanden ist). Die interne Variable A_EventInfo enthält die ID des Elements.</p>
<p><strong>F:</strong> Die TreeView hat den Tastaturfokus erhalten.</p>
<p><strong>f</strong> (kleines F): Die TreeView hat den Tastaturfokus verloren.</p>
<p id="NotifyK"><strong>K:</strong> Der Benutzer hat eine Taste gedrückt, während die TreeView den Fokus hatte. A_EventInfo enthält den virtuellen Tastencode der Taste (eine Zahl zwischen 1 und 255). Wenn die Taste alphabetisch ist, kann sie bei den meisten Tastaturbelegungen via <code><a href="Chr.htm">Chr</a>(A_EventInfo)</code> in das entsprechende Zeichen übersetzt werden. <kbd>F2</kbd> wird unabhängig von <a href="#WantF2">WantF2</a> erfasst. <kbd>Enter</kbd> hingegen wird nicht erfasst; um es zu erfassen, verwenden Sie eine Standardschaltfläche, wie <a href="#Enter">unten</a> beschrieben.</p>
<p><strong>+</strong> (Pluszeichen): Ein Element wurde aufgeklappt, um seine Kindelemente anzuzeigen. Die interne Variable A_EventInfo enthält die ID des Elements.</p>
<p><strong>-</strong> (Minuszeichen): Ein Element wurde zugeklappt, um seine Kindelemente zu verstecken. Die interne Variable A_EventInfo enthält die ID des Elements.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Der Befehl <a href="Gui.htm#Submit">Gui Submit</a> funktioniert nicht mit einem TreeView-Steuerelement. Demzufolge kann die <a href="Gui.htm#var">zugeordnete Variable</a> der TreeView (falls vorhanden) verwendet werden, um andere Daten zu speichern, ohne befürchten zu müssen, dass diese jemals überschrieben werden.</p>
<p id="Enter">Um einen <kbd>Enter</kbd>-Tastendruck in einer fokussierten TreeView zu erfassen, verwenden Sie eine <a href="GuiControls.htm#DefaultButton">Standardschaltfläche</a> (die bei Bedarf versteckt werden kann). Zum Beispiel:</p>
<pre>Gui, Add, Button, Hidden Default, OK
...
ButtonOK:
GuiControlGet, FokussiertesStrlmnt, FocusV
if (FokussiertesStrlmnt != "MeineTreeView")
    return
MsgBox % "Sie haben ENTER gedrückt. Die ID des ausgewählten Elements ist " . TV_GetSelection()
return</pre>
<p>Zusätzlich zur elementweisen Navigation mit der Tastatur kann der Benutzer auch eine inkrementelle Suche durchführen, indem er die ersten paar Zeichen eines Elementnamens eingibt. Dadurch springt die Auswahl auf das nächst passende Element.</p>
<p>Obwohl ein beliebig langer Text in einem TreeView-Element gespeichert werden kann, werden nur die ersten 260 Zeichen angezeigt.</p>
<p>Auch wenn die TreeView theoretisch maximal 65536 Elemente enthalten kann, wird die Performanz beim Hinzufügen von Elementen schon lange vorher merklich abnehmen. Um diesen Performanzverlust etwas abzumildern, verwenden Sie den in <a href="#TV_Add">TV_Add()</a> beschriebenen Tipp bzgl. Redraw.</p>
<p id="ILremarks">Im Gegensatz zu den ImageLists einer <a href="ListView.htm">ListView</a> werden ImageLists einer TreeView nicht automatisch zerstört, wenn die TreeView zerstört wird. Daher sollte <a href="ListView.htm#IL_Destroy">IL_Destroy()</a> nach dem Zerstören eines TreeView-Fensters aufgerufen werden, wenn die ImageList nicht länger benötigt wird. Dies ist jedoch nicht erforderlich, wenn das Skript in Kürze beendet wird, da in diesem Fall alle ImageLists automatisch zerstört werden.</p>
<p>Ein Skript kann mehr als eine TreeView pro Fenster erstellen. Um mit einer anderen TreeView zu arbeiten, siehe <a href="#BuiltIn">interne Funktionen</a>.</p>
<p>Mit <a href="GuiControl.htm">GuiControl</a> kann eine TreeView z.B. größer/kleiner gemacht, versteckt oder mit einer anderen Schrift versehen werden.</p>
<p>Tree View eXtension (TVX) erweitert TreeViews um die Möglichkeit, Elemente zu verschieben, einzufügen und zu löschen. Siehe <a href="https://www.autohotkey.com/board/topic/17497-">www.autohotkey.com/board/topic/17497-</a>.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="ListView.htm">ListView</a>, <a href="GuiControls.htm">Andere Steuerelemente</a>, <a href="Gui.htm">Gui</a>, <a href="Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a>, <a href="../misc/Styles.htm#TreeView">TreeView-Styles</a></p>

<h2 id="Examples">Beispiele</h2>

<div class="ex" id="ExAdvanced">
<p><a class="ex_number" href="#ExAdvanced"></a> Das folgende Beispiel ist ein lauffähiges Skript, das umfangreicher ist als das obige Beispiel. Es erstellt und zeigt eine TreeView, die sämtliche Ordner des Alle-Benutzer-Startmenüs enthält. Wenn der Benutzer einen Ordner auswählt, wird dessen Inhalt in einer ListView auf der rechten Seite angezeigt (wie beim Windows Explorer). Zusätzlich zeigt ein <a href="GuiControls.htm#StatusBar">StatusBar</a>-Steuerelement Informationen über den aktuell ausgewählten Ordner an.</p>
<pre><em>; Der folgende Ordner definiert den Stammordner der TreeView. Beachten Sie, dass
; das Laden lange dauern kann, wenn ein ganzes Laufwerk wie C:\ angegeben ist:</em>
TreeRoot := A_StartMenuCommon
TreeViewBreite := 280
ListViewBreite := A_ScreenWidth - TreeViewBreite - 30

<em>; Dem Benutzer erlauben, das Fenster zu maximieren oder dessen Größe zu ändern:</em>
Gui +Resize

<em>; Eine ImageList erstellen und mit einigen Standardsymbolen des Systems füllen:</em>
ImageListID := <a href="ListView.htm#IL_Create">IL_Create</a>(5)
Loop 5 
    <a href="ListView.htm#IL_Add">IL_Add</a>(ImageListID, "shell32.dll", A_Index)
<em>; Eine <a href="#GuiAdd">TreeView</a> und ListView nebeneinandersetzen, ähnlich dem Windows Explorer:</em>
Gui, Add, TreeView, vMeineTreeView r20 w%TreeViewBreite% gMeineTreeView <a href="#ImageList">ImageList</a>%ImageListID%
Gui, Add, ListView, vMeineListView r20 w%ListViewBreite% x+10, Name|Änderungsdatum

<em>; Spaltenbreiten der ListView setzen (dies ist optional):</em>
Spalte2Breite := 70  <em>; Kürzen, um nur den YYYYMMDD-Teil anzuzeigen.</em>
LV_ModifyCol(1, ListViewBreite - Spalte2Breite - 30)  <em>; Platz für den vertikalen Scrollbalken schaffen.</em>
LV_ModifyCol(2, Spalte2Breite)

<em>; <a href="GuiControls.htm#StatusBar">Statusleiste</a> erstellen, um Anzahl der Dateien und Gesamtgröße anzuzeigen:</em>
Gui, Add, StatusBar
<a href="GuiControls.htm#SB_SetParts">SB_SetParts</a>(60, 85)  <em>; Leiste in drei Segmente aufteilen (das dritte Segment füllt die restliche Breite aus).</em>

<em>; Ordner und ihre Unterordner zur TreeView hinzufügen. Status anzeigen, falls das Laden länger dauert:</em>
SplashTextOn, 200, 25, TreeView-StatusBar-Beispiel, Lade Baumstruktur...
UnterordnerInBaumEinfügen(TreeRoot)
SplashTextOff

<em>; Das Fenster anzeigen und in den Leerlauf gehen. Das Skript wird benachrichtigt, wenn der Benutzer eine gültige Aktion ausführt:</em>
Gui, Show,, %TreeRoot%  <em>; Root-Ordner in der Titelleiste anzeigen.</em>
return

UnterordnerInBaumEinfügen(Ordner, ElternElementID = 0)
{
    <em>; Diese Funktion fügt alle Unterordner eines Ordners zur TreeView hinzu.</em>
    <em>; Sie ruft sich selbst rekursiv auf, um Unterordner in beliebiger Tiefe zu erfassen.</em>
    Loop %Ordner%\*.*, 2  <em>; Alle Unterordner des Ordners abrufen.</em>
        UnterordnerInBaumEinfügen(A_LoopFileFullPath, <a href="#TV_Add">TV_Add</a>(A_LoopFileName, ElternElementID, "Icon4"))
}

MeineTreeView:  <em>; Diese Subroutine verarbeitet Benutzeraktionen (z.B. Klicken).</em>
if (A_GuiEvent != "S")  <em>; Ein anderes Ereignis als "Neues Baumelement auswählen".</em>
    return  <em>; Nichts tun.
; Andernfalls die ListView mit dem Inhalt des ausgewählten Ordners füllen.
; Zuerst den vollständigen Pfad des ausgewählten Ordners ermitteln:</em>
<a href="#TV_GetText">TV_GetText</a>(AusgewähltesElementText, A_EventInfo)
ElternID := A_EventInfo
Loop  <em>; Kompletten Pfad des ausgewählten Ordners zusammensetzen.</em>
{
    ElternID := <a href="#TV_GetParent">TV_GetParent</a>(ElternID)
    if not ElternID  <em>; Keine weiteren Elternelemente.</em>
        break
    TV_GetText(ElternText, ElternID)
    AusgewähltesElementText := ElternText "\" AusgewähltesElementText
}
AusgewähltesElementPfad := TreeRoot "\" AusgewähltesElementText

<em>; Dateien in die ListView einfügen:</em>
LV_Delete()  <em>; Alle Zeilen löschen.</em>
GuiControl, -Redraw, MeineListView  <em>; Performanz verbessern durch Abschalten von Redraw beim Laden.</em>
DateienAnzahl := 0  <em>; Für die untere Schleife initialisieren.</em>
GesamtGröße := 0
Loop %AusgewähltesElementPfad%\*.*  <em>; Nur die Dateien in der ListView anzeigen.</em>
{
    LV_Add("", A_LoopFileName, A_LoopFileTimeModified)
    DateienAnzahl += 1
    GesamtGröße += A_LoopFileSize
}
GuiControl, +Redraw, MeineListView

<em>; Die drei Segmente der Statusleiste mit Infos über den aktuell ausgewählten Ordner aktualisieren:</em>
<a href="GuiControls.htm#SB_SetText">SB_SetText</a>(DateienAnzahl . " Dateien", 1)
SB_SetText(Round(GesamtGröße / 1024, 1) . " KB", 2)
SB_SetText(AusgewähltesElementPfad, 3)
return

GuiSize:  <em>; ListView und TreeView kleiner/größer machen, wenn Benutzer die Fenstergröße ändert.</em>
if (A_EventInfo = 1)  <em>; Das Fenster wurde minimiert. Keine Aktion notwendig.</em>
    return
<em>; Andernfalls wurde das Fenster kleiner/größer gemacht oder maximiert. Größe der Steuerelemente anpassen.</em>
GuiControl, Move, MeineTreeView, % "H" . (A_GuiHeight - 30)  <em>; -30 für StatusBar und Abstände.</em>
GuiControl, Move, MeineListView, % "H" . (A_GuiHeight - 30) . " W" . (A_GuiWidth - TreeViewBreite - 30)
return

GuiClose:  <em>; Skript beenden, wenn der Benutzer die GUI der TreeView schließt.</em>
ExitApp</pre>
</div>

</body>
</html>
