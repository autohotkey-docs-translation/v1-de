<!DOCTYPE HTML>
<html lang="de">
<head>
<title>#ErrorStdOut - Syntax &amp; Verwendung | AutoHotkey v1</title>
<meta name="description" content="Die #ErrorStdOut-Direktive sendet alle Syntaxfehler, die den Start eines Skripts verhindern, zur Standardfehlerausgabe (stderr), anstatt ein Dialogfenster anzuzeigen." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>#ErrorStdOut</h1>

<p>Sendet alle Syntaxfehler, die den Start eines Skripts verhindern, zur Standardfehlerausgabe (stderr), anstatt ein Dialogfenster anzuzeigen.</p>

<pre class="Syntax"><span class="func">#ErrorStdOut</span> <span class="optional">Kodierung</span></pre>

<h2 id="Parameters">Parameter</h2>
<dl>
  <dt>Kodierung <span class="ver">[v1.1.33+]</span></dt>
  <dd>Wenn weggelassen, wird standardmäßig CP0 (die Standard-ANSI-Codepage des Systems) verwendet. Andernfalls geben Sie eine <a href="FileEncoding.htm">Kodierungszeichenkette</a> an, die festlegt, wie die Ausgabe kodiert werden soll. Zum Beispiel bewirkt <code>#ErrorStdOut UTF-8</code>, dass Fehlermeldungen als UTF-8 kodiert werden, bevor sie zur Standardfehlerausgabe (stderr) gesendet werden. Das Programm, das die Ausgabe erfasst, muss UTF-8 unterstützen, und in einigen Fällen muss es erst konfiguriert werden, damit es diese überhaupt erfassen kann.</dd>
</dl>

<h2 id="Remarks">Bemerkungen</h2>
<p>Wenn diese Direktive im Skript nicht angegeben ist, wird jeder Syntaxfehler in einem Dialogfenster angezeigt.</p>
<p><span class="ver">[AHK_L 42+]</span>: Fehler werden in stderr statt in stdout geschrieben. Die Windows-Eingabeaufforderung und umfangreiche Texteditoren können in der Regel beide Ausgabetypen anzeigen. Diese Änderung wurde erst mit <span class="ver">[v1.1.19.01]</span> dokumentiert.</p>
<p>Dies befähigt umfangreiche Texteditoren wie TextPad, SciTE, Crimson und EditPlus, zur fraglichen Zeile zu springen, sobald ein Syntaxfehler auftritt. Anstatt diese Direktive jedes Mal in ein Skript einzufügen, ist es üblicherweise besser, den Texteditor so einzustellen, dass er ein AutoHotkey-Skript mit der <a href="../Scripts.htm#cmd">Befehlszeilenoption</a> <strong>/ErrorStdOut</strong> startet (weiter unten finden Sie Anweisungen, wie Sie den Texteditor einstellen können).</p>
<p>Da AutoHotkey kein Konsolenprogramm ist, werden Fehler nicht direkt in der Windows-Eingabeaufforderung angezeigt. Dies kann umgangen werden, indem 1) <span class="ver">[v1.1.33+]</span> das Skript mit der <a href="../misc/Ahk2ExeDirectives.htm#ConsoleApp">Ahk2Exe-ConsoleApp-Direktive</a> kompiliert wird, oder 2) die Ausgabe des Skripts über Piping oder Weiterleitung abgefangen wird. Zum Beispiel:</p>
<pre class="no-highlight">"C:\Program Files\AutoHotkey\AutoHotkey.exe" /ErrorStdOut "Mein Skript.ahk" <strong>2&gt;&amp;1 |more</strong>
"C:\Program Files\AutoHotkey\AutoHotkey.exe" /ErrorStdOut "Mein Skript.ahk" <strong>2&gt;"Syntax-Fehler Log.txt"</strong></pre>
<p>Sie können die Ausgabe auch direkt via Piping in die Zwischenablage kopieren, indem Sie den systeminternen Clip-Befehl verwenden (für Windows XP und niedriger können Sie stattdessen <a href="https://www.autohotkey.com/misc/cb.zip">cb.exe</a> verwenden). Zum Beispiel:</p>
<pre class="no-highlight">"C:\Program Files\AutoHotkey\AutoHotkey.exe" /ErrorStdOut "Mein Skript.ahk" <strong>2&gt;&amp;1 |clip</strong></pre>
<p class="note"><strong>Hinweis:</strong> <code class="no-highlight">2&gt;&amp;1</code> bewirkt, dass stderr an stdout weitergeleitet wird, während <code class="no-highlight">2&gt;<i>DateiName</i></code> stderr nur an eine Datei weiterleitet.</p>
<p>#ErrorStdOut kann wie alle anderen Direktiven nicht bedingt ausgeführt werden.</p>

<h2 id="Instructions_for_specific_editors">Anweisungen für bestimmte Texteditoren</h2>
<p><strong>EditPlus:</strong></p>
<ol>
  <li>Wählen Sie in der Menüleiste Tools &gt; Configure User Tools aus.</li>
  <li>Drücken Sie die Schaltfläche: Add Tool &gt; Program</li>
  <li>Menu Text: Beliebig</li>
  <li>Command: <code class="no-highlight">C:\Program Files\AutoHotkey\AutoHotkey.exe</code></li>
  <li>Argument: <code class="no-highlight">/ErrorStdOut "$(FilePath)"</code></li>
  <li>Initial directory: <code class="no-highlight">$(FileDir)</code></li>
  <li>Capture output: Ja</li>
</ol>
<p><strong>TextPad:</strong></p>
<ol>
  <li>Wählen Sie in der Menüleiste Configure &gt; Preferences aus.</li>
  <li>Klappen Sie den Eintrag "Tools" auf.</li>
  <li>Drücken Sie die Schaltfläche "Add" und wählen Sie "Program" aus.</li>
  <li>Kopieren und fügen Sie folgendes ein (passen Sie gegebenenfalls den Pfad an): <code class="no-highlight">C:\Windows\System32\cmd.exe</code> -- drücken Sie anschließend OK.</li>
  <li>Klicken Sie dreimal auf das neue Element (cmd.exe) in der ListBox und benennen Sie es nach Belieben um (z.B. Skript starten).</li>
  <li>Drücken Sie "Apply".</li>
  <li>Wählen Sie das neue Element in der Baumstruktur links aus und tragen Sie folgende Informationen ein:</li>
  <li>Command (sollte bereits ausgefüllt sein): <code class="no-highlight">cmd.exe</code> (oder der vollständige Pfad)</li>
  <li>Parameters (an eigenen Pfad anpassen, falls notwendig): <code class="no-highlight">/c ""C:\Program Files\AutoHotkey\AutoHotkey.exe" /ErrorStdOut "$File""</code></li>
  <li>Initial folder: <code class="no-highlight">$FileDir</code></li>
  <li>Setzen Sie folgende Häkchen: 1) Run minimized; 2) Capture output.</li>
  <li>Drücken Sie OK. Das neue Element sollte nun im Menü "Tools" vorhanden sein.</li>
</ol>

<h2 id="Related">Siehe auch</h2>
<p><a href="FileAppend.htm">FileAppend</a> (weil es auch Text zur stderr oder stdout senden kann)</p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Sendet alle Syntaxfehler, die den Start des Skripts verhindern, zur stderr, anstatt ein Dialogfenster anzuzeigen.</p>
<pre>#ErrorStdOut</pre>
</div>

</body>
</html>
