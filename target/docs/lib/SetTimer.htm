<!DOCTYPE HTML>
<html lang="de">
<head>
<title>SetTimer - Syntax &amp; Verwendung | AutoHotkey v1</title>
<meta name="description" content="Der SetTimer-Befehl registriert eine Subroutine, die automatisch und wiederholt in einem bestimmten Zeitintervall gestartet wird." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>SetTimer</h1>

<p>Registriert eine Subroutine, die automatisch und wiederholt in einem bestimmten Zeitintervall gestartet wird.</p>

<pre class="Syntax"><span class="func">SetTimer</span> <span class="optional">, Label, PeriodeOnOffDelete, Priorität</span></pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt id="Label">Label</dt>
  <dd><p>Name eines <a href="../misc/Labels.htm">Labels</a>, <a href="../Hotkeys.htm">Hotkey-Labels</a> oder <a href="../Hotstrings.htm">Hotstring-Labels</a>, zu dem gesprungen werden soll, um alle Befehle unterhalb von <em>Label</em> bis zu einem <a href="Return.htm">Return</a> oder <a href="Exit.htm">Exit</a> auszuführen. <em>Label</em> kann, wie die meisten Parameter von anderen Befehlen auch, eine <a href="../Variables.htm">Variablenreferenz</a> wie %MeinLabel% sein, um den Inhalt der Variable als Ziel zu verwenden.</p>
  <p id="OmitLabel"><span class="ver">[v1.1.01+]</span>: Wenn <em>Label</em> weggelassen wird, wird standardmäßig <a href="../Variables.htm#ThisLabel">A_ThisLabel</a> verwendet. Zum Beispiel kann <code>SetTimer,, Off</code> innerhalb einer Timer-Subroutine verwendet werden, um den Timer zu deaktivieren, während <code>SetTimer,, 1000</code> entweder die <em>Periode</em> des aktuellen Timers ändert oder einen neuen Timer mit dem Label der aktuell laufenden Subroutine erstellt. <span class="ver">[v1.1.24+]</span>: Wenn A_ThisLabel leer ist, aber der aktuelle Thread von einem Timer gestartet wurde, wird dieser Timer verwendet. Dies ist besonders nützlich für Timer, die Funktionen oder Funktionsobjekte starten müssen.</p>
  <p id="Functor"><span class="ver">[v1.1.20+]</span>: Dieser Parameter kann auch der Name einer Funktion ohne Pflichtparameter sein, wenn kein Label mit diesem Namen existiert, wie in <a href="#ExFunction">Beispiel #4</a>, oder eine einzelne Variablenreferenz mit einem <a href="../misc/Functor.htm">Funktionsobjekt</a>, wie in <a href="#ExampleClass">Beispiel #5</a>. Andere Ausdrücke, die Objekte zurückgeben, werden zurzeit nicht unterstützt.</p>
  <p class="note"><strong>Hinweis:</strong> In <span class="ver">[v1.1.24+]</span> wird die Übergabe einer leeren Variable oder eines Ausdrucks, der einen leeren Wert zurückgibt, als Fehler gewertet. Dieser Parameter muss entweder einen nicht-leeren Wert enthalten oder ganz weggelassen werden.</p>
  </dd>

  <dt>PeriodeOnOffDelete</dt>
  <dd>
    <p>Wenn leer oder weggelassen und der Timer nicht existiert, wird er mit einer Periode von 250 erstellt. Wenn leer oder weggelassen und der Timer bereits existiert, wird er aktiviert und auf seine frühere Periode <a href="#reset">zurückgesetzt</a>, sofern keine <em>Priorität</em> angegeben ist. Andernfalls geben Sie Folgendes an:</p>
    <p id="Period"><strong>Periode:</strong> Erstellt oder aktualisiert einen Timer unter Verwendung des Absolutwertes dieses Parameters als <a href="#Precision">ungefähre</a> Zeit in Millisekunden, die ablaufen muss, bevor der Timer ausgeführt wird. Der Timer wird automatisch aktiviert und <a href="#reset">zurückgesetzt</a>. Wenn <em>Periode</em> positiv ist, wiederholt sich der Timer automatisch, bis er im Skript explizit deaktiviert wird. <span class="ver">[v1.0.46.16+]</span>: Wenn <em>Periode</em> negativ ist, wird der Timer nur einmal ausgeführt. Zum Beispiel wird durch Angabe von -100 der Timer nach 100&nbsp;ms einmal ausgeführt und dann deaktiviert, als wäre <code>SetTimer, Label, Off</code> verwendet worden. <span class="ver">[v1.1.24+]</span>: Wenn <em>Label</em> ein via Skript erstelltes Objekt ist (also keine Funktion oder Label), wird der Timer automatisch gelöscht, nachdem die Timerfunktion ihren Wert zurückgegeben hat, es sei denn, der Timer wurde reaktiviert. Dadurch kann das Objekt freigegeben werden, wenn es vom Skript nicht mehr benötigt wird, was aber auch bedeutet, dass die <em>Periode</em> und <em>Priorität</em> des Timers verworfen werden.</p>
    <p><em>Periode</em> muss ein Integer sein, es sei denn, es wird eine Variable oder ein Ausdruck verwendet, dann werden alle Dezimalstellen ignoriert. Der Absolutwert darf nicht größer als 4294967295&nbsp;ms (49,7 Tage) sein.</p>
    <p><strong>On:</strong> Reaktiviert einen zuvor deaktivierten Timer mit seiner früheren Periode. Wenn der Timer nicht existiert, wird er erstellt (mit einer Standardperiode von 250). Der Timer wird auch <a href="#reset">zurückgesetzt</a>. Wenn der Timer existiert, aber zuvor auf den Nur-Einmal-Ausführen-Modus (siehe oben) gesetzt wurde, wird er auch dieses Mal nur einmal ausgeführt.</p>
    <p><strong>Off:</strong> Deaktiviert einen existierenden Timer.</p>
    <p><strong>Delete</strong> <span class="ver">[v1.1.20+]</span>: Deaktiviert und löscht einen existierenden Timer. Wenn der Timer mit einem <a href="../misc/Functor.htm">Funktionsobjekt</a> verbunden ist, wird das Objekt freigegeben. Die Deaktivierung allein führt nicht zur Freigabe des Objekts.</p>
  </dd>

  <dt>Priorität</dt>
  <dd><p>Wenn leer oder weggelassen, wird standardmäßig 0 verwendet. Andernfalls geben Sie einen Integer zwischen -2147483648 und 2147483647 (oder einen <a href="../Variables.htm#Expressions">Ausdruck</a>) an, um die Thread-Priorität des Timers zu bestimmen. Einzelheiten finden Sie unter <a href="../misc/Threads.htm">Threads</a>.</p>
      <p>Um die Priorität eines existierenden Timers zu ändern, ohne ihn anderweitig zu beeinflussen, lassen Sie den Parameter vor diesem leer.</p></dd>

</dl>

<h2 id="Remarks">Bemerkungen</h2>
<p>Timer sind nützlich, weil sie asynchron laufen, d.h. sie werden in einem bestimmten Intervall (Frequenz) ausgeführt, egal ob das Skript gerade auf ein Fenster wartet, ein Dialogfenster anzeigt oder mit einer anderen Aufgabe beschäftigt ist. Timer können u.a. verwendet werden, um eine Aktion während der Abwesenheit des Benutzers auszuführen (in Verbindung mit <a href="../Variables.htm#TimeIdle">A_TimeIdle</a>) oder um unerwünschte Fenster sofort wieder zu schließen, wenn sie erscheinen.</p>
<p>Timer erzeugen nur die Illusion, als könne das Skript mehr als eine Aufgabe gleichzeitig ausführen. In Wirklichkeit werden zeitgesteuerte Subroutinen wie andere Threads behandelt: Sie können andere Threads, wie z.B. <a href="../Hotkeys.htm">Hotkey-Subroutinen</a>, unterbrechen oder von ihnen unterbrochen werden. Einzelheiten finden Sie unter <a href="../misc/Threads.htm">Threads</a>.</p>
<p>Jedes Mal, wenn ein Timer erstellt, reaktiviert oder mit einer neuen Periode aktualisiert wird, wird seine Subroutine nicht sofort ausgeführt; seine Periode muss zuerst ablaufen. Wenn die erste Ausführung des Timers sofort erfolgen soll, führen Sie seine Subroutine mit <a href="Gosub.htm">Gosub</a> aus (dabei wird allerdings kein neuer Thread gestartet, wie es der Timer selbst tut, d.h. Einstellungen wie <a href="SendMode.htm">SendMode</a> verwenden zunächst nicht ihre Standardwerte).</p>
<p id="reset"><strong>Zurücksetzen:</strong> Wenn SetTimer auf einen bereits existierenden Timer angewendet wird und der 2. Parameter eine Zahl oder das Wort ON ist (oder leer ist oder weggelassen wird), wird der Timer zurückgesetzt, d.h. seine Periode muss einmal komplett ablaufen, bevor seine Subroutine erneut starten kann.</p>
<p id="Precision"><strong>Genauigkeit des Timers:</strong> Durch die Granularität (Ungenauigkeit) der Zeiterfassung im Betriebssystem wird <em>Periode</em> möglicherweise auf das nächstmögliche Vielfache von 10 oder 15.6 Millisekunden aufgerundet (abhängig vom Typ der installierten Hardware und Treiber). In Windows 2000/XP ist eine Periode von 1 bis 10 äquivalent zu 10 oder 15.6. Eine kürzere Verzögerung kann mit Loop+Sleep erreicht werden, wie bei <a href="Sleep.htm#ShorterSleep">DllCall+timeBeginPeriod+Sleep</a> gezeigt.</p>
<p id="Reliability"><strong>Zuverlässigkeit:</strong> Es ist möglich, dass ein Timer nicht zum erwarteten Zeitpunkt ausgeführt wird, wenn die folgenden Bedingungen zutreffen:</p>
<ol>
  <li>Andere Anwendungen belasten die CPU ziemlich stark.</li>
  <li>Die Timer-Subroutine selbst läuft noch, nachdem die Timer-Periode abgelaufen ist, oder es gibt zu viele andere konkurrierende Timer (das Ändern von <a href="SetBatchLines.htm">SetBatchLines</a> kann helfen).</li>
  <li>Der Timer wurde von einem anderen <a href="../misc/Threads.htm">Thread</a> unterbrochen, z.B. von einer anderen zeitgesteuerten Subroutine, einer <a href="../Hotkeys.htm">Hotkey-Subroutine</a> oder einem <a href="Menu.htm">benutzerdefinierten Menüpunkt</a> (dies kann mit <a href="Critical.htm">Critical</a> verhindert werden). Wenn dies der Fall ist und der unterbrechende Thread lange Zeit zum Beenden braucht, wird der unterbrochene Timer für die Dauer der Unterbrechung deaktiviert. Alle anderen Timer laufen jedoch weiter, indem sie den <a href="../misc/Threads.htm">Thread</a> unterbrechen, der den ersten Timer unterbrochen hat.</li>
  <li>Das Skript ist durch <a href="Critical.htm">Critical</a> oder <a href="Thread.htm">Thread Interrupt/Priority</a> unterbrechungsfrei. Während dieser Zeit werden Timer nicht ausgeführt. Später, wenn das Skript wieder unterbrechbar ist, wird jeder überfällige Timer einmal so schnell wie möglich ausgeführt und dann wie geplant fortgesetzt.</li>
</ol>
<p>Obwohl Timer auch laufen, wenn das Skript <a href="Suspend.htm">suspendiert</a> ist, werden sie nicht ausgeführt, wenn <a href="Thread.htm#NoTimers">Thread NoTimers</a> für den <a href="../misc/Threads.htm">aktuellen Thread</a> wirksam ist oder wenn ein beliebiger Thread <a href="Pause.htm">pausiert</a> wird. Außerdem werden sie nicht ausgeführt, wenn der Benutzer durch eines der Menüs des Skripts navigiert (z.B. das <a href="../Program.htm#tray-icon">Tray-Symbol</a>-Menü oder eine Menüleiste).</p>
<p>Da Timer die laufende Skriptaktivität vorübergehend unterbrechen, sollten ihre Subroutinen kurz gehalten werden (so dass sie schnell zum Abschluss kommen), wenn eine lange Unterbrechung unerwünscht ist.</p>
<p id="otherremarks"><strong>Sonstige Bemerkungen:</strong> Timer, die die ganze Zeit laufen, werden üblicherweise im <a href="../Scripts.htm#auto">automatischen Ausführungsbereich</a> erstellt, während ein temporärer Timer sich oft durch seine eigene Subroutine selbst deaktiviert (siehe Beispiele weiter unten).</p>
<p>Jede via SetTimer gestartete Subroutine verwendet vorerst die Standardwerte von Einstellungen wie <a href="SendMode.htm">SendMode</a>. Diese Standardwerte können im <a href="../Scripts.htm#auto">automatischen Ausführungsbereich</a> geändert werden.</p>
<p>Wenn die <a href="../Hotkeys.htm">Hotkey</a>-Reaktionszeit von entscheidender Bedeutung ist (z.B. in Videospielen) und Timer im Skript enthalten sind, deren Subroutinen länger als 5&nbsp;ms zum Ausführen benötigen, verwenden Sie den folgenden Befehl, um eine mögliche Verzögerung von 15&nbsp;ms zu vermeiden. Eine solche Verzögerung würde sonst auftreten, wenn ein Hotkey genau dann gedrückt wird, wenn sich ein Timer-Thread in seiner unterbrechungsfreien Phase befindet:</p>
<pre><a href="Thread.htm">Thread</a>, Interrupt, 0  <em>; Macht alle Threads jederzeit unterbrechbar.</em></pre>
<p>Wenn ein Timer deaktiviert wird, während seine Subroutine gerade läuft, wird diese Subroutine fertig ausgeführt.</p>
<p><a href="KeyHistory.htm">KeyHistory</a> zeigt an, wie viele Timer es gibt und wie viele gerade aktiv sind.</p>
<p>Um ein Skript dauerhaft laufen zu lassen – z.B. ein Skript, das nur Timer enthält – verwenden Sie <a href="_Persistent.htm">#Persistent</a>.</p>
<h2 id="Related">Siehe auch</h2>
<p><a href="Gosub.htm">Gosub</a>, <a href="Return.htm">Return</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="Thread.htm">Thread (Befehl)</a>, <a href="Critical.htm">Critical</a>, <a href="IsLabel.htm">IsLabel()</a>, <a href="Menu.htm">Menu</a>, <a href="_Persistent.htm">#Persistent</a></p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExampleClose">
<p><a class="ex_number" href="#ExampleClose"></a> Schließt unerwünschte Fenster, sobald sie erscheinen.</p>
<pre>#Persistent
SetTimer, MailWarnungenSchließen, 250
return

MailWarnungenSchließen:
WinClose, Microsoft Outlook, Während der Kommunikation mit dem Server wurde das Zeitlimit überschritten
WinClose, Microsoft Outlook, Es konnte keine Verbindung aufgebaut werden
return</pre>
</div>

<div class="ex" id="ExampleWait">
<p><a class="ex_number" href="#ExampleWait"></a> Wartet auf ein bestimmtes Fenster und alarmiert dann den Benutzer.</p>
<pre>#Persistent
SetTimer, Alarm1, 500
return

Alarm1:
if not WinExist("Videokonvertierung", "Prozess abgeschlossen")
    return
<em>; Andernfalls:</em>
SetTimer, Alarm1, Off  <em>; d.h. der Timer deaktiviert sich selbst.</em>
SplashTextOn, , , Die Videokonvertierung wurde abgeschlossen.
Sleep, 3000
SplashTextOff
return</pre>
</div>

<div class="ex" id="ExampleCount">
<p><a class="ex_number" href="#ExampleCount"></a> Erkennt, ob ein Hotkey einmal, zweimal oder dreimal gedrückt wurde. Dadurch kann ein Hotkey eine andere Aktion ausführen, je nachdem, wie oft er gedrückt wurde.</p>
<pre>#c::
if (winc_eingaben &gt; 0) <em>; SetTimer bereits gestartet, also stattdessen den Tastendruck protokollieren.</em>
{
    winc_eingaben += 1
    return
}
<em>; Andernfalls ist das der erste Tastendruck einer neuen Serie. Zählung wird
; auf 1 gesetzt und der Timer gestartet:</em>
winc_eingaben := 1
SetTimer, TasteWinC, -400 <em>; Auf weitere Eingaben innerhalb von 400 ms warten.</em>
return

TasteWinC:
if (winc_eingaben = 1) <em>; Die Taste wurde einmal gedrückt.</em>
{
    Run, m:\  <em>; Einen Ordner öffnen.</em>
}
else if (winc_eingaben = 2) <em>; Die Taste wurde zweimal gedrückt.</em>
{
    Run, m:\multimedia  <em>; Einen anderen Ordner öffnen.</em>
}
else if (winc_eingaben &gt; 2)
{
    MsgBox, Drei oder mehr Klicks erkannt.
}
<em>; Egal welche obige Aktion ausgelöst wurde, Zählung zurücksetzen,
; um die nächste Serie von Tastendrücken vorzubereiten:</em>
winc_eingaben := 0
return</pre>
</div>

<div class="ex" id="ExFunction">
<p><a class="ex_number" href="#ExFunction"></a> Ein einfacher Zähler. Verwendet eine <a href="../Functions.htm">Funktion</a> als Timer-Subroutine.</p>
<pre>#Persistent
SetTimer, Tick, 1000

Tick()
{
    static count := 0
    ToolTip % count++
}</pre>
</div>

<div class="ex" id="ExampleClass">
<p><a class="ex_number" href="#ExampleClass"></a> Ein komplexerer Zähler. Verwendet eine <a href="../Objects.htm#Custom_Classes_method">Methode</a> als Timer-Subroutine.</p>
<pre>counter := new SecondCounter
counter.Start()
Sleep 5000
counter.Stop()
Sleep 2000

<em>; Eine Beispielklasse zum Zählen von Sekunden...</em>
class SecondCounter {
    __New() {
        this.interval := 1000
        this.count := 0
        <em>; Tick() hat einen impliziten Parameter "this", der eine Referenz auf
        ; das Objekt ist, daher müssen wir eine Funktion erstellen, die
        ; "this" und die aufzurufende Methode voneinander trennt:</em>
        this.timer := ObjBindMethod(this, "Tick")
    }
    Start() {
        <em>; Bekannte Einschränkung: SetTimer benötigt eine reine Variablenreferenz.</em>
        timer := this.timer
        SetTimer % timer, % this.interval
        ToolTip % "Zähler gestartet"
    }
    Stop() {
        <em>; Um den Timer zu deaktivieren, dasselbe Objekt erneut übergeben:</em>
        timer := this.timer
        SetTimer % timer, Off
        ToolTip % "Zähler ist bei " this.count " gestoppt"
    }
    <em>; In diesem Beispiel ruft der Timer diese Methode auf:</em>
    Tick() {
        ToolTip % ++this.count
    }
}</pre>
<p>Tipps zum obigen Beispiel:</p>
<ul>
  <li>Wir können auch <code>this.timer := this.Tick.<a href="Func.htm#Bind">Bind</a>(this)</code> verwenden. Wenn <code>this.timer</code> aufgerufen wird, wird es eigentlich <code>this.Tick.<a href="Func.htm#Call">Call</a>(this)</code> indirekt aufrufen (außer dass <code>this.Tick</code> nicht neu evaluiert wird). <a href="ObjBindMethod.htm">ObjBindMethod()</a> hingegen erzeugt ein Objekt, das <code>this.Tick()</code> indirekt aufruft.</li>
  <li>Wenn wir <em>Tick</em> in <em>Call</em> umbenennen, können wir <code>this</code> direkt anstelle von <code>this.timer</code> verwenden. Damit entfällt auch die Notwendigkeit der temporären Variable. Allerdings ist ObjBindMethod() nützlich, wenn das Objekt mehrere Methoden hat, die von verschiedenen Ereignisquellen aufgerufen werden sollen, z.B. Hotkeys, Menüpunkte, GUI-Steuerelemente, usw.</li>
  <li>Wenn der Timer von einer Funktion/Methode aus geändert oder gelöscht wird, die vom Timer aufgerufen wurde, ist es möglicherweise einfacher, <a href="#OmitLabel">den <em>Label</em>-Parameter wegzulassen</a>. In einigen Fällen wird dadurch die Notwendigkeit vermieden, das ursprünglich an SetTimer übergebene Objekt beizubehalten, wodurch eine temporäre Variable entfällt (z.B. <code>timer</code> im obigen Beispiel).</li>
</ul>
</div>

</body>
</html>
