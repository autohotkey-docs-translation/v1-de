<!DOCTYPE HTML>
<html lang="de">
<head>
<title>FileAppend - Syntax &amp; Verwendung | AutoHotkey v1</title>
<meta name="description" content="Der FileAppend-Befehl schreibt Text an das Ende einer Datei (und erstellt sie vorher, wenn nötig)." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>FileAppend</h1>

<p>Schreibt Text an das Ende einer Datei (und erstellt sie vorher, wenn nötig).</p>

<pre class="Syntax"><span class="func">FileAppend</span> <span class="optional">, Text, DateiName, Kodierung</span></pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Text</dt>
  <dd>
    <p>Wenn leer oder weggelassen, wird <em>DateiName</em> als leere Datei erstellt (wenn die Datei bereits existiert, wird nur ihr Änderungsdatum aktualisiert). Andernfalls geben Sie den Text an, der an das Ende der Datei angefügt werden soll. Dieser Text kann Zeilenvorschubzeichen (`n) zum Starten neuer Zeilen enthalten. Außerdem kann via <a href="../Scripts.htm#continuation">Fortsetzungsbereich</a> eine lange Zeile in mehrere kurze Zeilen aufgeteilt werden.</p>
    <p>Handelt es sich bei <em>Text</em> um <a href="../misc/Clipboard.htm#ClipboardAll">%ClipboardAll%</a> oder um eine Variable, der zuvor der Wert von ClipboardAll zugewiesen wurde, wird <em>DateiName</em> bedingungslos mit dem kompletten Inhalt des Zwischenspeichers überschrieben (d.h. <a href="FileDelete.htm">FileDelete</a> ist nicht notwendig).</p>
  </dd>

  <dt>DateiName</dt>
  <dd>
    <p>Wenn dieser und der <em>Kodierung</em>-Parameter weggelassen werden, wird die Ausgabedatei der innersten umschlossenen <a href="LoopReadFile.htm">dateilesenden Schleife</a> verwendet (falls vorhanden). Andernfalls geben Sie den Namen der Datei an, an die der Text angefügt werden soll. Wenn kein absoluter Pfad angegeben ist, wird die Datei im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet. Das Zielverzeichnis muss bereits existieren.</p>
    <p><strong>Zeilenumbruchübersetzung:</strong> Um die Zeilenumbruchübersetzung zu deaktivieren, setzen Sie ein Sternchen vor den Dateinamen. Dies hat zur Folge, dass jeder Zeilenumbruch als einzelner Zeilenvorschub (`n) statt wie unter Windows üblich als Wagenrücklauf-Zeilenvorschub-Paar (`r`n) geschrieben wird. Zum Beispiel: <code class="no-highlight">*C:\Meine Unix-Datei.txt</code>.</p>
    <p>Wenn die Datei nicht bereits offen ist (weil sie sich in einer <a href="LoopReadFile.htm">dateilesenden Schleife</a> befindet), wird die Zeilenumbruchübersetzung automatisch deaktiviert, wenn <em>Text</em> Wagenrücklauf-Zeilenvorschub-Paare (`r`n) enthält. Mit anderen Worten, die im vorherigen Absatz beschriebene Sternchenoption wird automatisch aktiviert. Die Angabe des Sternchens, wenn <em>Text</em> `r`n enthält, erhöht jedoch die Performanz, da das Programm nicht nach `r`n in <em>Text</em> suchen muss.</p>
    <p id="stdout"><strong>Standardausgabe (stdout):</strong> Geben Sie ein Sternchen (*) für <em>DateiName</em> an, um <em>Text</em> zur Standardausgabe (stdout) zu senden. Diese Art von Text kann auf eine Datei umgeleitet, an eine EXE-Datei weitergeleitet oder von <a href="_ErrorStdOut.htm">umfangreichen Texteditoren</a> abgefangen werden. Zum Beispiel könnte man folgendes in der Eingabeaufforderung schreiben:</p>
      <pre class="no-highlight">"%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Mein Skript.ahk" &gt;"Fehlerprotokoll.txt"</pre>
    <p>Allerdings wird ein zur Standardausgabe gesendeter Text nicht in der Eingabeaufforderung angezeigt, von der aus die Zeile gestartet wurde. Dies kann umgangen werden, indem 1) <span class="ver">[v1.1.33+]</span> das Skript mit der <a href="../misc/Ahk2ExeDirectives.htm#ConsoleApp">Ahk2Exe-ConsoleApp-Direktive</a> kompiliert wird, oder 2) die Ausgabe des Skripts via Piping an einen anderen Befehl oder an ein anderes Programm weitergeleitet wird. Zum Beispiel:</p>
      <pre class="no-highlight">"%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Mein Skript.ahk" |more</pre>
      <pre class="no-highlight">For /F "tokens=*" %L in ('""%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Mein Skript.ahk""') do @Echo %L</pre>
    <p><span class="ver">[v1.1.20+]</span>: Geben Sie zwei Sternchen (**) für <em>DateiName</em> an, um <em>Text</em> zur Standardfehlerausgabe (stderr) zu senden.</p>
    </dd>

  <dt>Kodierung <span class="ver">[AHK_L 42+]</span></dt>
  <dd>
    <p>Wenn leer oder weggelassen, wird die Standardkodierung verwendet (definiert durch <a href="FileEncoding.htm">FileEncoding</a> oder standardmäßig CP0). Andernfalls geben Sie die Kodierung oder Codepage an, z.B. <code class="no-highlight">UTF-8</code>, <code class="no-highlight">UTF-16</code> oder <code class="no-highlight">CP936</code>.</p>
    <p>Wenn die Datei eine UTF-8- oder UTF-16-Byte-Order-Markierung (BOM) enthält, werden dieser Parameter und die Standardkodierung ignoriert.</p>
  </dd>

</dl>

<h2 id="Error_Handling">Fehlerbehandlung</h2>
<p><span class="ver">[v1.1.04+]</span>: Dieser Befehl ist in der Lage, bei Misserfolg eine Ausnahme auszulösen. Weitere Informationen finden Sie unter <a href="Catch.htm#RuntimeErrors">Laufzeitfehler</a>.</p>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> wird bei Misserfolg auf 1 und bei Erfolg auf 0 gesetzt.</p>
<p><a href="../Variables.htm#LastError">A_LastError</a> wird auf das Ergebnis der Systemfunktion GetLastError() gesetzt.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Um eine existierende Datei zu überschreiben, löschen Sie diese mit <a href="FileDelete.htm">FileDelete</a>, bevor Sie FileAppend verwenden.</p>
<p>Die Zieldatei wird automatisch geschlossen, nachdem der Text angefügt wurde (außer wenn FileAppend im Einzelparametermodus innerhalb einer <a href="LoopReadFile.htm">dateilesenden/-schreibenden Schleife</a> verwendet wird).</p>
<p><span class="ver">[AHK_L 42+]</span>: <a href="FileOpen.htm">FileOpen()</a> im Anfügemodus bietet mehr Kontrolle als FileAppend und lässt die Datei geöffnet, anstatt sie jedes Mal neu zu öffnen und zu schließen. Sobald eine Datei im Anfügemodus geöffnet ist, kann mit <code>File.<a href="File.htm#Write">Write</a>(Zeichenkette)</code> die Zeichenkette angefügt werden. File-Objekte unterstützen auch binäre Ein-/Ausgabe via <a href="File.htm#RawWrite">RawWrite</a>/<a href="File.htm#RawRead">RawRead</a> oder <a href="File.htm#WriteNum">Write<i>Num</i></a>/<a href="File.htm#ReadNum">Read<i>Num</i></a>, während FileAppend nur Text unterstützt.</p>
<h2 id="Related">Siehe auch</h2>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="FileOpen.htm">FileOpen()</a> / <a href="File.htm">File-Objekt</a>, <a href="FileRead.htm">FileRead</a>, <a href="LoopReadFile.htm">dateilesende Schleife</a>, <a href="FileReadLine.htm">FileReadLine</a>, <a href="IniWrite.htm">IniWrite</a>, <a href="FileDelete.htm">FileDelete</a>, <a href="OutputDebug.htm">OutputDebug</a>, <a href="../Scripts.htm#continuation">Fortsetzungsbereiche</a></p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Erstellt eine Datei, falls erforderlich, und fügt eine Zeile an.</p>
<pre>FileAppend, Eine weitere Zeile.`n, C:\Meine Dokumente\Test.txt</pre>
</div>

<div class="ex" id="ExContSect">
<p><a class="ex_number" href="#ExContSect"></a> Verwenden Sie einen <a href="../Scripts.htm#continuation">Fortsetzungsbereich</a>, um die Übersichtlichkeit und Wartbarkeit des Skripts zu verbessern.</p>
<pre>FileAppend,
(
Eine Textzeile.
Standardmäßig wird der Zeilenumbruch (Enter) zwischen der vorherigen und dieser Zeile in die Datei geschrieben.
    Diese Zeile ist mit einem Tabulatorzeichen eingerückt; standardmäßig wird es auch in die Datei geschrieben.
Variablenreferenzen wie %Var% werden standardmäßig aufgelöst.
), C:\Meine Datei.txt</pre>
</div>

<div class="ex" id="FTP">
<p><a class="ex_number" href="#FTP"></a> Zeigt, wie das FTP-Hochladen mit dem systeminternen FTP-Befehl automatisiert werden kann. Dieses Skript wurde in Windows XP getestet.</p>
<pre>FTPBefehlDatei := A_ScriptDir "\FTPBefehle.txt"
FTPLogDatei := A_ScriptDir "\FTPLog.txt"
FileDelete %FTPBefehlDatei%  <em>; Im Falle einer vorzeitig terminierten Ausführung.</em>

FileAppend,  <em>; Das Komma ist in diesem Fall erforderlich.</em>
(
open host.domain.com
username
password
binary
cd htdocs
put %VarMitZieldateiname%
delete EineAndereDatei.htm
rename AlteDateiName.htm NeueDateiName.htm
ls -l
quit
), %FTPBefehlDatei%

RunWait %ComSpec% /c ftp.exe -s:"%FTPBefehlDatei%" &gt;"%FTPLogDatei%"
FileDelete %FTPBefehlDatei%  <em>; Aus Sicherheitsgründen löschen.</em>
Run %FTPLogDatei%  <em>; Protokoll zur Überprüfung anzeigen.</em></pre>
</div>

</body>
</html>
