<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Verwendung des Programms | AutoHotkey v1</title>
<meta name="description" content="Erfahren Sie mehr über das Erstellen, Bearbeiten und Ausführen eines Skripts, das Tray-Symbol, das versteckte Hauptfenster des Skripts, Befehlszeilennutzung, Portabilität und die Installer-Optionen." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>
<body>
<h1>Verwendung des Programms</h1>
<p>AutoHotkey macht nichts von selbst; es braucht ein Skript, das ihm sagt, was es tun soll. Ein Skript ist lediglich eine reine Textdatei mit der Dateiendung <code class="no-highlight">.ahk</code>, die Anweisungen für das Programm enthält - so ähnlich wie eine Konfigurationsdatei, nur viel mächtiger. Das Mindeste, was ein Skript tun kann, ist eine einzelne Aktion auszuführen und sich dann zu beenden. Die meisten Skripte definieren jedoch eine Reihe von <a href="Hotkeys.htm">Hotkeys</a>, von denen jeder eine oder mehrere Aktionen ausführt, sobald er gedrückt wird.</p>
<pre>#z::Run https://www.autohotkey.com  <em>; WIN+Z</em>

^!n::  <em>; STRG+ALT+N</em>
if WinExist("Unbenannt - Editor")
    WinActivate
else
    Run Notepad
return</pre>
<p><strong>Tipp:</strong> Wenn Ihr Browser dies unterstützt, können Sie jeden Codeblock (wie den obigen) als Skriptdatei herunterladen, indem Sie den Mauszeiger über den Codeblock bewegen und oben rechts auf die Schaltfläche <span style="font-family: icons;">↓</span> klicken.</p>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#create">Ein Skript erstellen</a></li>
  <li><a href="#edit">Ein Skript bearbeiten (editieren)</a></li>
  <li><a href="#run">Ein Skript ausführen</a></li>
  <li><a href="#tray-icon">Tray-Symbol</a></li>
  <li><a href="#main-window">Hauptfenster</a></li>
  <li><a href="#embedded-scripts">Eingebettete Skripte</a></li>
  <li><a href="#cmd">Befehlszeilennutzung</a></li>
  <li><a href="#portability">Portabilität von AutoHotkey.exe</a></li>
  <li><a href="#install">Installer-Optionen</a>
  <ul>
    <li><a href="#Installer_uiAccess">Mit UI-Access starten</a></li>
  </ul></li>
</ul>

<h2 id="create">Ein Skript erstellen</h2>
<p>Es gibt mehrere Möglichkeiten, eine Skriptdatei zu erstellen:</p>
<ul>
  <li>Speichern Sie mit Notepad (oder einem anderen <a href="lib/Edit.htm#Editors">Texteditor</a>) eine Datei mit der Endung <code class="no-highlight">.ahk</code>. Auf manchen Systemen müssen Sie den Namen in Anführungszeichen setzen, um sicherzustellen, dass der Editor keine weitere Dateiendung (wie z.B. .txt) hinzufügt.
  <p class="note">Achten Sie darauf, die Datei unter UTF-8 mit BOM zu speichern, wenn ASCII-fremde Zeichen enthalten sind. Weitere Informationen finden Sie in der <a href="FAQ.htm#nonascii">FAQ</a>.</p></li>
  <li>Rechtsklicken Sie im Explorer in den leeren Bereich des Ordners, wo Sie das Skript erstellen möchten, und wählen Sie <strong>Neu</strong> und <strong>AutoHotkey Script</strong> aus. Sie können dann einen Namen für das Skript eingeben (achten Sie darauf, die Dateiendung <code class="no-highlight">.ahk</code> nicht zu löschen, falls sie sichtbar ist).</li>
</ul>
<p class="note">Weitere Informationen zum Schreiben eines Skripts finden Sie unter <a href="Language.htm">Skriptsprache</a>.</p>

<h2 id="edit">Ein Skript bearbeiten (editieren)</h2>
<p>Klicken Sie mit der rechten Maustaste auf die Skriptdatei und wählen Sie <strong>Edit Script</strong> aus, um ein Skript zum Editieren zu öffnen. Wenn das Skript bereits ausgeführt wird, können Sie den <a href="lib/Edit.htm">Edit</a>-Befehl verwenden oder auf das <a href="#tray-icon">Tray-Symbol</a> des Skripts rechtsklicken und <strong>Edit This Script</strong> auswählen. Standardmäßig öffnet dies Notepad, allerdings können Sie das durch Ändern eines Registry-Eintrags ändern, wie <a href="lib/Edit.htm#Example">hier</a> gezeigt. Natürlich können Sie jederzeit Ihren Texteditor starten und dann das Skript wie jede andere Textdatei öffnen.</p>
<p>Wenn Sie ein Skript editiert haben, müssen Sie es ausführen oder <a href="lib/Reload.htm">neu laden</a>, damit die Änderungen wirksam werden. Ein laufendes Skript kann in der Regel über das <a href="#tray-icon">Tray-Menü</a> neu geladen werden.</p>

<h2 id="run">Ein Skript ausführen</h2>
<p>Sofern AutoHotkey installiert ist, gibt es mehrere Möglichkeiten, ein Skript auszuführen:</p>
<ul>
<li>Doppelklicken Sie im Explorer auf eine Skriptdatei (oder ihre Verknüpfung).</li>
<li>Rufen Sie AutoHotkey.exe in der Befehlszeile auf und übergeben Sie den Dateinamen des Skripts als <a href="Scripts.htm#cmd">Befehlszeilenparameter</a>.</li>
<li>Nachdem Sie <a href="Scripts.htm#defaultfile">das Standardskript</a> erstellt haben, starten Sie AutoHotkey über die Verknüpfung im Startmenü, um das Skript auszuführen.</li>
<li>Wenn AutoHotkey an die Taskleiste oder das Startmenü unter Windows 7 oder höher angeheftet ist, können zuletzt gestartete oder angeheftete Skripte über die Sprungliste des Programms gestartet werden.</li>
</ul>
<p>Die meisten Skripte zeigen ihren Effekt nur während der Ausführung. Verwenden Sie das <a href="#tray-icon">Tray-Menü</a> oder den <a href="lib/ExitApp.htm">ExitApp</a>-Befehl, um ein Skript zu beenden. Skripte werden auch zur Beendigung gezwungen, wenn Windows heruntergefahren wird. Um ein Skript automatisch nach der Anmeldung des Benutzers zu starten, platzieren Sie einfach eine Verknüpfung der Skriptdatei im <a href="Variables.htm#Startup">Autostart</a>-Ordner.</p>
<p>Skripte können auch <a href="Scripts.htm#ahk2exe">kompiliert</a> werden, d.h. ein Skript kann mit einer AutoHotkey-Binärdatei kombiniert werden, um eine eigenständige EXE-Datei zu erstellen.</p>

<h2 id="tray-icon">Tray-Symbol</h2>
<p>Standardmäßig fügt jedes Skript ein eigenes Symbol in den Infobereich der Taskleiste (auch Tray genannt) ein.</p>
<p>Das Tray-Symbol sieht üblicherweise wie folgt aus:</p>
<style>
.img_center img {
display: block;
margin-right: .2em;
}
</style>
<table style="margin-left: 1em;">
  <tr>
    <td class="img_center"><img src="static/ahk16.png" alt="grünes H-Symbol"></td>
    <td>Das Standard-Tray-Symbol.</td>
  </tr>
  <tr>
    <td class="img_center"><img src="static/ahk16_pause.png" alt="rotes H-Symbol"></td>
    <td>Das Skript ist <a href="lib/Pause.htm">pausiert</a>.</td>
  </tr>
  <tr>
    <td class="img_center"><img src="static/ahk16_suspend.png" alt="grünes S-Symbol"></td>
    <td>Das Skript ist <a href="lib/Suspend.htm">suspendiert</a>.</td>
  </tr>
  <tr>
    <td class="img_center"><img src="static/ahk16_pause_suspend.png" alt="rotes S-Symbol"></td>
    <td>Das Skript ist <a href="lib/Pause.htm">pausiert</a> und <a href="lib/Suspend.htm">suspendiert</a>.</td>
  </tr>
</table>
<p>Rechtsklicken Sie auf das Tray-Symbol, um das Tray-Menü anzuzeigen, das standardmäßig die folgenden Optionen enthält:</p>
<ul>
<li>Open - Öffnet das <a href="#main-window">Hauptfenster</a> des Skripts.</li>
<li>Help - Öffnet die Offline-Hilfe von AutoHotkey.</li>
<li>Window Spy - Zeigt verschiedene Informationen über ein Fenster an.</li>
<li>Reload This Script - Lädt das Skript neu. Siehe <a href="lib/Reload.htm">Reload</a>.</li>
<li>Edit This Script - Öffnet das Skript im Standardeditor. Siehe <a href="lib/Edit.htm">Edit</a>.</li>
<li>Suspend Hotkeys - Deaktiviert oder aktiviert Hotkeys via <a href="lib/Suspend.htm">Suspend</a>.</li>
<li>Pause Script - Pausiert oder entpausiert das Skript. Siehe <a href="lib/Pause.htm">Pause</a>.</li>
<li>Exit - Beendet das Skript.</li>
</ul>
<p>Standardmäßig bewirkt ein Doppelklick auf das Tray-Symbol, dass das <a href="#main-window">Hauptfenster</a> des Skripts angezeigt wird.</p>
<p>Mit dem <a href="lib/Menu.htm">Menu</a>-Befehl kann das Tray-Symbol und -Menü individuell angepasst werden.</p>
<p>Mit der <a href="lib/_NoTrayIcon.htm">#NoTrayIcon</a>-Direktive kann das Tray-Symbol versteckt werden.</p>

<h2 id="main-window">Hauptfenster</h2>
<p>Das Hauptfenster des Skripts ist normalerweise versteckt, kann aber über das <a href="#tray-icon">Tray-Symbol</a> oder einen der unten aufgeführten Befehle sichtbar gemacht werden, um Zugriff auf Informationen zu erhalten, die für das Debuggen des Skripts nützlich sind. Die Menüpunkte im <strong>View</strong>-Menü beeinflussen, was im Hauptfenster angezeigt wird:</p>
<ul>
<li>Lines most recently executed - Die zuletzt ausgeführten Zeilen. Siehe <a href="lib/ListLines.htm">ListLines</a>.</li>
<li>Variables and their contents - Variablen und ihr Inhalt. Siehe <a href="lib/ListVars.htm">ListVars</a>.</li>
<li>Hotkeys and their methods - Hotkeys und ihre Methoden. Siehe <a href="lib/ListHotkeys.htm">ListHotkeys</a>.</li>
<li>Key history and script info - Tastenverlauf und Skriptinfos. Siehe <a href="lib/KeyHistory.htm">KeyHistory</a>.</li>
</ul>
<p><strong>Bekanntes Problem:</strong> Die Tastaturkurzbefehle der Menüpunkte funktionieren nicht, wenn das Skript ein <a href="lib/MsgBox.htm">Mitteilungsfenster</a> oder ein anderes Dialogfenster anzeigt.</p>
<p>Die interne Variable <a href="Variables.htm#ScriptHwnd">A_ScriptHwnd</a> enthält die HWND-Nummer (eindeutige ID) des Hauptfensters.</p>
<p>Wenn dieses Fenster mit <a href="lib/WinClose.htm">WinClose</a> geschlossen wird (auch von einem anderen Skript aus), wird das Skript beendet, aber die meisten anderen Methoden verstecken nur das Fenster und lassen das Skript weiterlaufen.</p>
<p>Wenn das Hauptfenster minimiert wird, wird es automatisch versteckt. Dies ist notwendig, um zu verhindern, dass untergeordnete Fenster (z.B. GUI-Fenster oder einige Dialogfenster) automatisch minimiert werden, und um zu bewirken, dass die Schaltfläche in der Taskleiste des Hauptfensters versteckt wird. Um das Hauptfenster stattdessen normal minimieren zu lassen, überschreiben Sie das Standardverhalten mit <a href="lib/OnMessage.htm">OnMessage()</a>. Zum Beispiel:</p>
<pre>; Dies verhindert das Verstecken des Hauptfensters beim Minimieren:
OnMessage(0x0112, Func("AutoMinimierenVerhindern")) <em>; WM_SYSCOMMAND = 0x0112</em>
OnMessage(0x0005, Func("AutoMinimierenVerhindern")) <em>; WM_SIZE = 0x0005
; Dies verhindert das automatische Minimieren untergeordneter GUI-Fenster (außer Dialogfenster):</em>
OnMessage(0x0018, Func("AutoMinimierenVerhindern"))

AutoMinimierenVerhindern(wParam, lParam, uMsg, hwnd) {
    if (uMsg = 0x0112 &amp;&amp; wParam = 0xF020 &amp;&amp; hwnd = A_ScriptHwnd) { <em>; SC_MINIMIZE = 0xF020</em>
        WinMinimize
        return 0 <em>; Das Verstecken des Hauptfensters verhindern.</em>
    }
    if (uMsg = 0x0005 &amp;&amp; wParam = 1 &amp;&amp; hwnd = A_ScriptHwnd) <em>; SIZE_MINIMIZED = 1</em>
        return 0 <em>; Das Verstecken des Hauptfensters verhindern.</em>
    if (uMsg = 0x0018 &amp;&amp; lParam = 1) <em>; SW_PARENTCLOSING = 1</em>
        return 0 <em>; Das Verstecken des untergeordneten Fensters verhindern.</em>
}</pre>

<h3 id="title">Titel des Hauptfensters</h3>
<p>Der Titel des Hauptfensters wird von <a href="lib/_SingleInstance.htm">#SingleInstance</a>- und <a href="lib/Reload.htm">Reload</a>-Mechanismen verwendet, um andere Instanzen desselben Skripts zu identifizieren. Das <a href="lib/WinSetTitle.htm">Ändern des Titels</a> verhindert, dass das Skript als solches identifiziert wird. Welcher Titel standardmäßig verwendet wird, hängt davon ab, wie das Skript geladen wurde:</p>
<table class="info">
  <tr><th>Geladen aus</th><th>Titelausdruck</th><th>Beispiel</th></tr>
  <tr><td>.ahk-Datei</td><td><code>A_ScriptFullPath " - AutoHotkey v" A_AhkVersion</code></td><td>E:\Mein Skript.ahk - AutoHotkey v1.1.33.09</td></tr>
  <tr><td>Hauptressource (kompiliertes Skript)</td><td><code>A_ScriptFullPath</code></td><td>E:\Mein Skript.exe</td></tr>
  <tr><td>Jede andere Ressource</td><td><code>A_ScriptFullPath " - " A_LineFile</code></td><td>E:\Mein AutoHotkey.exe - *INTERNES-TOOL.AHK</td></tr>
</table>
<p>Der folgende Code zeigt, wie der Standardtitel mit dem Skript selbst ermittelt werden kann (wobei der tatsächliche Titel mit <a href="lib/WinGetTitle.htm">WinGetTitle</a> abgerufen werden kann):</p>
<pre>
Titel := A_ScriptFullPath
if !A_IsCompiled
    Titel .= " - AutoHotkey v" A_AhkVersion
<em>; Für ein korrektes Ergebnis muss dies von der auszuführenden Ressource ausgewertet werden,
; nicht von einem #Include (es sei denn, das #Include wurde mit Ahk2Exe in das Skript inkludiert):</em>
else if SubStr(A_LineFile, 1, 1) = "*" &amp;&amp; A_LineFile != "*#1"
    Titel .= " - " A_LineFile
</pre>

<h2 id="embedded-scripts">Eingebettete Skripte <span class="ver">[v1.1.34+]</span></h2>
<p>Skripte können in eine Standard-AutoHotkey-EXE-Datei eingebettet werden, indem sie mit dem <a href="Scripts.htm#ahk2exe">Ahk2Exe-Compiler</a> als Win32-Ressourcen (RCDATA) hinzugefügt werden. Zusätzliche Skripte können mit der <a href="misc/Ahk2ExeDirectives.htm#AddResource">AddResource</a>-Compilerdirektive hinzugefügt werden.</p>
<p>Ein eingebettetes Skript kann auf der Befehlszeile oder mit <a href="lib/_Include.htm">#Include</a> durch Angabe eines Sternchens (*) gefolgt vom Ressourcennamen angegeben werden. Handelt es sich um eine Integer-ID, muss der Ressourcenname ein Rautezeichen (#) gefolgt von einer Dezimalzahl sein.</p>
<p>Das Programm kann automatisch Skriptcode aus den folgenden Ressourcen laden, wenn diese in der Datei vorhanden sind:</p>
<table class="info">
  <tr><th>ID</th><th>Angabe</th><th>Verwendung</th></tr>
  <tr>
    <td>1</td><td>*#1</td>
    <td>Dies ist das Mittel, mit dem ein <a href="Scripts.htm#ahk2exe">kompiliertes Skript</a> aus einer EXE-Datei erstellt wird. Dieses Skript wird automatisch ausgeführt, und die meisten Befehlszeilenoptionen werden an das Skript übergeben, anstatt vom Programm interpretiert zu werden. Externe Skripte und alternativ eingebettete Skripte können mit der Befehlszeilenoption <a href="Scripts.htm#SlashScript">/script</a> ausgeführt werden.</td>
  </tr>
  <tr>
    <td>2</td><td>*#2</td>
    <td>Wenn vorhanden, wird dieses Skript automatisch vor jedem Skript, das das Programm lädt, und vor jeder mit <a href="Scripts.htm#SlashInclude">/include</a> angegebenen Datei "inkludiert".</td>
  </tr>
</table>
<p>Wenn die Quelle des Hauptskripts eine eingebettete Ressource ist, agiert das Programm im Modus "kompiliertes Skript", außer dass <a href="Variables.htm#AhkPath">A_AhkPath</a> immer den Pfad der aktuellen EXE-Datei enthält (derselbe wie <a href="Variables.htm#ScriptFullPath">A_ScriptFullPath</a>). Für andere Ressourcen als *#1 wird der Ressourcenbezeichner in den <a href="#title">Titel des Hauptfensters</a> eingefügt, um <a href="lib/_SingleInstance.htm">#SingleInstance</a> und <a href="lib/Reload.htm">Reload</a> zu unterstützen.</p>
<p>Wenn <a href="Variables.htm#LineFile">A_LineFile</a> von einem Code referenziert wird, der aus einer eingebetteten Ressource stammt, enthält es ein Sternchen (*) gefolgt vom Ressourcennamen.</p>

<h2 id="cmd">Befehlszeilennutzung</h2>
<p>Unter <a href="Scripts.htm#cmd">Befehlszeilenparameter an ein Skript übergeben</a> finden Sie Informationen zur Befehlszeilennutzung und eine Liste von Befehlszeilenoptionen, die das Verhalten des Programms beeinflussen.</p>

<h2 id="portability">Portabilität von AutoHotkey.exe</h2>
<p>Zum Starten eines .ahk-Skripts ist nur die Datei AutoHotkey.exe erforderlich.</p>
<p><span class="ver">[AHK_L 51+]</span>: Die Umbenennung von AutoHotkey.exe ändert auch, welches Skript <a href="Scripts.htm#defaultfile">standardmäßig</a> ausgeführt wird, was eine Alternative zum Kompilieren des Skripts für die Verwendung auf einem Computer ohne installiertes AutoHotkey ist. Zum Beispiel führt <i>MeinSkript</i>.exe automatisch <i>MeinSkript</i>.ahk aus, wenn kein Dateiname angegeben ist, kann aber auch andere Skripte ausführen.</p>

<h2 id="install">Installer-Optionen</h2>
<p>Um AutoHotkey automatisch in das Standardverzeichnis zu installieren (dasselbe Verzeichnis, das im Nicht-Silent-Modus angezeigt wird), starten Sie den Installer mit dem /S-Parameter. Zum Beispiel:</p>
<pre class="no-highlight">AutoHotkey_1.1.34.03_setup.exe /S</pre>
<p>Mit dem /D-Parameter kann ein benutzerdefiniertes Standardverzeichnis angegeben werden (wenn /S weggelassen wird, ändert dies das Standardverzeichnis, das im Installer angezeigt wird). Zum Beispiel:</p>
<pre class="no-highlight">AutoHotkey_1.1.34.03_setup.exe /S /D=C:\Program Files\AutoHotkey</pre>
<p><strong>Version:</strong> Wenn AutoHotkey bereits installiert ist, erkennt der Installer automatisch, welche Version von AutoHotkey.exe standardmäßig gesetzt werden soll. Andernfalls wird standardmäßig Unicode 32-Bit verwendet, oder Unicode 64-Bit, wenn das Betriebssystem im 64-Bit-Format ist. Um zu überschreiben, welche Version von AutoHotkey.exe standardmäßig gesetzt wird, übergeben Sie einen der folgenden Parameter:</p>
<ul>
  <li><code class="no-highlight">/A32</code> oder <code class="no-highlight">/ANSI</code>: ANSI 32-Bit.</li>
  <li><code class="no-highlight">/U64</code> oder <code class="no-highlight">/x64</code>: Unicode 64-Bit (nur für 64-Bit-Systeme gültig).</li>
  <li><code class="no-highlight">/U32</code>: Unicode 32-Bit.</li>
</ul>
<p>Das folgende Beispiel installiert AutoHotkey automatisch und setzt ANSI 32-Bit als Standardversion:</p>
<pre class="no-highlight">AutoHotkey_1.1.34.03_setup.exe /S /A32</pre>
<p><strong>Deinstallieren:</strong> Um AutoHotkey automatisch zu deinstallieren, starten Sie Installer.ahk mit dem Parameter <code class="no-highlight">/Uninstall</code>. Zum Beispiel:</p>
<pre class="no-highlight">"C:\Programme\AutoHotkey\AutoHotkey.exe" "C:\Programme\AutoHotkey\Installer.ahk" /Uninstall</pre>
<p>In Versionen älter als 1.1.08.00 muss <code class="no-highlight">uninst.exe /S</code> verwendet werden. Zum Beispiel:</p>
<pre class="no-highlight">"C:\Programme\AutoHotkey\uninst.exe" /S</pre>
<p><strong>Hinweis:</strong> Installer.ahk muss mit Adminrechten ausgeführt werden, um korrekt zu funktionieren.</p>
<p><strong>Extrahieren</strong> <span class="ver">[v1.1.09.04+]</span>: In der unteren rechten Ecke der GUI des Installers befindet sich ein Link zum Extrahieren der Dateien ohne Installation. Alternativ kann die Befehlszeilenoption <code class="no-highlight">/E</code> verwendet werden. Zum Beispiel:</p>
<pre class="no-highlight">AutoHotkey_1.1.34.03_setup.exe /D=F:\AutoHotkey /E</pre>
<p><strong>Skripte neu starten</strong> <span class="ver">[v1.1.19.02+]</span>: Im automatischen Install/Uninstall-Modus werden laufende Skripte automatisch beendet, sofern erforderlich. Übergeben Sie die <code class="no-highlight">/R</code>-Option <strong>ohne</strong> zusätzliche Befehlszeilenparameter, um diese Skripte automatisch neu zu laden, und zwar mit der EXE, mit der sie ausgeführt wurden. Das Setup wird versuchen, die Skripte über den Explorer zu starten, folglich werden sie nicht mit Adminrechten ausgeführt, wenn UAC aktiviert ist.</p>

<p id="Installer_IsHostApp"><strong>Taskleistenschaltflächen</strong> <span class="ver">[v1.1.08+]</span>: In Windows 7 und höher werden Taskleistenschaltflächen von mehreren Skripten standardmäßig automatisch gruppiert oder zu einer Schaltfläche zusammengefasst. Die Option <em>Separate taskbar buttons</em> (Separate Taskleistenschaltflächen) deaktiviert dieses Verhalten, indem jede AutoHotkey-EXE-Datei als <a href="https://learn.microsoft.com/windows/win32/shell/app-registration">Host-App (IsHostApp)</a> registriert wird.</p>
<p><span class="ver">[v1.1.24.02+]</span>: Befehlszeileninstallationen können <code class="no-highlight">/IsHostApp</code> oder <code class="no-highlight">/IsHostApp=1</code> verwenden, um die Option zu aktivieren, und <code class="no-highlight">/IsHostApp=0</code>, um sie zu deaktivieren.</p>

<h3 id="Installer_uiAccess">Mit UI-Access starten <span class="ver">[v1.1.24.02+]</span></h3>
<p>Die Installer-GUI verfügt über die Option "Add 'Run with UI Access' to context menus" ('Mit UI-Access ausführen' in das Kontextmenü einfügen). Diese Kontextmenüoption bietet einen Workaround für gängige <a href="FAQ.htm#uac">UAC-bezogene Probleme</a>, damit das Skript administrative Programme automatisieren kann - ohne dass das Skript mit Adminrechten laufen muss. Um das zu erreichen, wird der Installer folgendes tun:</p>
<ul>
  <li>AutoHotkeyA32.exe, AutoHotkeyU32.exe und (falls vorhanden) AutoHotkeyU64.exe kopieren und in AutoHotkey*_UIA.exe umbenennen.</li>
  <li>Das <a href="https://learn.microsoft.com/windows/win32/winauto/uiauto-securityoverview">uiAccess-Attribut</a> im eingebetteten Manifest jeder UIA-Datei setzen.</li>
  <li>Ein selbstsigniertes digitales Zertifikat namens "AutoHotkey" erstellen und jede UIA-Datei signieren.</li>
  <li>Die Kontextmenüoption zum Ausführen der entsprechenden EXE-Datei registrieren.</li>
</ul>
<p>Wenn eine dieser UIA-Dateien vor der Installation vorhanden ist, wird der Installer sie automatisch aktualisieren, selbst wenn die uiAccess-Option nicht aktiv ist.</p>
<p>Befehlszeileninstallationen können <code class="no-highlight">/uiAccess</code> oder <code class="no-highlight">/uiAccess=1</code> verwenden, um die Option zu aktivieren, und <code class="no-highlight">/uiAccess=0</code>, um sie zu deaktivieren. Standardmäßig aktiviert der Installer die Option, wenn UAC aktiv ist und die UI-Access-Kontextmenüoption vor der Installation vorhanden war.</p>
<p>Skripte, die andere Skripte mit UI-Access ausführen müssen, können einfach <a href="lib/Run.htm">Run</a> verwenden, um die entsprechende UIA.EXE-Datei mit den normalen <a href="#cmd">Befehlszeilenparametern</a> auszuführen.</p>
<p><strong>Bekannte Einschränkungen:</strong></p>
<ul>
  <li>UIA funktioniert nur, wenn der Speicherort der Datei vertrauenswürdig ist, z.B. ein Unterverzeichnis des Ordners "Programme".</li>
  <li>UIA.EXE-Dateien funktionieren nur auf anderen Computern, wenn das digitale Zertifikat, das zur Erstellung dieser Dateien verwendet wurde, auch auf diesen Computern installiert ist.</li>
  <li>UIA.EXE-Dateien können aus Sicherheitsgründen nicht via CreateProcess gestartet werden. Stattdessen kann ShellExecute verwendet werden. <a href="lib/Run.htm">Run</a> versucht beides.</li>
  <li>UIA.EXE-Dateien können nicht modifiziert werden, da dies ihre digitale Signatur ungültig machen würde.</li>
  <li>Da UIA-Programme auf einer anderen "Integritätsstufe" laufen als normale Programme, können sie nur auf Objekte zugreifen, die von anderen UIA-Programmen registriert wurden. Zum Beispiel würde <code><a href="lib/ComObjActive.htm">ComObjActive</a>("Word.Application")</code> fehlschlagen, weil Word nicht für UI-Access markiert wurde.</li>
  <li>Die Fenster des Skripts können aus Sicherheitsgründen nur von UIA-Programmen/Skripten automatisiert werden.</li>
  <li>Die Ausführung eines Nicht-UIA-Skripts, das einen Maus-Hook verwendet (selbst ein einfaches <code>#InstallMouseHook</code>), kann dazu führen, dass alle Maus-Hotkeys blockiert werden, wenn die Maus auf ein Fenster zeigt, das einem UIA-Skript gehört, sogar Hotkeys, die vom UIA-Skript selbst implementiert wurden. Ein Workaround besteht darin, sicherzustellen, dass die UIA-Skripte zuletzt geladen werden.</li>
  <li>UIA verhindert, dass die Gui-Option <a href="lib/Gui.htm#Parent">+Parent</a> bei einem existierenden Fenster funktioniert, wenn das neue übergeordnete Fenster die Immer-Im-Vordergrund-Eigenschaft hat und das untergeordnete Fenster nicht.</li>
</ul>
<p>Weitere Informationen finden Sie unter <a href="https://www.autohotkey.com/board/topic/70449-enable-interaction-with-administrative-programs/">Enable interaction with administrative programs</a> (Interaktion mit administrativen Programmen ermöglichen) im archivierten Forum.</p>

</body>
</html>
