<!DOCTYPE HTML>
<html lang="de">
<head>
<title>DPI-Skalierung | AutoHotkey v1</title>
<meta name="description" content="Beschreibt Themen im Zusammenhang mit der DPI-Skalierung." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>

<body>
<h1>DPI-Skalierung</h1>

<p>DPI-Skalierung ist eine Funktion, die entweder vom Betriebssystem oder von der Applikation ausgeführt wird, um die sichtbare Größe des Inhalts proportional zur DPI-Einstellung (Dots Per Inch, dt. Punkte pro Zoll) des Bildschirms zu vergrößern. Grundsätzlich ermöglicht diese Funktion, dass Inhalte auf Systemen mit unterschiedlichen Bildschirmauflösungen in der gleichen physischen Größe dargestellt werden oder zumindest auf sehr hochauflösenden Bildschirmen benutzbar sind. Manchmal erhöht ein Benutzer die DPI-Einstellung, um Inhalte größer zu machen und besser lesen zu können.</p>
<p><a href="../Variables.htm#ScreenDPI">A_ScreenDPI</a> gibt die DPI-Einstellung des primären Bildschirms zurück.</p>
<p>Es gibt zwei verschiedene DPI-Skalierungen, die etwas mit AutoHotkey zu tun haben: Gui-DPI-Skalierung und OS-DPI-Skalierung.</p>

<h2 id="Gui_DPI_Scaling">Gui-DPI-Skalierung</h2>
<p>Standardmäßig führen die Gui-Befehle eine automatische Skalierung durch, so dass GUI-Skripte mit hartkodierten Positionen, Größen und Abständen auf Bildschirmen mit hohem DPI-Wert angemessen skaliert werden. Wenn dies negative Auswirkungen auf das Skript hat oder das Skript die Skalierung selbst vornimmt, kann die automatische Skalierung deaktiviert werden. Weitere Informationen finden Sie unter der Option <a href="../lib/Gui.htm#DPIScale">-DPIScale</a>.</p>

<h2 id="OS_DPI_Scaling">OS-DPI-Skalierung</h2>
<p>Bei Applikationen, die nicht DPI-sensitiv sind, führt das Betriebssystem automatisch eine Skalierung für Koordinaten durch, die an bestimmte Systemfunktionen übergeben und von diesen zurückgegeben werden. Diese Art der Skalierung wirkt sich unter AutoHotkey nur auf Systeme mit mehreren Bildschirmen aus, die unterschiedliche DPI-Einstellungen haben.</p>

<h3 id="Per-Monitor_DPI_Awareness">Pro-Bildschirm-DPI-Sensitivität</h3>
<p>In Windows 8.1 und höher können sekundäre Bildschirme unterschiedliche DPI-Einstellungen haben. Von "pro-Bildschirm-DPI-sensitiven" Applikationen wird erwartet, dass sie ihre Fenster entsprechend dem DPI-Wert des Bildschirms skalieren, auf dem sie sich gerade befinden, und sich dynamisch anpassen, wenn das Fenster zwischen den Bildschirmen hin- und hergeschoben wird.</p>
<p>Bei Applikationen, die nicht pro-Bildschirm-DPI-sensitiv sind, führt das System eine Bitmap-Skalierung durch, damit die Fenster ihre Größe ändern können, wenn sie zwischen den Bildschirmen hin- und hergeschoben werden, und verbirgt dies vor der Applikation, indem die Koordinaten und Größen auf die globale DPI-Einstellung skaliert werden, die die Applikation erwartet. Auf einem 11-Zoll-4K-Bildschirm wäre z.B. eine GUI, die für die Darstellung auf 96 dpi (100&nbsp;%) ausgelegt ist, praktisch unbenutzbar, während eine Skalierung auf 200&nbsp;% sie benutzbar machen würde.</p>
<p>AutoHotkey ist nicht für die Durchführung einer Pro-Bildschirm-Skalierung ausgelegt und wurde daher nicht als pro-Bildschirm-DPI-sensitiv gekennzeichnet. Dies ist z.B. vorteilhaft, wenn ein GUI-Fenster zwischen einem großen externen Bildschirm mit 100&nbsp;% DPI und einem kleineren Bildschirm mit 200&nbsp;% DPI hin- und hergeschoben wird. Die automatische Skalierung hat jedoch auch negative Auswirkungen.</p>
<p>Damit die automatische Skalierung des Systems funktioniert, werden Koordinaten, die von Systemfunktionen wie <a href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-movewindow">MoveWindow</a> und <a href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getwindowrect">GetWindowRect</a> akzeptiert oder zurückgegeben werden, automatisch skaliert. Wenn AutoHotkey diese Funktionen verwendet, um mit externen Fenstern zu arbeiten, führt dies oft zu unerwarteten Ergebnissen, wenn sich die Koordinaten nicht auf dem primären Bildschirm befinden. Erschwerend kommt hinzu, dass einige Funktionen die Koordinaten auf Basis des Bildschirms skalieren, auf dem das zuletzt aktive Fenster des Skripts angezeigt wurde.</p>

<h2 id="Workarounds">Workarounds</h2>
<p>In Windows 10 Version 1607 und höher kann die Systemfunktion <a href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setthreaddpiawarenesscontext">SetThreadDpiAwarenessContext</a> verwendet werden, um die DPI-Sensitivitätseinstellung des Programms während der Ausführung zu ändern. Wenn Sie z.B. die Pro-Bildschirm-DPI-Sensitivität aktivieren, wird die systemseitige Skalierung deaktiviert, so dass Befehle wie <a href="../lib/WinMove.htm">WinMove</a> und <a href="../lib/WinGetPos.htm">WinGetPos</a> Koordinaten (in Pixel) unabhängig von der DPI-Skalierung akzeptieren oder zurückgeben können. Wenn jedoch die Größe einer GUI für einen Bildschirm mit 100&nbsp;% DPI ausgelegt ist und dann auf einen Bildschirm mit 200&nbsp;% DPI verschoben wird, passt sie sich nicht automatisch an und kann unbenutzbar werden.</p>
<p>Um die Pro-Bildschirm-DPI-Sensitivität zu aktivieren, rufen Sie die folgende Funktion auf, bevor Sie Funktionen verwenden, die normalerweise von der DPI-Skalierung betroffen sind:</p>
<pre>DllCall("SetThreadDpiAwarenessContext", "ptr", -3, "ptr")</pre>
<p>In Windows 10 Version 1703 und höher kann -3 mit -4 ersetzt werden, um den Modus "Per Monitor v2" zu aktivieren. Dies ermöglicht die Skalierung von Dialogfenstern, Menüs, Tooltips und einigem mehr. Allerdings wird dadurch auch der Nicht-Clientbereich (Titelleiste) skaliert, was wiederum dazu führen kann, dass der Clientbereich des Fensters zu klein wird, es sei denn, das Skript ist so konzipiert, dass es sich daran anpasst (z.B. durch Reaktion auf die <a href="https://learn.microsoft.com/windows/win32/hidpi/wm-dpichanged">WM_DPICHANGED-Meldung</a>). Dies lässt sich vermeiden, indem der Kontext vor der Erstellung der GUI auf -3 oder vor der Erstellung von Tooltips, Menüs oder Dialogfenstern auf -4 gesetzt wird.</p>
<p>Die DPI-Sensitivität des Threads kann sich temporär ändern, während der Benutzer ein Fenster des Skripts verschiebt oder während das Skript ein Dialogfenster anzeigt. Daher ist es am sichersten, die DPI-Sensitivität unmittelbar vor der Verwendung der Funktionen, die darauf angewiesen sind, einzustellen.</p>

<h3 id="Compiled_Scripts">Kompilierte Skripte</h3>
<p>Pro-Bildschirm-DPI-Sensitivität kann prozessübergreifend aktiviert werden, indem der Inhalt des <code class="no-highlight">&lt;dpiAware&gt;</code>-Eintrags in der Manifest-Ressource des kompilierten Skripts von <code class="no-highlight">true</code> (Standardeinstellung in der AutoHotkey-EXE-Datei) auf <code class="no-highlight">true/pm</code> geändert wird.</p>

</body>
</html>
