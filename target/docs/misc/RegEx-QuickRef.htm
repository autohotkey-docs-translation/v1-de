<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Reguläre Ausdrücke (RegEx) - Kurzübersicht | AutoHotkey v1</title>
<meta name="description" content="Diese Seite enthält Optionen, häufig verwendete Symbole und Syntax, die innerhalb eines regulären Ausdrucks verwendet werden können." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>
<h1>Reguläre Ausdrücke (RegEx) - Kurzübersicht</h1>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#fundamentals">Grundlagen</a></li>
  <li><a href="#Options">Optionen (Groß-/Kleinschreibung-sensitiv)</a></li>
  <li><a href="#Common">Häufig verwendete Symbole und Syntax</a></li>
</ul>

<h2 id="fundamentals">Grundlagen</h2>
<p><strong>Übereinstimmung überall finden:</strong> Standardmäßig findet ein regulärer Ausdruck eine Übereinstimmung an einer <em>beliebigen</em> Stelle innerhalb der zu durchsuchenden Zeichenkette. Zum Beispiel wird der reguläre Ausdruck <span class="regex">abc</span> in <span class="subj">abc</span>123, 123<span class="subj">abc</span> und 123<span class="subj">abc</span>xyz gefunden. Wenn eine Übereinstimmung nur am Anfang oder Ende einer Zeichenkette gefunden werden soll, verwenden Sie einen <a href="#anchor">Anker</a>.</p>
<p><strong>Escapezeichenversehene Zeichen:</strong> Die meisten Zeichen wie abc123 können ganz normal in einem regulären Ausdruck verwendet werden. Anders verhält es sich mit den Metazeichen <code class="no-highlight">\.*?+[{|()^$</code>: Um ihre spezielle Bedeutung außer Kraft zu setzen, muss ihnen ein umgekehrter Schrägstrich vorangestellt werden. Zum Beispiel ist <span class="regex">\.</span> ein normaler Punkt und <span class="regex">\\</span> ein normaler umgekehrter Schrägstrich. Um nicht nur ein Zeichen, sondern eine ganze Reihe von Zeichen als normale Zeichen zu behandeln, verwenden Sie \Q...\E. Zum Beispiel: <span class="regex">\QNormaler Text\E</span>.</p>
<p><strong>Groß-/Kleinschreibung-sensitiv:</strong> Standardmäßig sind reguläre Ausdrücke Groß-/Kleinschreibung-sensitiv (d.h. sie berücksichtigen die Groß-/Kleinschreibung). Mit der "i"-Option kann das geändert werden. Zum Beispiel sucht das Muster <span class="regex">i)abc</span> nach "abc", ohne die Groß-/Kleinschreibung zu berücksichtigen. Weitere Optionen finden Sie in der unteren Tabelle.</p>

<h2 id="Options">Optionen (Groß-/Kleinschreibung-sensitiv)</h2>
<p>Geben Sie ganz am Anfang eines regulären Ausdrucks beliebig viele der folgenden Optionen an, gefolgt von einer schließenden runden Klammer. Zum Beispiel sucht das Muster <span class="regex"><span class="red">im)</span>abc</span> nach "abc" mit den Optionen "nicht-Groß-/Kleinschreibung-sensitiv" und "mehrzeilig" (die runde Klammer kann weggelassen werden, wenn keine Optionen vorhanden sind). Diese Art der Optionsangabe hat gegenüber den herkömmlichen Methoden den Vorteil, dass keine speziellen Trennzeichen (wie z.B. Schrägstrich) benötigt werden und diese daher nicht mit einem Escapezeichen innerhalb des Suchmusters versehen werden müssen. Außerdem können die Optionen auf diese Weise einfacher geparst werden, was sich positiv auf die Performanz auswirkt.</p>
<table class="info">
  <tr>
    <th class="center">Option</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="opt_i">
    <td class="center bold">i</td>
    <td>Nicht-Groß-/Kleinschreibung-sensitive Übereinstimmung. Diese Option bewirkt, dass die Großbuchstaben A bis Z und die entsprechenden Kleinbuchstaben als identisch behandelt werden.</td>
  </tr>
  <tr id="Multiline">
    <td class="center bold">m</td>
    <td><p>Multiline-Modus. <em>Heuhaufen</em> wird als eine Sammlung von einzelnen Zeilen betrachtet (sofern Zeilenumbrüche enthalten sind), nicht als eine durchgehende Zeile. Die folgenden Änderungen treten dabei in Kraft:</p>
      <p>1) Zirkumflex (^) findet eine Übereinstimmung nach jedem Zeilenumbruch und am Anfang von <em>Heuhaufen</em> (aber nicht nach einem Zeilenumbruch <em>ganz am Ende</em> von <em>Heuhaufen</em>).</p>
      <p>2) Dollarzeichen ($) findet eine Übereinstimmung vor jedem Zeilenumbruch (und ganz am Ende von <em>Heuhaufen</em>).</p>
      <p>Zum Beispiel findet das Suchmuster <span class="regex"><span class="red">m)</span>^abc$</span> eine Übereinstimmung in xyz`r`n<span class="subj">abc</span>. Ohne die "m"-Option wäre dies nicht der Fall.</p>
      <p>Die "D"-Option wird ignoriert, wenn die "m"-Option vorhanden ist.</p></td>
  </tr>
  <tr id="opt_s">
    <td class="center bold">s</td>
    <td>DotAll-Modus. Bewirkt, dass ein Punkt (.) alle Arten von Zeichen findet, inklusive Zeilenumbrüche (normalerweise findet der Punkt keine Zeilenumbrüche). Es sind jedoch zwei Punkte erforderlich, um ein Wagenrücklauf-Zeilenvorschub-Paar (`r`n) zu finden. Unabhängiger von dieser Option findet eine negative Klasse wie <span class="regex">[^a]</span> immer Zeilenumbrüche.</td>
  </tr>
  <tr id="opt_x">
    <td class="center bold">x</td>
    <td>Bewirkt, dass alle Leerraumzeichen im Suchmuster ignoriert werden, es sei denn, sie sind mit einem Escapezeichen versehen oder befinden sich in einer Zeichenklasse. Die Zeichen `n und `t werden ignoriert, da sie, sobald sie PCRE erreichen, bereits rohe/normale Leerraumzeichen sind (\n und \t werden hingegen nicht ignoriert, da sie PCRE-Escapesequenzen sind). Die "x"-Option ignoriert außerdem Zeichenketten (außerhalb einer Zeichenklasse), die mit einer escapezeichenlosen Raute (#) beginnen und mit einem Zeilenumbruch enden. Dies macht es möglich, Kommentare in ein komplexes Suchmuster einzufügen. Beachten Sie aber, dass dies nur für Datenzeichen gilt; spezielle Zeichensequenzen, wie z.B. (?(, das ein bedingtes Teilsuchmuster einleitet, dürfen keine Leerraumzeichen enthalten.</td>
  </tr>
  <tr id="opt_A">
    <td class="center bold">A</td>
    <td>Erzwingt eine Verankerung des Suchmusters, d.h. das Suchmuster kann nur am Anfang von <em>Heuhaufen</em> gefunden werden. Diese Option ist prinzipiell dasselbe wie, als würde man das Suchmuster explizit mit "^" verankern.</td>
  </tr>
  <tr id="opt_D">
    <td class="center bold">D</td>
    <td>Zwingt das Dollarzeichen ($), eine Übereinstimmung ganz am Ende von <em>Heuhaufen</em> zu finden, auch dann, wenn das letzte Element von <em>Heuhaufen</em> ein Zeilenumbruch ist. Wenn diese Option nicht vorhanden ist, findet $ eine Übereinstimmung direkt vor dem letzten Zeilenumbruch (falls vorhanden). Hinweis: Diese Option wird ignoriert, wenn die "m"-Option vorhanden ist.</td>
  </tr>
  <tr id="opt_J">
    <td class="center bold">J</td>
    <td>Erlaubt mehrere <a href="../lib/RegExMatch.htm#NamedSubPat">benannte Teilsuchmuster</a> mit demselben Namen. Diese Option kann für Suchmuster nützlich sein, bei denen nur eines aus einer Sammlung von gleichnamigen Teilsuchmustern übereinstimmen kann. Hinweis: Wenn mehr als eine Instanz eines bestimmten Namens übereinstimmt, wird nur die ganz links gespeichert. Außerdem sind Variablennamen nicht Groß-/Kleinschreibung-sensitiv.</td>
  </tr>
  <tr id="opt_U">
    <td class="center bold">U</td>
    <td>Ungreedy-Modus. Bringt die Quantoren <strong>*</strong>, <strong>?</strong>, <strong>+</strong> und <strong>{min,max}</strong> dazu, so wenig Zeichen wie möglich zu verbrauchen, um eine Übereinstimmung zu erzeugen, und überlässt die verbleibenden Zeichen dem nächsten Teil des Suchmusters. Wenn die "U"-Option nicht aktiv ist, kann ein einzelner Quantor durch Anfügen eines Fragezeichens ungreedy gemacht werden. Bei <em>aktivierter</em> "U"-Option bewirkt das Fragezeichen genau das Gegenteil – es macht einen einzelnen Quantor greedy.</td>
  </tr>
  <tr id="opt_extra">
    <td class="center bold">X</td>
    <td>PCRE_EXTRA. Aktiviert PCRE-Features, die mit Perl inkompatibel sind. Zur Zeit gibt es nur ein solches Feature – es bewirkt, dass jeder umgekehrte Schrägstrich, gefolgt von einem Buchstaben ohne spezielle Funktion, die Übereinstimmung fehlschlagen lässt und ErrorLevel entsprechend setzt. Diese Option hilft, ungenutzte PCRE-Escapesequenzen für zukünftige Zwecke zu reservieren. Ohne diese Option wird der umgekehrte Schrägstrich vor einem Buchstaben ohne spezielle Funktion einfach ignoriert (z.B. werden sowohl \g als auch g als normales g erkannt). Unabhängiger von dieser Option werden umgekehrte Schrägstriche vor nicht-alphabetischen Zeichen ohne spezielle Funktion immer ignoriert (z.B. werden sowohl \/ als auch / als normaler Schrägstrich erkannt).</td>
  </tr>
  <tr id="opt_P">
    <td class="center bold">P</td>
    <td>Positionsmodus. Bewirkt, dass RegExMatch() die Position und Länge der Übereinstimmung und ihrer Teilsuchmuster zurückgibt, nicht deren gefundene Teilzeichenketten. Weitere Informationen finden Sie unter <a href="../lib/RegExMatch.htm#PosMode">AusgabeVar</a>.</td>
  </tr>
  <tr id="opt_O">
    <td class="center bold">O</td>
    <td>Objektmodus. <span class="ver">[v1.1.05+]</span>: Bewirkt, dass RegExMatch() alle Informationen der Übereinstimmung und ihrer Teilsuchmuster als <a href="../lib/RegExMatch.htm#MatchObject">Match-Objekt</a> in AusgabeVar speichert. Weitere Informationen finden Sie unter <a href="../lib/RegExMatch.htm#ObjectMode">AusgabeVar</a>.</td>
  </tr>
  <tr id="Study">
    <td class="center bold">S</td>
    <td>Analysiert das Suchmuster, um zu versuchen, dessen Performanz zu verbessern. Dies ist nützlich, wenn ein bestimmtes (insbesondere komplexes) Suchmuster viele Male ausgeführt werden soll. Wenn PCRE einen Weg gefunden hat, die Performanz zu verbessern, speichert PCRE diese Entdeckung zusammen mit dem Suchmuster in den Zwischenspeicher, um sie später auf nachfolgende Suchmuster desselben Typs anzuwenden (diese Suchmuster sollten ebenfalls die S-Option enthalten, da sie im Zwischenspeicher nur gefunden werden können, wenn die Optionsbuchstaben vorhanden und in der gleichen Reihenfolge sind).</td>
  </tr>
  <tr id="opt_Callout">
    <td class="center bold">C</td>
    <td>Aktiviert den Auto-Callout-Modus. Weitere Informationen finden Sie unter <a href="RegExCallout.htm#auto">Callouts in regulären Ausdrücken</a>.</td>
  </tr>
  <tr id="opt_esc_n">
    <td class="center bold">`n</td>
    <td>Wechselt vom Standardzeilenumbruch (`r`n) zu einem einzelnen Zeilenvorschub (`n), das standardmäßig auf UNIX-Systemen verwendet wird. Das gewählte Zeilenumbruchzeichen beeinflusst das Verhalten von <a href="#anchor">Ankern (^ und $)</a> und <a href="#dot">Punkt-Platzhaltern</a>.</td>
  </tr>
  <tr id="opt_esc_r">
    <td class="center bold">`r</td>
    <td>Wechselt vom Standardzeilenumbruch (`r`n) zu einem einzelnen Wagenrücklauf (`r).</td>
  </tr>
  <tr id="NEWLINE_ANY">
    <td class="center bold">`a</td>
    <td><span class="ver">[v1.0.46.06+]</span>: `a erkennt jede Art von Zeilenumbruch, namentlich `r, `n, `r`n, `v/VT/vertical tab/chr(0xB), `f/FF/formfeed/chr(0xC) und NEL/next-line/chr(0x85). <span class="ver">[v1.0.47.05+]</span>: Um Zeilenumbrüche nur auf Wagenrücklauf (CR), Zeilenvorschub (LF) und Wagenrücklauf-Zeilenvorschub-Paar (CRLF) zu beschränken, geben Sie stattdessen (*ANYCRLF) in Großbuchstaben am Anfang eines Suchmusters (nach den Optionen) an, z.B. <span class="regex">im)(*ANYCRLF)^abc$</span>.</td>
  </tr>
</table>
<p class="note"><strong>Hinweis:</strong> Optional können Leer- und Tabulatorzeichen verwendet werden, um die Optionen voneinander zu trennen.</p>

<h2 id="Common">Häufig verwendete Symbole und Syntax</h2>
<table class="info">
  <tr>
    <th class="center">Element</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
	<tr id="dot">
		<td class="center bold">.</td>
		<td>Standardmäßig der Platzhalter für ein beliebiges einzelnes Zeichen, das nicht zum Wagenrücklauf-Zeilenvorschub-Paar (`r`n) gehört, was aber mit den Optionen <a href="#opt_s">DotAll (s)</a>, <a href="#opt_esc_n">Zeilenvorschub (`n)</a>, <a href= "#opt_esc_r">Wagenrücklauf (`r)</a>, <a href="#NEWLINE_ANY">`a oder (*ANYCRLF)</a> geändert werden kann. Zum Beispiel findet <span class="regex">ab.</span> eine Übereinstimmung in <span class="subj">abc</span>, <span class="subj">abz</span> und <span class="subj">ab_</span>.</td>
	</tr>
	<tr>
		<td class="center bold">*</td>
		<td><p>Der Platzhalter für 0 oder mehr Vorkommen des vorherigen Elements (Zeichen, <a href="#class">Klasse</a> oder <a href="#subpat">Teilsuchmuster</a>). Zum Beispiel findet <span class="regex">a*</span> eine Übereinstimmung in <span class="subj">a</span>b und <span class="subj">aaa</span>b, aber auch in einer Zeichenkette, die überhaupt kein "a" enthält.</p>
	      <p><strong>Punkt-Stern-Platzhalter:</strong> <span class="regex">.*</span> ist einer der tolerantesten Platzhalter – er findet 0 oder mehr Vorkommen eines <em>beliebigen</em> Zeichens (außer Zeilenumbruch: `r und `n). Zum Beispiel findet <span class="regex">abc.*123</span> eine Übereinstimmung sowohl in <span class="subj">abcIrgendwas123</span> als auch in <span class="subj">abc123</span>.</p>		  </td>
	</tr>
	<tr>
	  <td class="center bold">?</td>
	  <td>Der Platzhalter für 0 oder 1 Vorkommen des vorherigen Elements (Zeichen, <a href="#class">Klasse</a> oder <a href="#subpat">Teilsuchmuster</a>). Oder auch: "Das voranstehende Element ist optional". Zum Beispiel findet <span class="regex">colou?r</span> eine Übereinstimmung sowohl in <span class="subj">color</span> als auch in <span class="subj">colour</span>, da das "u" optional ist.</td>
  </tr>
	<tr>
	  <td class="center bold">+</td>
	  <td>Der Platzhalter für 1 oder mehr Vorkommen des vorherigen Elements (Zeichen, <a href="#class">Klasse</a> oder <a href="#subpat">Teilsuchmuster</a>). Zum Beispiel findet <span class="regex">a+</span> eine Übereinstimmung in <span class="subj">a</span>b und <span class="subj">aaa</span>b. Im Gegensatz zu <span class="regex">a*</span> und <span class="regex">a?</span> findet <span class="regex">a+</span> jedoch keine Übereinstimmung in einer Zeichenkette, die überhaupt kein "a" enthält.</td>
  </tr>
	<tr>
	  <td class="center bold">{min,max}</td>
	  <td><p>Der Platzhalter für <em>min</em> bis <em>max</em> Vorkommen des vorherigen Elements (Zeichen, <a href="#class">Klasse</a> oder <a href="#subpat">Teilsuchmuster</a>). Zum Beispiel findet <span class="regex">a{1,2}</span> eine Übereinstimmung in <span class="subj">a</span>b und <span class="subj">aa</span>ab.</p>
        <p>{3} hingegen bedeutet, dass genau 3 Vorkommen gefunden werden, und {3<strong>,</strong>} bedeutet, dass 3 oder mehr Vorkommen gefunden werden. Hinweis: Die angegebenen Zahlen müssen kleiner als 65536 sein und die erste Zahl darf nicht größer als die zweite Zahl sein.</p></td>
  </tr>
	<tr id="class">
	  <td class="center bold">[...]</td>
	  <td><p><strong>Zeichenklassen:</strong> Der Platzhalter für ein einzelnes Zeichen. Die eckigen Klammern umschließen eine Liste und/oder einen Bereich von Zeichen. Zum Beispiel ist <span class="regex">[abc]</span> ein Zeichen, das entweder a, b oder c ist. Mit einem Bindestrich kann ein Bereich definiert werden, z.B. ist <span class="regex">[a-z]</span> ein Zeichen von a bis z. Listen und Bereiche können kombiniert werden, z.B. ist <span class="regex">[a-zA-Z0-9_]</span> ein Zeichen, das alphanumerisch oder ein Unterstrich ist.</p>
	    <p>Nach einer Zeichenklasse kann <strong>*</strong>, <strong>?</strong>, <strong>+</strong> oder <strong>{min,max}</strong> folgen. Zum Beispiel findet <span class="regex">[0-9]+</span> 1 oder mehr Vorkommen einer beliebigen Ziffer, wie z.B. in xyz<span class="subj">123</span>, aber nicht in abcxyz.</p>
        <p>Vordefinierte Zeichenbereiche (POSIX) in Form von <strong>[[:xxx:]]</strong> werden ebenfalls unterstützt, wobei xxx eines der folgenden Wörter ist: alnum, alpha, ascii (0-127), blank (Leer- oder Tabulatorzeichen), cntrl (Steuerzeichen), digit (0-9), xdigit (Hexadezimalziffern), print, graph (print ohne space), punct, lower, upper, space (Leerraumzeichen), word (äquivalent zu <a href="#word">\w</a>).</p>
        <p>Innerhalb einer Zeichenklasse müssen die Zeichen nicht mit einem Escapezeichen versehen werden, es sei denn, sie haben eine spezielle Funktion innerhalb einer Klasse, z.B. <span class="regex">[\^a]</span>, <span class="regex">[a\-b]</span>, <span class="regex">[a\]]</span> und <span class="regex">[\\a]</span>.</p></td>
  </tr>
	<tr>
	  <td class="center bold">[^...]</td>
	  <td>Der Platzhalter für ein Zeichen, das <strong>nicht</strong> in der Klasse ist. Zum Beispiel findet <span class="regex">[^/]*</span> 0 oder mehr Vorkommen eines Zeichens, das <em>kein</em> Schrägstrich ist, z.B. <span class="subj">http:</span>//. Ebenso findet <span class="regex">[^0-9xyz]</span> ein Zeichen, das weder eine Ziffer noch der Buchstabe x, y oder z ist.</td>
  </tr>
	<tr>
	  <td class="center bold">\d</td>
	  <td>Der Platzhalter für eine Ziffer (entspricht der Klasse <span class="regex">[0-9]</span>). Großes <strong>\D</strong> hingegen ist der Platzhalter für ein Zeichen, das <em>keine</em> Ziffer ist. Dieser und die beiden unteren Platzhalter können innerhalb einer <a href="#class">Klasse</a> verwendet werden, z.B. ist <span class="regex">[\d.-]</span> eine Ziffer, ein Punkt oder ein Minuszeichen.</td>
  </tr>
	<tr>
	  <td class="center bold">\s</td>
	  <td>Der Platzhalter für ein Leerraumzeichen, z.B. Leerzeichen, Tabulator, Wagenrücklauf (`r) und Zeilenvorschub (`n). Großes <strong>\S</strong> hingegen ist der Platzhalter für ein Zeichen, das <em>kein</em> Leerraumzeichen ist.</td>
  </tr>
	<tr id="word">
	  <td class="center bold">\w</td>
	  <td>Der Platzhalter für ein Zeichen, das alphanumerisch oder ein Unterstrich ist. Entspricht der Klasse <span class="regex">[a-zA-Z0-9_]</span>. Großes <strong>\W</strong> hingegen ist der Platzhalter für ein Zeichen, das <em>kein</em> alphanumerisches Zeichen oder Unterstrich ist.</td>
  </tr>
	<tr id="anchor">
	  <td class="center bold">^<br>$</td>
	  <td><p>Zirkumflex (^) und Dollarzeichen ($) werden <em>Anker</em> genannt und verbrauchen keine Zeichen; stattdessen verankern sie das Suchmuster am Anfang oder Ende der zu durchsuchenden Zeichenkette.</p>
	    <p><strong>^</strong> wird in der Regel am Anfang eines Suchmusters angegeben, damit die Übereinstimmung ganz am Anfang einer Zeile gefunden wird. Zum Beispiel findet <span class="regex">^abc</span> eine Übereinstimmung in <span class="subj">abc</span>123, aber nicht in 123abc.</p>
	    <p><strong>$</strong> wird in der Regel am Ende eines Suchmusters angegeben, damit die Übereinstimmung ganz am Ende einer Zeile gefunden wird. Zum Beispiel findet <span class="regex">abc$</span> eine Übereinstimmung in 123<span class="subj">abc</span>, aber nicht in abc123.</p>
      <p>Beide Anker können zusammen verwendet werden. Zum Beispiel findet <span class="regex">^abc$</span> eine Übereinstimmung in <span class="subj">abc</span>, aber nicht in 123abc oder abc123.</p>
      <p>Wenn der zu durchsuchende Text mehrere Zeilen enthält, kann die <a href="#Multiline">"m"-Option</a> verwendet werden, um die Anker pro Zeile wirken zu lassen, nicht für den gesamten Text. Zum Beispiel findet <span class="regex">m)^abc$</span> eine Übereinstimmung in 123`r`n<span class="subj">abc</span>`r`n789. Ohne die "m"-Option wäre dies nicht der Fall.</p></td>
  </tr>
	<tr>
	  <td class="center bold">\b</td>
	  <td><strong>\b</strong> steht für "word boundary" (dt. Wortgrenze) und fungiert wie ein Anker, da es keine Zeichen verbraucht. Es setzt voraus, dass der Status des aktuellen Zeichens als <a href="#word">Wortzeichen (\w)</a> das Gegenteil des Status des vorherigen Zeichens ist. Es wird in der Regel verwendet, um zu verhindern, dass das gesuchte Wort in einem anderen Wort gefunden wird. Zum Beispiel wird <span class="regex">\bcat\b</span> nicht in catfish gefunden, aber in <span class="subj">cat</span>, unabhängig davon, welches Satz- oder Leerraumzeichen es umgibt. Großes <strong>\B</strong> bewirkt genau das Gegenteil: Es erfordert, dass das aktuelle Zeichen <em>nicht</em> an einer Wortgrenze steht.</td>
  </tr>
	<tr>
	  <td class="center bold">|</td>
	  <td>Der senkrechte Strich trennt zwei oder mehr Alternativen. Eine Übereinstimmung liegt vor, wenn <em>eine</em> der Alternativen zutrifft. Zum Beispiel findet <span class="regex">gray|grey</span> eine Übereinstimmung sowohl in <span class="subj">gray</span> als auch in <span class="subj">grey</span>. Das Muster <span class="regex">gr(a|e)y</span> hat eine ähnliche Wirkung mithilfe der unten beschriebenen Klammern.</td>
  </tr>
	<tr id="subpat">
	  <td class="center bold">(...)</td>
	  <td><p>Eingeklammerte Elemente werden häufig für folgende Zwecke verwendet:</p>
	    <ul>
	      <li>Die Reihenfolge der Auswertung festlegen. Zum Beispiel findet <span class="regex">(Sun|Mon|Tues|Wednes|Thurs|Fri|Satur)day</span> den englischen Namen jedes Tages.</li>
	      <li><strong>*</strong>, <strong>?</strong>, <strong>+</strong> oder <strong>{min,max}</strong> auf <em>mehrere</em> Zeichen anwenden, nicht nur auf eines. Zum Beispiel findet <span class="regex">(abc)+</span> 1 oder mehr Vorkommen der Zeichenkette "abc", wie z.B. in <span class="subj">abcabc</span>123, aber nicht in ab123 oder bc123.</li>
          <li id="capture">Ein Teilsuchmuster erfassen, wie den Punkt-Stern-Platzhalter in <span class="regex">abc<span class="red">(.*)</span>xyz</span>. Zum Beispiel speichert <a href="../lib/RegExMatch.htm">RegExMatch()</a> jede Teilzeichenkette, die mit einem Teilsuchmuster übereinstimmt, in das <a href="../lib/RegExMatch.htm#Array">Ausgabe-Array</a>. In ähnlicher Weise erlaubt <a href="../lib/RegExReplace.htm">RegExReplace()</a>, jede Teilzeichenkette, die mit einem Teilsuchmuster übereinstimmt, über <a href="../lib/RegExReplace.htm#BackRef">Rückreferenzen</a> wie $1 wieder in das Ergebnis einzufügen. Um die Klammern ohne den Nebeneffekt der Erfassung eines Teilsuchmusters zu verwenden, geben Sie <strong>?:</strong> für die ersten beiden Zeichen innerhalb der Klammern an, z.B. <span class="regex">(<span class="red">?:</span>.*)</span></li>
	      <li><a href="#Options">Optionen</a> spontan ändern. Zum Beispiel aktiviert <span class="regex">(?im)</span> die Optionen "nicht-Groß-/Kleinschreibung-sensitiv" und "mehrzeilig" für den restlichen Teil des Suchmusters (oder Teilsuchmusters). <span class="regex">(?-im)</span> hingegen deaktiviert beide Optionen. Es werden alle Optionen außer DPS`r`n`a unterstützt.</li>
	    </ul></td>
  </tr>
	<tr>
	  <td class="center bold">\t<br>\r<br>usw.</td>
	  <td><p>Diese Escapesequenzen repräsentieren Sonderzeichen. Die gebräuchlichsten sind <strong>\t</strong> (Tabulator), <strong>\r</strong> (Wagenrücklauf) und <strong>\n</strong> (Zeilenvorschub). In AutoHotkey kann in solchen Fällen optional ein Akzent (`) anstelle des umgekehrten Schrägstrichs verwendet werden. Escapesequenzen in Form von <strong>\xhh</strong> werden ebenfalls unterstützt, wobei <em>hh</em> der Hexadezimalcode eines ANSI-Zeichens zwischen 00 und FF ist.</p>
      <p><span class="ver">[v1.0.46.06+]</span>: <strong>\R</strong> steht für "ein Zeilenumbruch beliebiger Art", namentlich solche, die bei der <a href="#NEWLINE_ANY">`a-Option</a> aufgelistet sind (innerhalb einer <a href="#class">Zeichenklasse</a> wird \R einfach wie ein normales "R" behandelt). <span class="ver">[v1.0.47.05+]</span>: Um \R auf Wagenrücklauf (CR), Zeilenvorschub (LF) und Wagenrücklauf-Zeilenvorschub-Paar (CRLF) zu beschränken, geben Sie (*BSR_ANYCRLF) in Großbuchstaben am Anfang eines Suchmusters (nach den Optionen) an, z.B. <span class="regex">im)(*BSR_ANYCRLF)abc\Rxyz</span></p></td>
  </tr>
  <tr id="slashP">
    <td class="center bold">\p{xx}<br>\P{xx}<br>\X</td>
    <td><p><span class="ver">[AHK_L 61+]</span>: Unicode-Eigenschaften. Funktioniert nicht in ANSI-Builds. <strong>\p{xx}</strong> findet ein Zeichen mit der xx-Eigenschaft, während <strong>\P{xx}</strong> ein beliebiges Zeichen <i>ohne</i> die xx-Eigenschaft findet. Zum Beispiel findet <span class="regex">\pL</span> einen Buchstaben und <span class="regex">\p{Lu}</span> einen Großbuchstaben. <strong>\X</strong> findet eine beliebige Anzahl von Zeichen, die eine erweiterte Unicode-Sequenz bilden.</p>
    <p>Eine vollständige Liste aller unterstützten Eigenschaftsnamen und weitere Einzelheiten finden Sie unter <a href="http://www.pcre.org/pcre.txt">www.pcre.org/pcre.txt</a> mit Suchbegriffen wie "\p{xx}".</p></td>
  </tr>
  <tr id="UCP">
    <td class="center bold">(*UCP)</td>
    <td><p><span class="ver">[AHK_L 61+]</span>: Aus Performanzgründen erkennen \d, \D, \s, \S, \w, \W, \b und \B standardmäßig nur ASCII-Zeichen, selbst in Unicode-Builds. Wenn das Suchmuster mit <strong>(*UCP)</strong> beginnt, werden Unicode-Eigenschaften zum Finden von Zeichen verwendet. So zum Beispiel wäre \w dann äquivalent zu <span class="regex">[\p{L}\p{N}_]</span> und \d äquivalent zu <span class="regex">\p{Nd}</span>.</p>
    </td>
  </tr>
</table>
<p><strong>Greed (Gier):</strong> Standardmäßig versuchen die Quantoren <strong>*</strong>, <strong>?</strong>, <strong>+</strong> und <strong>{min,max}</strong>, <em>so viele Zeichen wie möglich</em> einzubeziehen, um eine Übereinstimmung zu finden. Um dieses Verhalten auf <em>so wenig Zeichen wie möglich</em> zu begrenzen, fügen Sie nach den Quantoren ein Fragezeichen an. Zum Beispiel bedeutet das Suchmuster <span class="regex">&lt;.+&gt;</span> (das kein Fragezeichen enthält): "Suche nach einem &lt;, gefolgt von 1 oder mehr Zeichen, gefolgt von einem &gt;". Um zu verhindern, dass das Suchmuster die <em>komplette</em> Zeichenkette <span class="subj"><span class="red"><strong>&lt;</strong></span>em&gt;text&lt;/em<span class="red"><strong>&gt;</strong></span></span> findet, fügen Sie nach dem Pluszeichen ein Fragezeichen an: <span class="regex">&lt;.+<span class="red">?</span>&gt;</span>. Dies führt dazu, dass die Übereinstimmung bereits beim ersten '&gt;' endet und dementsprechend nur der erste HTML-Tag <span class="subj"><span class="red"><strong>&lt;</strong></span>em<span class="red"><strong>&gt;</strong></span></span> gefunden wird.</p>
<p><strong>Vorausschauende und zurückschauende Behauptungen:</strong> Die Gruppen <span class="regex">(?=...)</span>, <span class="regex">(?!...)</span>, <span class="regex">(?&lt;=...)</span> und <span class="regex">(?&lt;!...)</span> werden <em>Behauptungen</em> genannt und verlangen, dass eine Bedingung erfüllt sein muss. Sie verbrauchen keine Zeichen. Zum Beispiel ist <span class="regex">abc(?=.*xyz)</span> eine vorausschauende Behauptung, die verlangt, dass die Zeichenkette xyz irgendwo rechts von der Zeichenkette abc vorkommen muss (wenn sie dort nicht ist, gilt das gesamte Suchmuster als keine Übereinstimmung). <span class="regex">(?=...)</span> ist eine <em>positive</em> vorausschauende Behauptung, da sie verlangt, dass ein bestimmtes Suchmuster existieren muss. <span class="regex">(?!...)</span> hingegen ist eine <em>negative</em> vorausschauende Behauptung, da sie verlangt, dass ein bestimmtes Suchmuster <em>fehlen</em> muss. <span class="regex">(?&lt;=...)</span> und <span class="regex">(?&lt;!...)</span> sind positive bzw. negative <em>zurückschauende</em> Behauptungen, da sie nach <em>links</em> und nicht nach rechts von der aktuellen Position aus schauen. Zurückschauende Behauptungen unterliegen mehr Einschränkungen als vorausschauende Behauptungen, da sie keine Quantoren mit variierbarer Größe wie <strong>*</strong>, <strong>?</strong> und <strong>+</strong> unterstützen. Die Escapesequenz <strong>\K</strong> ähnelt einer zurückschauenden Behauptung, da sie bewirkt, dass alle zuvor gefundenen Zeichen in der final gefundenen Zeichenkette weggelassen werden. Zum Beispiel findet <span class="regex">foo\Kbar</span> "foobar", aber meldet, dass es "bar" gefunden hat.</p>
<p><strong>Siehe auch:</strong> <a href="../lib/RegExMatch.htm">RegExMatch()</a>, <a href="../lib/RegExReplace.htm">RegExReplace()</a> und <a href="../lib/SetTitleMatchMode.htm">SetTitleMatchMode</a>.</p>
<p class="note"><strong>Abschließende Bemerkung:</strong> Beachten Sie, dass diese Seite nur RegEx-Features umfasst, die häufig zum Einsatz kommen. Andere Features wie z.B. bedingte Teilsuchmuster fehlen gänzlich. Die komplette PCRE-Bedienungsanleitung finden Sie unter <a href="http://www.pcre.org/pcre.txt">www.pcre.org/pcre.txt</a> (englisch).</p>

</body>
</html>
