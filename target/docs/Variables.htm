<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Variablen und Ausdrücke - Definition &amp; Verwendung | AutoHotkey v1</title>
<meta name="description" content="Erfahren Sie mehr über Variablen, Ausdrücke, Operatoren, interne Variablen und Kapazität und Speicher von Variablen." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>

<body>
<h1>Variablen und Ausdrücke</h1>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Intro">Variablen</a></li>
  <li><a href="#Expressions">Ausdrücke (Expressions)</a></li>
  <li><a href="#Operators">Operatoren in Ausdrücken</a></li>
  <li><a href="#BuiltIn">Interne Variablen</a></li>
  <li><a href="#cap">Kapazität und Speicher von Variablen</a></li>
</ul>
<span id="Variables"></span><h2 id="Intro">Variablen</h2>
<p>Eine allgemeine Erklärung und Details zur Funktionsweise finden Sie unter <a href="Concepts.htm#variables">Variablen</a>.</p>
<p id="assigning"><strong>Werte in Variablen speichern:</strong> Um eine Zeichenkette oder Zahl in eine Variable zu speichern, gibt es zwei Methoden: <a href="Language.htm#legacy-syntax">Legacy</a> und <a href="Language.htm#expressions">Ausdruck</a>. Die Legacy-Methode verwendet den <a href="lib/SetEnv.htm">Gleichheitszeichenoperator (=)</a>, um <a href="Language.htm#unquoted-text"><strong>anführungszeichenlose</strong> direkt geschriebene Zeichenketten</a> und in Prozentzeichen gesetzte Variablen zuzuweisen. Zum Beispiel:</p>
<pre>MeineZahl = 123
MeineZkette = Dies ist eine direkt geschriebene Zeichenkette.
KopieVonVar = %Var%  <em>; Beim Operator "=" sind Prozentzeichen erforderlich, um den Inhalt einer Variable abzurufen.</em></pre>
<p>Die Ausdrucksmethode hingegen verwendet den <a href="lib/SetExpression.htm">Doppelpunkt-Gleich-Operator (:=)</a>, um Zahlen, <a href="Language.htm#strings"><strong>in Anführungszeichen gesetzte</strong> Zeichenketten</a> und andere Arten von <a href="Language.htm#expressions">Ausdrücken</a> zuzuweisen. Die folgenden Beispiele sind funktionsgleich mit den vorherigen Beispielen:</p>
<pre>MeineZahl := 123
MeineZkette := "Dies ist eine direkt geschriebene Zeichenkette."
KopieVonVar := Var  <em>; Beim Operator ":=" werden keine Prozentzeichen verwendet.</em></pre>
<p>Die letztere Methode wird von vielen bevorzugt, da sie eine <a href="Language.htm#expressions">Ausdruckssyntax</a> unterstützt, die leichter zu verstehen ist und der Syntax vieler anderer Sprachen sehr ähnlich ist.</p>
<p>Diese Methoden können natürlich auch verwendet werden, um den Inhalt einer Variable zu löschen (um sie sozusagen leer zu machen):</p>
<pre>MeineVar =
MeineVar := ""</pre>
<p>Das obige leere Anführungszeichenpaar sollte nur mit dem Doppelpunkt-Gleich-Operator (:=) verwendet werden. Die Verwendung des Gleich-Operators (=) würde dazu führen, dass zwei Anführungszeichen in die Variable geschrieben werden.</p>
<p id="retrieving"><strong>Inhalte von Variablen abrufen:</strong> Analog zu den beiden Methoden zum Speichern von Werten gibt es auch zwei Methoden zum Abrufen von Werten: <a href="Language.htm#legacy-syntax">Legacy</a> und <a href="Language.htm#variables">Ausdruck</a>. Bei der Legacy-Methode müssen die Namen der Variablen in Prozentzeichen gesetzt werden, um ihren Inhalt abzurufen. Zum Beispiel:</p>
<pre><a href="lib/MsgBox.htm">MsgBox</a> Der Wert in der Variable namens Var ist %Var%.
KopieVonVar = %Var%</pre>
<p>Bei der Ausdrucksmethode hingegen werden die Prozentzeichen neben den Variablennamen weggelassen, aber <a href="Language.htm#strings">direkt geschriebene Zeichenketten</a> in Anführungszeichen gesetzt. Demnach wären die folgenden Beispiele funktionsgleich mit den vorherigen Beispielen:</p>
<pre>MsgBox % "Der Wert in der Variable namens Var ist " . Var . "."  <em>; Mit einem Punkt können zwei Zeichenketten verkettet (verbunden) werden.</em>
KopieVonVar := Var</pre>
<p>In der obigen MsgBox-Zeile wird ein <a href="Language.htm#-expression">Prozent- und Leerzeichen</a> verwendet, um den Parameter vom Legacy- in den Ausdrucksmodus zu ändern. Dies ist notwendig, da fast alle Befehlsparameter standardmäßig die Legacy-Methode verwenden, sofern nicht anders dokumentiert.</p>
<p><strong>Variablen vergleichen:</strong> Bitte lesen Sie sich den folgenden Abschnitt durch, um zu erfahren, welche Vergleiche es gibt und wann runde Klammern erforderlich sind.</p>

<h2 id="Expressions">Ausdrücke (Expressions)</h2>
<p class="note">Eine strukturierte Übersicht und zusätzliche Erklärungen finden Sie unter <a href="Language.htm#expressions">Ausdrücke (Expressions)</a>.</p>
<p>Ausdrücke werden verwendet, um eine oder mehrere Operationen auf eine Reihe von Variablen, direkt geschriebenen Zeichenketten und/oder direkt geschriebenen Zahlen anzuwenden.</p>
<p>Variablennamen (außer <a href="misc/Arrays.htm#pseudo">Pseudo-Arrays</a> und andere <a href="#ref">Doppelreferenzen</a>) dürfen innerhalb eines Ausdrucks nicht in Prozentzeichen gesetzt werden. Folglich müssen direkt geschriebene Zeichenketten in doppelte Anführungszeichen gesetzt werden, um sie von Variablen zu unterscheiden. Zum Beispiel:</p>
<pre>if (AktuelleEinstellung &gt; 100 or GefundeneFarbe != "Blau")
    MsgBox Die Einstellung ist zu hoch oder die Farbe ist falsch.</pre>
<p>Im obigen Beispiel ist "Blau" in Anführungszeichen gesetzt, da es sich um eine direkt geschriebene Zeichenkette handelt. Geben Sie zwei aufeinanderfolgende Anführungszeichen an, um ein <em>tatsächliches</em> Anführungszeichen in eine direkt geschriebene Zeichenkette einzufügen. Zum Beispiel: <code>"Sie sagte: <span class="red">""</span>Ein Apfel täglich.<span class="red">""</span>"</code>.</p>
<p class="warning"><strong>Hinweis:</strong> Es gibt verschiedene Arten von <a href="Language.htm#if-statement">If-Anweisungen</a>, die wie Ausdrücke aussehen, aber keine sind.</p>
<p><strong>Leere Zeichenketten:</strong> Um eine leere Zeichenkette in einem Ausdruck anzugeben, verwenden Sie ein leeres Anführungszeichenpaar. Zum Beispiel wäre die Anweisung <code>if (MeineVar != "")</code> wahr, wenn <em>MeineVar</em> nicht leer ist. Verwendet man aber ein leeres Anführungszeichenpaar bei einem <a href="lib/IfEqual.htm">Legacy-If</a>, wird es als direkt geschriebener Text behandelt. Zum Beispiel wäre die Anweisung <code>if MeineVar = ""</code> nur wahr, wenn <em>MeineVar</em> ein tatsächliches Anführungszeichenpaar enthält. Verwenden Sie stattdessen bei einem Legacy-If den Operator = oder != mit nichts auf der rechten Seite, um zu prüfen, ob eine Variable leer ist, z.B. <code>if Var =</code>.</p>
<p>Beachten Sie, dass ungültige Ausdrücke wie <code>(x +* 3)</code> immer eine leere Zeichenkette zurückgeben.</p>
<p><strong>Ergebnis eines Ausdrucks speichern:</strong> Um einer Variable das Ergebnis eines Ausdrucks zuzuweisen, verwenden Sie den <a href="lib/SetExpression.htm">Doppelpunkt-Gleich-Operator (:=)</a>. Zum Beispiel:</p>
<pre>NettoPreis := Preis * (1 - Rabatt/100)</pre>
<p id="Boolean"><strong>Boolesche Werte:</strong> In Fällen, wo die Auswertung eines Ausdrucks entweder True (wahr) oder False (falsch) ergeben muss (z.B. bei einer IF-Anweisung), wird eine leere Zeichenkette oder 0 als False und alle anderen Ergebnisse als True angesehen. Zum Beispiel wäre die Anweisung <code>if ElementeAnzahl</code> nur dann False, wenn ElementeAnzahl leer oder 0 ist. Der Ausdruck <code>if not ElementeAnzahl</code> würde das gegenteilige Ergebnis liefern.</p>
<p>Operatoren wie NOT/AND/OR/&gt;/=/&lt; erzeugen automatisch einen True- oder False-Wert: 1 für True und 0 für False. Im folgenden Beispiel wird 1 in die <em>Done</em>-Variable gespeichert, wenn eine der beiden Bedingungen True ist:</p>
<pre>Done := A_Index &gt; 5 or FoundIt</pre>
<p>Wie oben angedeutet, kann eine Variable zum Speichern eines False-Wertes verwendet werden, indem sie einfach leer gemacht oder ihr 0 zugewiesen wird. Verwenden Sie dann die Kurzanweisung <code>if Done</code>, um zu prüfen, ob die Done-Variable True oder False ist.</p>
<p><span id="True"></span><span id="False"></span>Die Wörter <em>True</em> und <em>False</em> sind interne Variablen, die 1 bzw. 0 enthalten. Diese können verwendet werden, um die Lesbarkeit eines Skripts zu verbessern. Zum Beispiel:</p>
<pre>GroßKleinSensitiv := false
SucheFortsetzen := true</pre>
<p><strong>Integer (ganze Zahlen) und Floating-Point-Zahlen (Gleitkommazahlen):</strong> Innerhalb eines Ausdrucks werden Zahlen, die einen Dezimalpunkt enthalten, als Floating-Point-Zahlen behandelt, andernfalls sind sie Integer. Für die meisten Operatoren wie Addition und Multiplikation gilt: Wenn einer der Eingabewerte eine Floating-Point-Zahl ist, ist auch das Ergebnis eine Floating-Point-Zahl.</p>
<p>Innerhalb und außerhalb von Ausdrücken können Integer sowohl im hexadezimalen als auch dezimalen Format geschrieben werden. Hexadezimalzahlen beginnen mit dem 0x-Präfix. Zum Beispiel ist <code>Sleep 0xFF</code> äquivalent zu <code>Sleep 255</code>. <span class="ver">[v1.0.46.11+]</span>: Floating-Point-Zahlen in wissenschaftlicher Schreibweise werden erkannt, aber nur, wenn sie einen Dezimalpunkt enthalten (z.B. <code>1.0e4</code> und <code>-2.1E-4</code>).</p>
<p id="percent-space"><strong>Ausdruck erzwingen:</strong> Obwohl Befehlsparameter (außer AusgabeVar) standardmäßig keine Ausdrücke unterstützen, kann ein Ausdruck erzwungen werden, indem ein Prozentzeichen gefolgt von einem Leer- oder Tabulatorzeichen vorangestellt wird. In <span class="ver">[v1.1.21+]</span> kann dieses Präfix im EingabeVar-Parameter eines Befehls verwendet werden, außer bei einem Legacy-If-Befehl (verwenden Sie stattdessen eine <a href="lib/IfExpression.htm">Ausdruck-If-Anweisung</a>). Diese Technik wird häufig verwendet, um auf <a href="misc/Arrays.htm">Arrays</a> zuzugreifen. Zum Beispiel:</p>
<pre><a href="lib/FileAppend.htm">FileAppend</a>, % MeinArray[i], Meine Datei.txt
<a href="lib/FileAppend.htm">FileAppend</a>, % MeinPseudoArray%i%, Meine Datei.txt
<a href="lib/MsgBox.htm">MsgBox</a> % "Die MeineVar-Variable enthält " . MeineVar . "."
<a href="lib/Loop.htm">Loop</a> % Wiederholungen + 1
<a href="lib/WinSet.htm">WinSet</a>, Transparent, % X + 100
<a href="lib/Control.htm">Control</a>, Choose, % AktuelleAuswahl - 1</pre>

<h2 id="Operators">Operatoren in Ausdrücken</h2>
<p class="note">Allgemeine Informationen zu Operatoren finden Sie unter <a href="Language.htm#operators">Operatoren</a>.</p>
<p>Sofern nicht anders unten angegeben, werden leere Werte (leere Zeichenketten) oder nicht-numerische Werte innerhalb einer mathematischen Operation <strong>nicht</strong> als 0 interpretiert. Stattdessen werden sie als Fehler behandelt, was dazu führt, dass die Auswertung dieses Teils des Ausdrucks eine leere Zeichenkette ergibt. Wenn z.B. die Variable X leer ist, gibt der Ausdruck X+1 einen leeren Wert statt 1 zurück.</p>
<p>Aus historischen Gründen werden <em>in Anführungszeichen gesetzte</em> numerische Zeichenketten wie <code>"123"</code> immer als nicht-numerisch angesehen, wenn sie direkt in einem Ausdruck verwendet werden (aber nicht, wenn sie in eine Variable gespeichert oder von einer Funktion zurückgegeben werden). Dieses nicht-numerische Attribut kann durch eine <a href="#concat">Verkettung</a> erzwungen werden, so dass Ausdrücke wie <code>"0x" n</code> einen nicht-numerischen Wert erzeugen (auch wenn n gültige hexadezimale Ziffern enthält). Dieses Problem kann umgangen werden, indem der Wert einer Variable zugewiesen oder über eine Funktion wie z.B. <a href="Functions.htm#Round">Round()</a> übergeben wird. Generell sollte vermieden werden, direkt geschriebene Zahlen in Anführungszeichen zu setzen, da sich dieses Verhalten in einer zukünftigen Version ändern könnte.</p>

<h3 id="operators">Ausdrucksoperatoren (absteigende Priorität)</h3>
<table class="info">
  <tr>
    <th class="center">Operator</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="ref">
    <td class="center bold">%Var%</td>
    <td><p>Wenn eine Variable in einem Ausdruck mit Prozentzeichen umschlossen ist (z.B. %Var%), wird der gesamte <u>Inhalt</u> dieser Variable als Name oder Teil des Namens einer anderen Variable vermutet (wenn diese Variable nicht existiert, wird %Var% in eine leere Zeichenkette aufgelöst). Meistens wird dies verwendet, um Elemente eines <a href="misc/Arrays.htm#pseudo">Pseudo-Arrays</a> zu referenzieren, zum Beispiel:</p>
      <pre>Var := MeinArray%A_Index% + 100</pre>
      <p>Aus Gründen der Abwärtskompatibilität ignorieren Befehlsparameter, die als "kann ein Ausdruck sein" dokumentiert sind, die Prozentzeichen bei einem alleinstehenden Namen in Prozentzeichen (z.B. %Var%, aber nicht Array%i%). Um das zu umgehen, umschließen Sie die Referenz mit runden Klammern, z.B. <code>Sleep (%Var%)</code>.</p>
      <p><span class="ver">[AHK_L 52+]</span>: Zusätzlich zu den normalen Variablen kann %Var% in eine <a href="Concepts.htm#environment-variables">Umgebungsvariable</a>, die Zwischenablage oder eine <a href="#BuiltIn">reservierte/schreibgeschützte Variable</a> aufgelöst werden. Vor Revision 52 wurde %Var% in solchen Fällen in eine leere Zeichenkette aufgelöst.</p></td>
  </tr>
  <tr>
    <td class="center bold">x.y</td>
    <td><span class="ver">[AHK_L 31+]</span>: <strong>Objektzugriff</strong>. Abrufen (Get), Setzen (Set) oder Aufrufen (Call) einer Methode des Objekts <i>x</i>, wobei <i>y</i> ein direkt geschriebener Wert ist. Siehe <a href="Objects.htm#Usage_Objects">Objektsyntax</a>.</td>
  </tr>
  <tr id="new">
    <td class="center bold">new</td>
    <td><span class="ver">[v1.1.00+]</span>: Erstellt ein neues Objekt, das von einem anderen Objekt abgeleitet ist. Zum Beispiel ist <code>x := new y</code> oft äquivalent zu <code>x := {base: y}</code>. Nach dem Wort <code>new</code> sollte eine Variable oder ein einfacher Klassenname in Form von <code>GlobaleKlasse.VerschachtelteKlasse</code> angegeben werden, optional auch Parameter wie in <code>x := new y(z)</code> (wobei <code>y</code> eine Variable ist, kein Funktionsname). Weitere Informationen finden Sie unter <a href="Objects.htm#Custom_Objects">Benutzerdefinierte Objekte</a>.</td>
  </tr>
  <tr id="IncDec">
    <td class="center bold">++<br>
    --</td>
    <td><strong>Vorherige und nachherige Inkrementierung/Dekrementierung</strong>. Erhöht oder verringert eine numerische Variable um 1 (in den Versionen vor 1.0.46 müssen diese allein in einer Zeile stehen; es dürfen keine anderen Operatoren vorhanden sein). Der Operator kann entweder vor oder hinter dem Namen der Variable stehen. Wenn der Operator <em>vor</em> dem Namen steht, wird die Operation sofort ausgeführt und das Ergebnis wird von der nächsten Operation verwendet. Zum Beispiel bewirkt <code>Var := ++X</code>, dass X sofort um 1 erhöht und der Wert in <em>Var</em> gespeichert wird. Wenn der Operator hingegen <em>hinter</em> dem Namen einer Variable steht, wird die Operation erst ausgeführt, <em>nachdem</em> die Variable von der nächsten Operation verwendet wurde. Zum Beispiel bewirkt <code>Var := X++</code>, dass X erst um 1 erhöht wird, nachdem der aktuelle Wert von X in <em>Var</em> gespeichert wurde. Aus Gründen der Abwärtskompatibilität behandeln diese Operatoren leere Variablen als 0, wenn sie allein in einer Zeile stehen. Zum Beispiel erzeugen sowohl <code>y := 1, ++x</code> als auch <code>MsgBox % ++x</code> ein leeres Ergebnis, wenn x leer ist.</td>
  </tr>
  <tr id="pow">
    <td class="center bold">**</td>
    <td>
      <p><strong>Potenz</strong>. Anwendungsbeispiel: <code>Basis**Exponent</code>. Sowohl <em>Basis</em> als auch <em>Exponent</em> können einen Dezimalpunkt enthalten. Wenn <em>Exponent</em> negativ ist, wird das Ergebnis in eine Floating-Point-Zahl umgewandelt, auch dann, wenn <em>Basis</em> und <em>Exponent</em> Integer sind. Da dieser Operator eine höhere Priorität als ein unäres Minuszeichen hat, wird <code>-2**2</code> wie <code>-(2**2)</code> ausgewertet und somit -4 zurückgeben. Um eine direkt geschriebene negative Zahl zu potenzieren, umschließen Sie diese mit runden Klammern, z.B. <code>(-2)**2</code>.</p>
      <p class="note"><strong>Hinweis:</strong> Eine negative <em>Basis</em> mit einem gebrochenen <em>Exponenten</em> wie <code>(-2)**0.5</code> wird nicht unterstützt und gibt eine leere Zeichenkette zurück. Allerdings werden sowohl <code>(-2)**2</code> als auch <code>(-2)**2.0</code> unterstützt.</p>
      <p class="warning"><strong>Hinweis:</strong> In AutoHotkey v1 ist ** im Gegensatz zu seinem mathematischen Gegenstück linksassoziativ. Zum Beispiel wird <code>x ** y ** z</code> als <code>(x ** y) ** z</code> ausgewertet.</p>
    </td>
  </tr>
  <tr id="unary">
    <td class="center bold">-<br>
    !<br>
    ~<br>
    &amp; *</td>
    <td><p><strong>Unäres Minuszeichen (-):</strong> Obwohl dieser Operator und der Subtraktionsoperator dasselbe Symbol verwenden, wird das unäre Minuszeichen nur auf ein einzelnes Element oder einen Teilausdruck angewendet, z.B. <code><strong>-</strong>(3 / <strong>-</strong>x)</code>. Unäre Pluszeichen (+) werden in einem Ausdruck ignoriert.</p>
      <p><strong>Logisches NICHT (!):</strong> Wenn dieser Operator auf einen Operanden angewendet wird, der leer oder 0 ist, ist das Ergebnis 1 (true). Andernfalls ist das Ergebnis 0 (false). Zum Beispiel: <code>!x or !(y and z)</code>. Hinweis: Das Wort NOT ist synonym mit <strong>!</strong>, allerdings hat <strong>!</strong> eine höhere Priorität. <span class="ver">[v1.0.46+]</span>: Aufeinanderfolgende unäre Operatoren wie <code>!!Var</code> sind erlaubt, da sie von rechts nach links ausgewertet werden.</p>
      <p><strong>Bitweises NICHT (~):</strong> Dieser Operator invertiert jedes Bit seines Operanden. Wenn der Operand eine Floating-Point-Zahl ist, wird er vor der Berechnung auf Integergröße gekürzt. Wenn der Operand eine Zahl zwischen 0 und 4294967295 (0xffffffff) ist, wird er als <u>vorzeichenloser</u> 32-Bit-Wert behandelt. Andernfalls wird er als <u>vorzeichenfähiger</u> 64-Bit-Wert behandelt. Zum Beispiel wird <code>~0xf0f</code> zu 0xfffff0f0 (4294963440) ausgewertet.</p>
      <p id="amp"><strong>Adresse (&amp;):</strong> <code>&amp;MeineVar</code> ruft die Adresse des Inhalts von <em>MeineVar</em> im Speicher ab, was häufig für <a href="lib/DllCall.htm#struct">DllCall-Strukturen</a> verwendet wird. <code>&amp;MeineVar</code> deaktiviert außerdem das Caching von Binärzahlen in dieser Variable, was sich negativ auf ihre Performanz auswirken kann, wenn sie Teil einer Berechnung oder eines numerischen Vergleichs ist. Sobald sich die Adresse einer Variable ändert, wird das Caching wieder aktiviert (z.B. via <a href="lib/VarSetCapacity.htm">VarSetCapacity()</a>).</p>
      <p><strong>Dereferenz (*):</strong> <code>*Ausdruck</code> geht davon aus, dass <code>Ausdruck</code> eine numerische Speicheradresse ist; es ruft das Byte an dieser Adresse als Zahl zwischen 0 und 255 ab (0 wird immer abgerufen, wenn die Adresse 0 ist; andere ungültige Adressen sollten jedoch vermieden werden, da sie das Skript zum Absturz bringen können). Beachten Sie, dass <a href="lib/NumGet.htm">NumGet()</a> in der Regel viel performanter ist, wenn es darum geht, Binärzahlen abzurufen.</p></td>
  </tr>
  <tr id="MulDiv">
    <td class="center bold">*<br>
    /<br>
    //
    </td>
    <td><p><strong>Multiplikation (*):</strong> Das Ergebnis ist ein Integer, wenn beide Eingabewerte Integer sind, andernfalls ist es eine Floating-Point-Zahl.</p>
      <p id="divide"><strong>Echte Division (/):</strong> Im Gegensatz zu <a href="lib/EnvDiv.htm">EnvDiv</a> liefert die echte Division immer eine Floating-Point-Zahl, auch dann, wenn beide Eingabewerte Integer sind. Zum Beispiel ergibt <code>3/2</code> 1.5 statt 1 und <code>4/2</code> 2.0 statt 2.</p>
      <p id="FloorDivide"><strong>Floor-Division (//):</strong> Der Doppelschrägstrich-Operator verwendet eine hochperformante Integer-Division, wenn beide Eingabewerte Integer sind. Zum Beispiel ergibt <code>5//3</code> 1 und <code>5//-3</code> -1. Wenn einer der beiden Eingabewerte eine Floating-Point-Zahl ist, wird eine Floating-Point-Division durchgeführt und das Ergebnis auf den am nächsten links befindlichen Integer gekürzt. Zum Beispiel ergibt <code>5//3.0</code> 1.0 und <code>5.0//-3</code> -2.0. Obwohl das Ergebnis dieser Floating-Point-Division ein Integer ist, wird es im Floating-Point-Format gespeichert, so dass es von anderen Operationen als solches gesehen wird. Um stattdessen eine Division mit Rest (Modulo) durchzuführen, siehe <a href="lib/Math.htm#Mod">Mod()</a>.</p>
    <p>Die <a href="#AssignOp">Operatoren *= und /=</a> sind Kurzschreibweisen zum Multiplizieren oder Dividieren eines Variablenwerts mit einem anderen Wert. Zum Beispiel liefert <code>Var *= 2</code> dasselbe Ergebnis wie <code>Var := Var * 2</code> (obwohl Ersteres performanter ist).</p>
    <p>Eine Division durch 0 liefert ein leeres Ergebnis (leere Zeichenkette).</p></td>
  </tr>
  <tr id="AddSub">
    <td class="center bold">+<br>
    -</td>
    <td><p><strong>Addition (+)</strong> und <strong>Subtraktion (-)</strong>. Die <a href="#AssignOp">Operatoren += und -=</a> sind Kurzschreibweisen zum Erhöhen oder Verringern eines Variablenwerts um einen beliebigen Wert. Zum Beispiel liefert <code>Var += 2</code> dasselbe Ergebnis wie <code>Var := Var + 2</code> (obwohl Ersteres performanter ist). Ebenso kann eine Variable mit <a href="#IncDec">Var++, Var--, ++Var oder --Var</a> schrittweise um 1 erhöht oder verringert werden.</p>
    </td>
  </tr>
  <tr id="bitshift">
    <td class="center bold">&lt;&lt;<br>
    &gt;&gt;<br>
    &gt;&gt;&gt;</td>
    <td>
      <p><strong>Bitweise Verschiebung nach links (&lt;&lt;)</strong>. Anwendungsbeispiel: <code>Wert1 &lt;&lt; Wert2</code>. Entspricht der Multiplikation von <em>Wert1</em> mit "2 hoch <em>Wert2</em>".</p>
      <p><strong>Arithmetische bitweise Verschiebung nach rechts (&gt;&gt;)</strong>. Anwendungsbeispiel: <code>Wert1 &gt;&gt; Wert2</code>. Entspricht der Division von <em>Wert1</em> durch "2 hoch <em>Wert2</em>" und der Rundung des Ergebnisses auf den am nächsten links befindlichen Integer. Zum Beispiel ergibt <code>-3&gt;&gt;1</code> -2.</p>
      <p><strong>Logische bitweise Verschiebung nach rechts (&gt;&gt;&gt;)</strong> <span class="ver">[v1.1.35+]</span>. Anwendungsbeispiel: <code>Wert1 &gt;&gt;&gt; Wert2</code>. Im Gegensatz zur arithmetischen bitweisen Verschiebung nach rechts wird bei dieser Verschiebung das Vorzeichen der Zahl nicht beibehalten. Zum Beispiel hat -1 die gleiche Bitdarstellung wie der vorzeichenlose 64-Bit-Integer 0xffffffffffffffffff, daher ist <code>-1 &gt;&gt;&gt; 1</code> 0x7fffffffffffffffff.</p>
      <p>Bei allen drei Operatoren werden Floating-Point-Eingabewerte vor der Berechnung auf einen Integer gekürzt. Die Ergebnisse sind undefiniert, wenn <em>Wert2</em> kleiner als 0 oder größer als 63 ist.</p>
    </td>
  </tr>
  <tr id="bitwise">
    <td class="center bold">&amp;<br>
    ^<br>
    |
    </td>
    <td><strong>Bitweises UND (&amp;)</strong>, <strong>bitweises exklusives ODER (^)</strong> und <strong>bitweises ODER (|)</strong>. Von diesen drei Operatoren hat <strong>&amp;</strong> die höchste Priorität und <strong>|</strong> die niedrigste Priorität. Jeder Floating-Point-Eingabewert wird vor der Berechnung auf einen Integer gekürzt.</td>
  </tr>
  <tr id="concat">
    <td class="center bold">.</td>
    <td><p><strong>Verkettung</strong>. Ein Punkt mit mindestens einem Leer- oder Tabulatorzeichen auf beiden Seiten wird verwendet, um zwei Elemente zu einer einzelnen Zeichenkette zu kombinieren. Dasselbe kann auch ohne diesen Punkt erzielt werden (außer bei Mehrdeutigkeiten wie <code>x -y</code> oder wenn dem rechts befindlichen Element ein ++ oder -- vorangestellt ist). Wenn der Punkt weggelassen wird, muss zwischen den Elementen mindestens ein Leer- oder Tabulatorzeichen stehen.</p>
    <pre>Var := "Die Farbe ist " . GefundeneFarbe  <em>; Explizite Verkettung</em>
Var := "Die Farbe ist " GefundeneFarbe    <em>; Auto-Verkettung</em></pre>
    <p>Teilausdrücke können auch verkettet werden. Zum Beispiel: <code>Var := "Der Nettopreis ist " . Preis * (1 - Rabatt/100)</code>.</p>
    <p>Eine Zeile, die mit einem Punkt (oder einem anderen Operator) beginnt, wird automatisch mit der darüber liegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>.</p></td>
  </tr>
  <tr id="regex">
    <td class="center bold">~=</td>
    <td><span class="ver">[AHK_L 31+]</span>: Kurzschreibweise für <a href="lib/RegExMatch.htm">RegExMatch()</a>. Zum Beispiel bewirkt <code>"abc123" ~= "\d"</code>, dass ErrorLevel auf 0 gesetzt und 4 (die Position des ersten numerischen Zeichens) zurückgegeben wird. Vor <span class="ver">[v1.1.03]</span> hatte dieser Operator dieselbe Priorität wie der <em>Gleichheitsoperator (=)</em> und war unvollständig dokumentiert.</td>
  </tr>
  <tr id="compare">
    <td class="center bold">&gt;&nbsp;&nbsp;&nbsp;&lt;<br>
    &gt;= &lt;=</td>
    <td>
      <p><strong>Größer (&gt;)</strong>, <strong>kleiner (&lt;)</strong>, <strong>größer gleich (&gt;=)</strong> und <strong>kleiner gleich (&lt;=)</strong>. Wenn beide Eingabewerte <a href="Concepts.htm#numbers">Zahlen</a> oder <a href="Concepts.htm#numeric-strings">numerische Zeichenketten</a> sind, werden sie numerisch verglichen, andernfalls werden sie alphabetisch verglichen. Der Vergleich ist nur Groß-/Kleinschreibung-sensitiv, wenn <a href="lib/StringCaseSense.htm">StringCaseSense</a> eingeschaltet ist. Siehe auch: <a href="lib/Sort.htm">Sort</a></p>
      <p class="note"><strong>Hinweis:</strong> In AutoHotkey v1 wird eine in Anführungszeichen gesetzte Zeichenkette (oder das Ergebnis einer Verkettung mit einer in Anführungszeichen gesetzte Zeichenkette) nie als numerisch angesehen, wenn sie direkt in einem Ausdruck verwendet wird.</p>
    </td>
  </tr>
  <tr id="equal">
    <td class="center bold">=<br>
    ==<br>
    &lt;&gt; !=<br>
    !==</td>
    <td>
      <p><strong>Gleich (=)</strong>, <strong>Groß-/Kleinschreibung-sensitiv gleich (==)</strong> und <strong>ungleich (&lt;&gt; oder !=)</strong>. Wenn beide Eingabewerte <a href="Concepts.htm#numbers">Zahlen</a> oder <a href="Concepts.htm#numeric-strings">numerische Zeichenketten</a> sind, werden sie numerisch verglichen, andernfalls werden sie alphabetisch verglichen. Die Operatoren <strong>!=</strong> und <strong>&lt;&gt;</strong> sind funktionsgleich. Die Operatoren <strong>==</strong> und <strong>=</strong> verhalten sich gleich, wenn beide Eingabewerte numerisch sind, es sei denn, einer der Eingabewerte ist nicht numerisch, dann ist <strong>==</strong> immer Groß-/Kleinschreibung-sensitiv und <strong>=</strong> immer nicht-Groß-/Kleinschreibung-sensitiv (die Methode der Nichtsensitivität hängt von <a href="lib/StringCaseSense.htm">StringCaseSense</a> ab). Die Operatoren <strong>&lt;&gt;</strong> und <strong>!=</strong> hingegen berücksichtigen <a href="lib/StringCaseSense.htm">StringCaseSense</a>.</p>
      <p><strong>Groß-/Kleinschreibung-sensitiv ungleich (!==)</strong> <span class="ver">[v1.1.35+]</span>. Verhält sich identisch zu <strong>==</strong>, außer dass das Ergebnis invertiert wird.</p>
      <p class="note"><strong>Hinweis:</strong> In AutoHotkey v1 wird eine in Anführungszeichen gesetzte Zeichenkette (oder das Ergebnis einer Verkettung mit einer in Anführungszeichen gesetzte Zeichenkette) nie als numerisch angesehen, wenn sie direkt in einem Ausdruck verwendet wird.</p>
      <p class="warning"><strong>Veraltet:</strong> Der Operator &lt;&gt; ist nicht für neue Skripte empfohlen. Verwenden Sie stattdessen den Operator !=.</p>
    </td>
  </tr>
  <tr id="not">
    <td class="center bold">NOT</td>
    <td><strong>Logisches NICHT</strong>. Abgesehen von der niedrigeren Priorität ist dies dasselbe wie der <strong>!</strong>-Operator. Zum Beispiel ist <code>not (x = 3 or y = 3)</code> dasselbe wie <code>!(x = 3 or y = 3)</code>.</td>
  </tr>
  <tr id="and">
    <td class="center bold">AND<br>
    &amp;&amp;</td>
    <td>Beide Operatoren sind ein <strong>logisches UND</strong>. Zum Beispiel: <code>x &gt; 3 and x &lt; 10</code>. Zur Verbesserung der Performanz wird die <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a> angewendet. Eine Zeile, die mit AND/OR/&amp;&amp;/|| (oder einem anderen Operator) beginnt, wird automatisch mit der darüber liegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>.</td>
  </tr>
  <tr id="or">
    <td class="center bold">OR<br>
    ||</td>
    <td>Beide Operatoren sind ein <strong>logisches ODER</strong>. Zum Beispiel: <code>x &lt;= 3 or x &gt;= 10</code>. Zur Verbesserung der Performanz wird die <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a> angewendet.</td>
  </tr>
  <tr id="ternary">
    <td class="center bold">?:</td>
    <td><strong>Ternärer Operator</strong> <span class="ver">[v1.0.46+]</span>. Dieser Operator ist die Kurzschreibweise für eine <a href="lib/IfExpression.htm">if-else-Anweisung</a>. Er wertet die Bedingung auf seiner linken Seite aus, um zu bestimmen, welche seiner beiden Verzweigungen als Endergebnis dienen soll. Zum Beispiel bewirkt <code>Var := x&gt;y ? 2 : 3</code>, dass 2 in <em>Var</em> gespeichert wird, wenn x größer als y ist, andernfalls wird 3 gespeichert. Zur Verbesserung der Performanz wird nur die gewinnende Verzweigung ausgewertet (siehe <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a>).</td>
  </tr>
  <tr id="AssignOp">
    <td class="center bold">:=<br>
        +=<br>
        -=<br>
        *=<br>
        /=<br>
        //=<br>
        .=<br>
        |=<br>
        &amp;=<br>
        ^=<br>
        &gt;&gt;=<br>
        &lt;&lt;=<br>
        &gt;&gt;&gt;=
    </td>
    <td><p><strong>Zuweisung</strong>. Führt eine Operation am Inhalt einer Variable durch und speichert das Ergebnis wieder in dieselbe Variable (aber vor v1.0.46 konnten diese nur als Operator ganz links in einer Zeile verwendet werden, außerdem wurden nur die ersten fünf Operatoren unterstützt). Der einfachste Zuweisungsoperator ist <a href="lib/SetExpression.htm">Doppelpunkt-Gleich (:=)</a>, der das Ergebnis eines Ausdrucks in eine Variable speichert. Eine Beschreibung der anderen Operatoren finden Sie in den entsprechenden Einträgen dieser Tabelle. Zum Beispiel führt <code>Var //= 2</code> eine <a href="#FloorDivide">Floor-Division</a> durch, um <em>Var</em> durch 2 zu teilen, und speichert das Ergebnis wieder in <em>Var</em>. Ein weiteres Beispiel ist <code>Var .= "abc"</code>, was die Kurzschreibweise für <code>Var := Var . "abc"</code> ist.</p>
      <p>Im Gegensatz zu den meisten anderen Operatoren werden Zuweisungen von rechts nach links ausgewertet. Folglich bewirkt eine Zeile wie <code>Var1 := Var2 := 0</code>, dass zuerst 0 in <em>Var2</em> und dann <em>Var2</em> in <em>Var1</em> gespeichert wird.</p>
    <p>Wenn eine Zuweisung als Eingabe für einen anderen Operator verwendet wird, ist der Eingabewert die Variable selbst. Zum Beispiel ist der Ausdruck <code>(Var += 2) &gt; 50</code> wahr, wenn der soeben erhöhte Wert in <em>Var</em> größer als 50 ist. Dies ermöglicht auch die Übergabe einer Zuweisung als <a href="Functions.htm#ByRef">ByRef</a> oder die Verwendung ihrer <a href="#amp">Adresse</a>, z.B. <code>&amp;(x:="abc")</code>.</p>
    <p>Die Priorität der Zuweisungsoperatoren wird automatisch erhöht, wenn dadurch ein Syntaxfehler vermieden oder ein intuitiveres Verhalten erreicht wird. Zum Beispiel: <code>not x := y</code> ist äquivalent zu <code>not (x := y)</code>. Außerdem wird <code class="no-highlight">x==y &amp;&amp; z:=1</code> als <code class="no-highlight">x==y &amp;&amp; (z:=1)</code> ausgewertet, und <a href="Functions.htm#ShortCircuit">kurzgeschlossen</a>, wenn x ungleich y ist. Ebenso wird <code>++Var := X</code> als <code>++(Var := X)</code> und <code>Z &gt; 0 ? X := 2 : Y := 2</code> als <code>Z &gt; 0 ? (X := 2) : (Y := 2)</code> ausgewertet.</p>
    <p><strong>&gt;&gt;&gt;=</strong> benötigt <span class="ver">[v1.1.35+]</span>.</p>
    <p>Bekannte Einschränkungen durch Abwärtskompatibilität (die eventuell in einer zukünftigen Version behoben werden): 1) Wenn <strong>/=</strong> der Operator ganz links in einem Ausdruck ist und nicht zu einer <a href="#comma">Mehrfachanweisung</a> gehört, führt dieser Operator eine <a href="#FloorDivide">Floor-Division</a> durch, es sei denn, eine der Eingaben ist eine Floating-Point-Zahl (in allen anderen Fällen führt <strong>/=</strong> eine <a href="#divide">echte Division</a> durch); 2) <a href="lib/EnvAdd.htm">Datum/Zeit-Berechnungen</a> mit <strong>+=</strong> und <strong>-=</strong> sind nur möglich, wenn dieser Operator der Operator ganz links in der Zeile ist; 3) Die Operatoren <strong>+=</strong>, <strong>-=</strong> und <strong>*=</strong> behandeln leere Variablen als 0, aber nur, wenn sie einzeln in einer Zeile stehen; zum Beispiel erzeugen sowohl <code>y := 1, x += 1</code> als auch <code>MsgBox % x -= 3</code> ein leeres Ergebnis, wenn x leer ist.</p></td>
  </tr>
  <tr id="comma">
    <td class="center bold">,</td>
    <td><p><strong>Komma (Mehrfachanweisung)</strong> <span class="ver">[v1.0.46+]</span>. Kommas können verwendet werden, um mehrere Teilausdrücke auf eine Zeile zu schreiben. Dies wird üblicherweise verwendet, um mehrere Zuweisungen oder Funktionsaufrufe zu gruppieren. Zum Beispiel: <code>x:=1, y+=2, ++index, MeineFunk()</code>. Solche Anweisungen werden von links nach rechts ausgeführt.</p>
      <p class="note"><strong>Hinweis:</strong> Eine Zeile, die mit einem Komma (oder einem anderen Operator) beginnt, wird automatisch mit der darüber liegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>. Siehe auch: <a href="#CommaPerf">Kommaperformanz</a>.</p>
      <p><span class="ver">[v1.0.46.01+]</span>: Wenn direkt nach einem Komma eine Variable und ein Gleichheitszeichen folgt, wird dieses Gleichheitszeichen automatisch als <a href="lib/SetExpression.htm">Doppelpunkt-Gleich-Zuweisung (:=)</a> behandelt. Zum Beispiel enthält Folgendes nur Zuweisungen: <code>x:=1, y=2, a=b=c</code>. Neue Skripte sollten sich nicht auf dieses Verhalten verlassen, da es sich noch ändern kann. Diese Regel gilt nur für reine Variablen, nicht für <a href="#ref">Doppeldereferenzen</a> (double-derefs), z.B. enthält Folgendes nur eine Zuweisung: <code>x:=1, %y%=2</code></p>
      <p id="CommaPerf"><span class="ver">[v1.0.48+]</span>: Kommagetrennte Ausdrücke sind in der Regel performanter als einzeln geschriebene Ausdrücke, insbesondere bei der Zuweisung einer Variable an eine andere (z.B. <code>x:=y, a:=b</code>). Je mehr Ausdrücke zu einem einzigen Ausdruck zusammengefasst werden, desto höher ist die Performanz. Zum Beispiel kann ein Geschwindigkeitszuwachs von 35&nbsp;% erreicht werden, wenn fünf oder zehn einfache Ausdrücke zu einem einzigen Ausdruck kombiniert werden.</p>
    </td>
  </tr>
</table>
<p>Die folgenden Arten von Teilausdrücken überschreiben die Priorität bzw. die Reihenfolge der Auswertung:</p>
<table class="info">
  <tr>
    <th class="center">Ausdruck</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr>
    <td class="center"><strong>(</strong><em>Ausdruck</em><strong>)</strong></td>
    <td>
      <p>Ein beliebiger Teilausdruck in runden Klammern. Zum Beispiel bewirkt <code>(3 + 2) * 2</code>, dass <code>3 + 2</code> zuerst ausgewertet wird.</p>
      <p>Bei einer Mehrfachanweisung wird das Ergebnis der <u>ersten</u> Anweisung zurückgegeben. Zum Beispiel bewirkt <code>(a := 1, b := 2, c := 3)</code>, dass 1 zurückgegeben wird.</p>
    </td>
  </tr>
  <tr>
    <td class="center"><p><strong>Mod()<br>
        Round()<br>
    Abs()</strong></p></td>
    <td><strong>Funktionsaufruf</strong>. Direkt nach dem Funktionsnamen muss eine runde Klammer stehen, d.h. zwischen dem Namen und der Klammer sind keine Leer- oder Tabulatorzeichen erlaubt. Einzelheiten finden Sie unter <a href="Functions.htm">Funktionen</a>.</td>
  </tr>
  <tr>
    <td class="center"><p><strong>%</strong><em>func</em><strong>%()</strong></p></td>
    <td>Siehe <a href="Functions.htm#DynCall">Funktionen dynamisch aufrufen</a>.</td>
  </tr>
  <tr>
    <td class="center"><em>func</em><strong>.()</strong></td>
    <td><p><strong>Veraltet:</strong> Diese Syntax wird nicht empfohlen. Verwenden Sie stattdessen <code>%func%()</code> (für Funktionsnamen und -objekte) oder <code>func.Call()</code> (für Funktionsobjekte).</p>
    <p><span class="ver">[AHK_L 48+]</span>: Versucht, eine namenlose Methode des Objekts <i>func</i> aufzurufen. Konventionsgemäß ist das die "Standardmethode" des Objekts. Wenn <i>func</i> kein Objekt enthält, wird stattdessen indirekt das <a href="Objects.htm#Default_Base_Object">Standardbasisobjekt</a> aufgerufen.</p>
    <p><span class="ver">[v1.0.95+]</span>: Wenn <i>func</i> einen Funktionsnamen enthält, wird die benannte Funktion aufgerufen.</p></td>
  </tr>
  <tr>
    <td class="center">Fn(<strong><em>Params</em>*</strong>)</td>
    <td><p><span class="ver">[AHK_L 60+]</span>: <a href="Functions.htm#VariadicCall">Variadischer Funktionsaufruf</a>. <em>Params</em> ist ein Array (Objekt) mit Parameterwerten.</p></td>
  </tr>
  <tr>
    <td class="center"><strong>x[y]<br>[a, b, c]</strong></td>
    <td>
      <p><span class="ver">[AHK_L 31+]</span>: <strong>Objektelementzugriff</strong>. Abrufen (Get), Setzen (Set) oder Aufrufen (Call) einer Methode des Objekts <i>x</i>, wobei <i>y</i> eine Parameterliste (typischerweise ein Array-Index oder Schlüssel) oder ein Ausdruck ist, der einen Methodennamen zurückgibt.</p>
      <p><span class="ver">[v1.0.97+]</span>: <strong>Direkt geschriebenes Array</strong>. Wenn der eckigen Klammer kein Wert (oder kein Teilausdruck, der einen Wert zurückgibt) vorangestellt ist, wird die Klammer als Beginn eines direkt geschriebenen Arrays interpretiert. Zum Beispiel ist <code>[a, b, c]</code> äquivalent zu <code>Array(a, b, c)</code> (a, b und c sind Variablen).</p>
      <p>Weitere Informationen finden Sie unter <a href="Objects.htm#Usage_Simple_Arrays">Arraysyntax</a> und <a href="Objects.htm#Usage_Objects">Objektsyntax</a>.</p>
    </td>
  </tr>
  <tr>
    <td class="center"><strong>{a: b, c: d}</strong></td>
    <td><p><span class="ver">[v1.0.97+]</span>: <strong>Direkt geschriebenes Objekt</strong>. Ein Objekt bzw. assoziatives Array erstellen. Zum Beispiel ist <code>x := {a: b}</code> äquivalent zu <code>x := Object("a", b)</code> oder <code>x := Object(), x.a := b</code>. Weitere Informationen finden Sie unter <a href="Objects.htm#Usage_Associative_Arrays">Assoziative Arrays</a>.</p></td>
  </tr>
</table>

<h2 id="BuiltIn">Interne Variablen</h2>
<p>Die folgenden Variablen sind fest in das Programm integriert und können normal referenziert werden.</p>
<p class="note">Allgemeine Informationen finden Sie unter <a href="Concepts.htm#built-in-variables">Interne Variablen</a>.</p>
<h3 id="BuiltIn_TOC">Inhaltsverzeichnis</h3>
<ul>
  <li>Sonderzeichen: <a href="#Space">A_Space</a>, <a href="#Tab">A_Tab</a></li>
  <li>Skripteigenschaften: <a href="#CommandLine">Befehlszeilenparameter</a>, <a href="#WorkingDir">A_WorkingDir</a>, <a href="#ScriptDir">A_ScriptDir</a>, <a href="#ScriptName">A_ScriptName</a>, <a href="#prop">(...mehr...)</a></li>
  <li>Datum und Zeit: <a href="#YYYY">A_YYYY</a>, <a href="#MM">A_MM</a>, <a href="#DD">A_DD</a>, <a href="#Hour">A_Hour</a>, <a href="#Min">A_Min</a>, <a href="#Sec">A_Sec</a>, <a href="#date">(...mehr...)</a></li>
  <li>Skripteinstellungen: <a href="#IsSuspended">A_IsSuspended</a>, <a href="#BatchLines">A_BatchLines</a>, <a href="#ListLines">A_ListLines</a>, <a href="#TitleMatchMode">A_TitleMatchMode</a>, <a href="#settings">(...mehr...)</a></li>
  <li>Inaktivität des Benutzers: <a href="#TimeIdle">A_TimeIdle</a>, <a href="#TimeIdlePhysical">A_TimeIdlePhysical</a>, <a href="#TimeIdleKeyboard">A_TimeIdleKeyboard</a>, <a href="#TimeIdleMouse">A_TimeIdleMouse</a></li>
  <li>GUI-Fenster und Menüleisten: <a href="#Gui">A_Gui</a>, <a href="#GuiControl">A_GuiControl</a>, <a href="#GuiEvent">A_GuiEvent</a>, <a href="#EventInfo">A_EventInfo</a>, <a href="#gui">(...mehr...)</a></li>
  <li>Hotkeys, Hotstrings und benutzerdefinierte Menüpunkte: <a href="#ThisHotkey">A_ThisHotkey</a>, <a href="#EndChar">A_EndChar</a>, <a href="#ThisMenuItem">A_ThisMenuItem</a>, <a href="#h">(...mehr...)</a></li>
  <li>Betriebssystem und Benutzerinformationen: <a href="#OSVersion">A_OSVersion</a>, <a href="#Screen">A_ScreenWidth</a>, <a href="#Screen">A_ScreenHeight</a>, <a href="#os">(...mehr...)</a></li>
  <li>Sonstiges: <a href="#Cursor">A_Cursor</a>, <a href="#Caret">A_CaretX</a>, <a href="#Caret">A_CaretY</a>, <a href="#Clipboard">Clipboard</a>, <a href="#ClipboardAll">ClipboardAll</a>, <a href="#ErrorLevel">ErrorLevel</a>, <a href="#misc">(...mehr...)</a></li>
  <li>Loop: <a href="#Index">A_Index</a>, <a href="#loop">(...mehr...)</a></li>
</ul>
<h3 id="Special_Characters">Sonderzeichen</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="Space">
    <td>A_Space</td>
    <td>Diese Variable enthält ein einzelnes Leerzeichen. Siehe <a href="lib/AutoTrim.htm">AutoTrim</a> für Details.</td>
  </tr>
  <tr id="Tab">
    <td>A_Tab</td>
    <td>Diese Variable enthält ein einzelnes Tabulatorzeichen. Siehe <a href="lib/AutoTrim.htm">AutoTrim</a> für Details.</td>
  </tr>
</table>
<h3 id="prop">Skripteigenschaften</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="CommandLine">
    <td>1, 2, 3, etc.</td>
    <td>Diese Variablen werden automatisch erstellt, wenn ein Skript mit Befehlszeilenparametern gestartet wird. Sie können wie normale Variablennamen geändert oder abgerufen werden (z.B. %1%), aber nicht direkt in einem <a href="#Expressions">Ausdruck</a> referenziert werden. Die Variable %0% enthält die Anzahl der übergebenen Parameter (andernfalls 0). Einzelheiten finden Sie unter <a href="Scripts.htm#cmd">Befehlszeilenparameter</a>.</td>
  </tr>
  <tr id="Args">
    <td>A_Args<br><span class="ver">[v1.1.27+]</span></td>
    <td>Enthält ein <a href="Objects.htm#Usage_Simple_Arrays">Array</a> von Befehlszeilenparametern. Einzelheiten finden Sie unter <a href="Scripts.htm#cmd">Befehlszeilenparameter an ein Skript übergeben</a>.</td>
  </tr>
  <tr id="WorkingDir">
    <td>A_WorkingDir</td>
    <td>Das aktuelle Arbeitsverzeichnis, von dem aus das Skript standardmäßig auf Dateien zugreift. Der letzte umgekehrte Schrägstrich ist nicht enthalten, es sei denn, es handelt sich um das Stammverzeichnis. Zwei Beispiele: C:\ und C:\Meine Dokumente. Mit <a href="lib/SetWorkingDir.htm">SetWorkingDir</a> kann das Arbeitsverzeichnis geändert werden.</td>
  </tr>
  <tr id="InitialWorkingDir">
    <td>A_InitialWorkingDir<br><span class="ver">[v1.1.35+]</span></td>
    <td>Das anfängliche Arbeitsverzeichnis des Skripts, abhängig davon, wie das Skript gestartet wurde. Wenn das Skript z.B. über eine Verknüpfung (z.B. im Startmenü) gestartet wurde, richtet sich dessen anfängliches Arbeitsverzeichnis nach dem Feld "Ausführen in" im Eigenschaftenfenster der Verknüpfung.</td>
  </tr>
  <tr id="ScriptDir">
    <td>A_ScriptDir</td>
    <td>Der vollständige Pfadname des Verzeichnisses, das das aktuelle Skript enthält. Der letzte umgekehrte Schrägstrich wird weggelassen (auch bei Stammverzeichnissen).</td>
  </tr>
  <tr id="ScriptName">
    <td>A_ScriptName</td>
    <td>
      <p>Der Dateiname des aktuellen Skripts ohne Pfadangabe, z.B. MeinSkript.ahk</p>
      <p>Wenn das Skript <a href="Scripts.htm#ahk2exe">kompiliert</a> oder <a href="Program.htm#embedded-scripts">eingebettet</a> ist, enthält diese Variable den Namen der aktuellen EXE-Datei.</p>
    </td>
  </tr>
  <tr id="ScriptFullPath">
    <td>A_ScriptFullPath</td>
    <td>
      <p>Der vollständige Pfadname des aktuellen Skripts, z.B. C:\Skripte\MeinSkript.ahk</p>
      <p>Wenn das Skript <a href="Scripts.htm#ahk2exe">kompiliert</a> oder <a href="Program.htm#embedded-scripts">eingebettet</a> ist, enthält diese Variable den vollständigen Pfadnamen der aktuellen EXE-Datei.</p>
    </td>
  </tr>
  <tr id="ScriptHwnd">
    <td>A_ScriptHwnd<br><span class="ver">[v1.1.01+]</span></td>
    <td>Die HWND-Nummer (eindeutige ID) des versteckten <a href="Program.htm#main-window">Hauptfensters</a> des Skripts.</td>
  </tr>
  <tr id="LineNumber">
    <td>A_LineNumber</td>
    <td><p>Die Nummer der aktuell ausgeführten Zeile innerhalb des Skripts (oder innerhalb einer <a href="lib/_Include.htm">#Include-Datei</a>, falls vorhanden). Diese Zeilennummer entspricht der via <a href="lib/ListLines.htm">ListLines</a> angezeigten Zeilennummer; dies ist z.B. nützlich, um einen Fehler zu melden: <code>MsgBox, Konnte nicht in die Logdatei schreiben (Zeile Nr. %A_LineNumber%)</code></p>
    <p>Da bei einer <a href="Scripts.htm#ahk2exe">Skriptkompilierung</a> alle <a href="lib/_Include.htm">#Include-Dateien</a> zu einem großen Skript zusammengefasst werden, kann die Zeilennummerierung von der im unkompilierten Modus abweichen.</p></td>
  </tr>
  <tr id="LineFile">
    <td>A_LineFile</td>
    <td>
      <p>Der vollständige Pfadname der Datei, zu der <a href="#LineNumber">A_LineNumber</a> gehört. Wenn das Skript aus einer externen Datei geladen wurde, ist diese Variable äquivalent zu <a href="#ScriptFullPath">A_ScriptFullPath</a>, es sei denn, die Zeile gehört zu einer der <a href="lib/_Include.htm">#Include-Dateien</a> des Skripts.</p>
      <p>Wenn das Skript mit einer <a href="Scripts.htm#ahk2exe-base">BIN-Datei</a> <a href="Scripts.htm#ahk2exe">kompiliert</a> wurde, enthält diese Variable den vollständigen Pfadnamen der aktuellen EXE-Datei, äquivalent zu <a href="#ScriptFullPath">A_ScriptFullPath</a>.</p>
      <p><span class="ver">[v1.1.34+]</span>: Wenn das Skript <a href="Program.htm#embedded-scripts">eingebettet</a> ist, enthält A_LineFile ein Sternchen (*), gefolgt vom Namen der Ressource, z.B. *#1</p>
    </td>
  </tr>
  <tr id="ThisFunc">
    <td>A_ThisFunc<br>
    <span class="ver">[v1.0.46.16+]</span></td>
    <td>Der Name der <a href="Functions.htm">benutzerdefinierten Funktion</a>, die gerade ausgeführt wird (andernfalls leer), z.B. MeineFunktion. Siehe auch: <a href="lib/IsFunc.htm">IsFunc()</a></td>
  </tr>
  <tr id="ThisLabel">
    <td>A_ThisLabel<br>
    <span class="ver">[v1.0.46.16+]</span></td>
    <td>Der Name des <a href="misc/Labels.htm">Labels</a> (Subroutine), das gerade ausgeführt wird (andernfalls leer), z.B. MeinLabel. Diese Variable wird jedes Mal aktualisiert, wenn das Skript <a href="lib/Gosub.htm">Gosub</a>/<a href="lib/Return.htm">Return</a> oder <a href="lib/Goto.htm">Goto</a> ausführt. Sie wird auch aktualisiert, wenn ein Label automatisch durch <a href="lib/SetTimer.htm">Timer</a>, <a href="lib/Gui.htm#DefaultWin">GUI-Threads</a>, <a href="lib/Menu.htm">Menüpunkte</a>, <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="lib/OnClipboardChange.htm#label">OnClipboardChange-Labels</a> und <a href="lib/OnExit.htm#command">OnExit-Labels</a> aufgerufen wird. A_ThisLabel wird jedoch nicht aktualisiert, wenn die Skriptausführung in eines der oben genannten Labels "hineinfällt"; in diesem Fall behält A_ThisLabel den vorherigen Wert. Siehe auch: <a href="#ThisHotkey">A_ThisHotkey</a> und <a href="lib/IsLabel.htm">IsLabel()</a></td>
  </tr>
  <tr id="AhkVersion">
    <td>A_AhkVersion</td>
    <td>In den Versionen vor 1.0.22 ist diese Variable leer. A_AhkVersion enthält die Version von AutoHotkey, mit der das Skript ausgeführt wird, z.B. 1.0.22. Im Falle eines <a href="Scripts.htm#ahk2exe">kompilierten Skripts</a> enthält diese Variable die Version, mit der das Skript ursprünglich kompiliert wurde. Der Aufbau der Versionsnummer erlaubt es, mit "&gt;" oder "&gt;=" zu prüfen, ob A_AhkVersion größer als eine bestimmte Mindestversionsnummer ist. Zum Beispiel: <code>if A_AhkVersion &gt;= 1.0.25.07</code>. Siehe auch: <a href="lib/_Requires.htm">#Requires</a> und <a href="lib/VerCompare.htm">VerCompare()</a></td>
  </tr>
  <tr id="AhkPath">
    <td>A_AhkPath</td>
    <td>
      <p>Für unkompilierte oder <a href="Program.htm#embedded-scripts">eingebettete</a> Skripte: Der vollständige Pfadname der EXE-Datei, mit der das aktuelle Skript gerade ausgeführt wird. Zum Beispiel: C:\Program Files\AutoHotkey\AutoHotkey.exe</p>
      <p>Für <a href="Scripts.htm#ahk2exe">kompilierte Skripte</a>, die auf einer <a href="Scripts.htm#ahk2exe-base">BIN-Datei</a> basieren, wird der Wert ermittelt, indem das Installationsverzeichnis aus der Registry gelesen und "\AutoHotkey.exe" angefügt wird. Wenn AutoHotkey nicht installiert ist, ist der Wert leer. Das folgende Beispiel ist äquivalent:</p>
      <pre>RegRead InstallDir, HKLM\SOFTWARE\AutoHotkey, InstallDir
AhkPath := ErrorLevel ? "" : InstallDir "\AutoHotkey.exe"</pre>
      <p><span class="ver">[v1.1.34+]</span>: Für kompilierte Skripte, die auf einer EXE-Datei basieren, enthält A_AhkPath den vollständigen Pfadnamen des kompilierten Skripts. Dies kann in Kombination mit <a href="Scripts.htm#SlashScript">/script</a> verwendet werden, um externe Skripte auszuführen. Um stattdessen die installierte Kopie von AutoHotkey zu lokalisieren, lesen Sie die Registry wie oben gezeigt.</p>
    </td>
  </tr>
  <tr id="IsUnicode">
    <td>A_IsUnicode</td>
    <td><p>Enthält 1, wenn Zeichenketten im Unicode-Format (16-Bit) sind, oder eine leere Zeichenkette (was als <a href="#Boolean">falsch</a> angesehen wird), wenn Zeichenketten im ANSI-Format (8-Bit) sind. Das Format der Zeichenketten richtet sich nach der Version von AutoHotkey.exe, mit der das Skript ausgeführt wird, oder, falls es kompiliert wurde, nach der BIN-Datei, mit der es kompiliert wurde.</p>
    <p>Bei ANSI-EXE-Dateien vor <span class="ver">[v1.1.06]</span> blieb A_IsUnicode undefiniert; das heißt, dass das Skript dieser Variable einen Wert zuweisen konnte und dass der Versuch, sie zu lesen, eine <a href="lib/_Warn.htm">UseUnsetGlobal-Warnung</a> auslösen konnte. In späteren Versionen ist diese Variable immer definiert und schreibgeschützt.</p></td>
  </tr>
  <tr id="IsCompiled">
    <td>A_IsCompiled</td>
    <td><p>Enthält 1, wenn das Skript als <a href="Scripts.htm#ahk2exe">kompilierte EXE-Datei</a> ausgeführt wird, andernfalls eine leere Zeichenkette (was als <a href="#Boolean">falsch</a> angesehen wird).</p>
    <p>Bei unkompilierten Skripten vor <span class="ver">[v1.1.06]</span> blieb A_IsCompiled undefiniert; das heißt, dass das Skript dieser Variable einen Wert zuweisen konnte und dass der Versuch, sie zu lesen, eine <a href="lib/_Warn.htm">UseUnsetGlobal-Warnung</a> auslösen konnte. In späteren Versionen ist diese Variable immer definiert und schreibgeschützt.</p></td>
  </tr>
  <tr id="ExitReason">
    <td>A_ExitReason</td>
    <td>Der aktuellste Grund für die Beendigung des Skripts. Diese Variable ist leer, es sei denn, das Skript hat eine <a href="lib/OnExit.htm#command">OnExit</a>-Subroutine, die gerade ausgeführt wird oder mindestens einmal durch einen Exitversuch aufgerufen wurde. Einzelheiten finden Sie unter <a href="lib/OnExit.htm#command">OnExit</a>.</td>
  </tr>
</table>
<h3 id="date">Datum und Zeit</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="YYYY">
    <td>A_YYYY</td>
    <td>
      <p>Das aktuelle 4-stellige Jahr (z.B. 2004). A_Year enthält denselben Wert.</p>
      <p class="note"><strong>Hinweis:</strong> Um die formatierte Version einer Uhrzeit oder eines Datums gemäß Ihrer aktuellen Sprach- und Regionseinstellungen abzurufen, verwenden Sie <code><a href="lib/FormatTime.htm">FormatTime</a>, AusgabeVar</code> (Uhrzeit und langes Datum) oder <code><a href="lib/FormatTime.htm">FormatTime</a>, AusgabeVar,, LongDate</code> (langes Datumformat).</p>
    </td>
  </tr>
  <tr id="MM">
    <td>A_MM</td>
    <td>Der aktuelle 2-stellige Monat (01-12). A_Mon enthält denselben Wert.</td>
  </tr>
  <tr id="DD">
    <td>A_DD</td>
    <td>Der aktuelle 2-stellige Tag des Monats (01-31). A_MDay enthält denselben Wert.</td>
  </tr>
  <tr id="MMMM">
    <td>A_MMMM</td>
    <td>Der aktuelle vollständige Monatsname in der aktuellen Sprache des Benutzers, z.B. Juli</td>
  </tr>
  <tr id="MMM">
    <td>A_MMM</td>
    <td>Der aktuelle abgekürzte Monatsname in der aktuellen Sprache des Benutzers, z.B. Jul</td>
  </tr>
  <tr id="DDDD">
    <td>A_DDDD</td>
    <td>Der aktuelle vollständige Wochentagsname in der aktuellen Sprache des Benutzers, z.B. Sonntag</td>
  </tr>
  <tr id="DDD">
    <td>A_DDD</td>
    <td>Der aktuelle abgekürzte Wochentagsname in der aktuellen Sprache des Benutzers, z.B. So</td>
  </tr>
  <tr id="WDay">
    <td>A_WDay</td>
    <td>Der aktuelle 1-stellige Wochentag (1-7). 1 ist Sonntag in allen Sprach- und Regionseinstellungen.</td>
  </tr>
  <tr id="YDay">
    <td>A_YDay</td>
    <td>Der aktuelle Tag des Jahres (1-366). Der Wert enthält keine führenden Nullen, z.B. wird 9 abgerufen, nicht 009. Um einen Wert mit führenden Nullen abzurufen, verwenden Sie folgendes: <code><a href="lib/FormatTime.htm">FormatTime</a>, AusgabeVar, , YDay0</code>.</td>
  </tr>
  <tr id="YWeek">
    <td>A_YWeek</td>
    <td>Aktuelles Jahr und aktuelle Kalenderwoche (z.B. 200453) gemäß ISO 8601. Um das Jahr von der Woche zu trennen, verwenden Sie <code>Jahr := <a href="lib/SubStr.htm">SubStr</a>(A_YWeek, 1, 4)</code> und <code>Woche := <a href="lib/SubStr.htm">SubStr</a>(A_YWeek, -1)</code>. Genaue Definition von A_YWeek: Wenn die Woche mit dem 1. Januar mindestens vier Tage im neuen Jahr hat, ist sie Woche 1. Andernfalls ist sie die letzte Woche des Vorjahres und die nächste Woche die erste Woche des neuen Jahres.</td>
  </tr>
  <tr id="Hour">
    <td>A_Hour</td>
    <td>Die aktuelle 2-stellige Stunde (00-23) im 24-Stunden-Format. Um die Zeit im 12-Stunden-Format mit einem AM/PM-Indikator abzurufen, gehen Sie wie folgt vor: <code><a href="lib/FormatTime.htm">FormatTime</a>, AusgabeVar, , h:mm:ss tt</code></td>
  </tr>
  <tr id="Min">
    <td>A_Min</td>
    <td><p>Die aktuelle 2-stellige Minute (00-59).</p></td>
  </tr>
  <tr id="Sec">
    <td>A_Sec</td>
    <td>Die aktuelle 2-stellige Sekunde (00-59).</td>
  </tr>
  <tr id="MSec">
    <td>A_MSec</td>
    <td>Die aktuelle 3-stellige Millisekunde (000-999). Die führenden Nullen können z.B. wie folgt entfernt werden: <code>Millisekunden := A_MSec + 0</code>.</td>
  </tr>
  <tr id="Now">
    <td>A_Now</td>
    <td>
      <p>Die aktuelle Ortszeit im <a href="lib/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format.</p>
      <p class="note"><strong>Hinweis:</strong> Datums- und Zeitberechnungen können mit <a href="lib/EnvAdd.htm">EnvAdd</a> und <a href="lib/EnvSub.htm">EnvSub</a> durchgeführt werden. Außerdem können Sie <a href="lib/FormatTime.htm">FormatTime</a> verwenden, um das Datum und/oder die Uhrzeit gemäß Ihrer aktuellen Sprach- und Regionseinstellungen zu formatieren.</p>
    </td>
  </tr>
  <tr id="NowUTC">
    <td>A_NowUTC</td>
    <td>Die aktuelle koordinierte Weltzeit (engl. Coordinated Universal Time, kurz UTC) im <a href="lib/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. UTC ist grundsätzlich dasselbe wie die mittlere Greenwich-Zeit (engl. Greenwich Mean Time, kurz GMT).</td>
  </tr>
  <tr id="TickCount">
    <td>A_TickCount</td>
    <td><p>Die seit dem Systemstart verstrichene Zeit in Millisekunden, bis zu einem Maximum von 49,7 Tagen. Um diese verstrichene Zeit zu messen, speichern Sie A_TickCount in eine Variable und subtrahieren Sie diese später vom aktuellen A_TickCount-Wert. Zum Beispiel:</p>
        <pre>StartZeit := A_TickCount
Sleep, 1000
VerstricheneZeit := A_TickCount - StartZeit
MsgBox,  %VerstricheneZeit% Millisekunden sind verstrichen.</pre>
<p>Wenn Sie eine höhere Genauigkeit als die 10&nbsp;ms von A_TickCount benötigen, verwenden Sie <a href="lib/DllCall.htm#QPC">QueryPerformanceCounter()</a>.</p>
</td>
  </tr>
</table>
<h3 id="settings">Skripteinstellungen</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="IsSuspended">
    <td>A_IsSuspended</td>
    <td>Enthält 1, wenn das Skript <a href="lib/Suspend.htm">suspendiert</a> ist, andernfalls 0.</td>
  </tr>
  <tr id="IsPaused">
    <td>A_IsPaused<br>
    <span class="ver">[v1.0.48+]</span></td>
    <td>Enthält 1, wenn der <a href="misc/Threads.htm">Thread</a> direkt unterhalb des aktuellen Threads <a href="lib/Pause.htm">pausiert</a> ist, andernfalls 0.</td>
  </tr>
  <tr id="IsCritical">
    <td>A_IsCritical<br>
    <span class="ver">[v1.0.48+]</span></td>
    <td>Enthält 0, wenn <a href="lib/Critical.htm">Critical</a> im <a href="misc/Threads.htm">aktuellen Thread</a> ausgeschaltet ist. Andernfalls enthält A_IsCritical einen Integer größer als 0, nämlich das von Critical verwendete <a href="lib/Critical.htm#Interval">Meldungsüberprüfintervall</a>. Da <code>Critical 0</code> den kritischen Status eines Threads ausschaltet, kann der aktuelle Status von Critical via <code>Alt_IsCritical := A_IsCritical</code> gespeichert und später via <code>Critical %Alt_IsCritical%</code> wiederhergestellt werden.</td>
  </tr>
  <tr id="BatchLines">
    <td>A_BatchLines</td>
    <td>(oder A_NumBatchLines) Der aktuell via <a href="lib/SetBatchLines.htm">SetBatchLines</a> gesetzte Wert. Beispiele: 200 oder 10ms (abhängig vom Format).</td>
  </tr>
  <tr id="ListLines">
    <td>A_ListLines<br><span class="ver">[v1.1.28+]</span></td>
    <td>Enthält 1, wenn <a href="lib/ListLines.htm">ListLines</a> eingeschaltet ist, andernfalls 0.</td>
  </tr>
  <tr id="TitleMatchMode">
    <td>A_TitleMatchMode</td>
    <td>Der aktuell via <a href="lib/SetTitleMatchMode.htm">SetTitleMatchMode</a> gesetzte Modus (1, 2, 3 oder RegEx).</td>
  </tr>
  <tr id="TitleMatchModeSpeed">
    <td>A_TitleMatchModeSpeed</td>
    <td>Die aktuell via <a href="lib/SetTitleMatchMode.htm">SetTitleMatchMode</a> gesetzte Übereinstimmungsgeschwindigkeit (Fast oder Slow).</td>
  </tr>
  <tr id="DetectHiddenWindows">
    <td>A_DetectHiddenWindows</td>
    <td>Der aktuell via <a href="lib/DetectHiddenWindows.htm">DetectHiddenWindows</a> gesetzte Modus (On oder Off).</td>
  </tr>
  <tr id="DetectHiddenText">
    <td>A_DetectHiddenText</td>
    <td>Der aktuell via <a href="lib/DetectHiddenText.htm">DetectHiddenText</a> gesetzte Modus (On oder Off).</td>
  </tr>
  <tr id="AutoTrim">
    <td>A_AutoTrim</td>
    <td>Der aktuell via <a href="lib/AutoTrim.htm">AutoTrim</a> gesetzte Modus (On oder Off).</td>
  </tr>
  <tr id="StringCaseSense">
    <td>A_StringCaseSense</td>
    <td>Der aktuell via <a href="lib/StringCaseSense.htm">StringCaseSense</a> gesetzte Modus (On, Off oder Locale).</td>
  </tr>
  <tr id="FileEncoding">
    <td>A_FileEncoding</td>
    <td><span class="ver">[AHK_L 46+]</span>: Enthält die Standardkodierung für verschiedene Befehle; siehe <a href="lib/FileEncoding.htm">FileEncoding</a>.</td>
  </tr>
  <tr id="FormatInteger">
    <td>A_FormatInteger</td>
    <td>Das aktuell via <a href="lib/SetFormat.htm">SetFormat</a> gesetzte Integer-Format (H oder D). <span class="ver">[AHK_L 42+]</span>: Kann auch ein kleines h enthalten.</td>
  </tr>
  <tr id="FormatFloat">
    <td>A_FormatFloat</td>
    <td>Das aktuell via <a href="lib/SetFormat.htm">SetFormat</a> gesetzte Floating-Point-Format.</td>
  </tr>
  <tr id="SendMode">
    <td>A_SendMode</td>
    <td><span class="ver">[v1.1.23+]</span>: Der aktuell via <a href="lib/SendMode.htm">SendMode</a> gesetzte Modus (Event, Input, Play oder InputThenPlay).</td>
  </tr>
  <tr id="SendLevel">
    <td>A_SendLevel</td>
    <td><span class="ver">[v1.1.23+]</span>: Die aktuelle <a href="lib/SendLevel.htm">SendLevel</a>-Einstellung (ein Integer im Bereich von 0 bis 100).</td>
  </tr>
  <tr id="StoreCapslockMode">
    <td>A_StoreCapsLockMode</td>
    <td><span class="ver">[v1.1.23+]</span>: Der aktuell via <a href="lib/SetStoreCapsLockMode.htm">SetStoreCapsLockMode</a> gesetzte Modus (On oder Off).</td>
  </tr>
  <tr id="KeyDelay">
    <td>A_KeyDelay<br>
    A_KeyDuration</td>
    <td>Die aktuell via <a href="lib/SetKeyDelay.htm">SetKeyDelay</a> gesetzte Verzögerung oder Dauer (immer dezimal, nicht hexadezimal). A_KeyDuration benötigt <span class="ver">[v1.1.23+]</span>.</td>
  </tr>
  <tr id="KeyDelayPlay">
    <td>A_KeyDelayPlay<br>
    A_KeyDurationPlay</td>
    <td>Die aktuell via <a href="lib/SetKeyDelay.htm">SetKeyDelay</a> gesetzte Verzögerung oder Dauer für den <a href="lib/Send.htm#SendPlayDetail">SendPlay</a>-Modus (immer dezimal, nicht hexadezimal). Benötigt <span class="ver">[v1.1.23+]</span>.</td>
  </tr>
  <tr id="WinDelay">
    <td>A_WinDelay</td>
    <td>Die aktuell via <a href="lib/SetWinDelay.htm">SetWinDelay</a> gesetzte Verzögerung (immer dezimal, nicht hexadezimal).</td>
  </tr>
  <tr id="ControlDelay">
    <td>A_ControlDelay</td>
    <td>Die aktuell via <a href="lib/SetControlDelay.htm">SetControlDelay</a> gesetzte Verzögerung (immer dezimal, nicht hexadezimal).</td>
  </tr>
  <tr id="MouseDelay">
    <td>A_MouseDelay<br>
    A_MouseDelayPlay</td>
    <td>Die aktuell via <a href="lib/SetMouseDelay.htm">SetMouseDelay</a> gesetzte Verzögerung (immer dezimal, nicht hexadezimal). A_MouseDelay gilt für den traditionellen SendEvent-Modus, A_MouseDelayPlay für den <a href="lib/Send.htm#SendPlayDetail">SendPlay</a>-Modus. A_MouseDelayPlay benötigt <span class="ver">[v1.1.23+]</span>.</td>
  </tr>
  <tr id="DefaultMouseSpeed">
    <td>A_DefaultMouseSpeed</td>
    <td>Die aktuell via <a href="lib/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a> gesetzte Geschwindigkeit (immer dezimal, nicht hexadezimal).</td>
  </tr>
  <tr id="CoordMode">
    <td>A_CoordModeToolTip<br>
    A_CoordModePixel<br>
    A_CoordModeMouse<br>
    A_CoordModeCaret<br>
    A_CoordModeMenu</td>
    <td><span class="ver">[v1.1.23+]</span>: Der aktuell via <a href="lib/CoordMode.htm">CoordMode</a> gesetzte Modus (Window, Client oder Screen).</td>
  </tr>
  <tr id="RegView">
    <td>A_RegView</td>
    <td><span class="ver">[v1.1.08+]</span>: Die aktuell via <a href="lib/SetRegView.htm">SetRegView</a> gesetzte Registry-Ansicht.</td>
  </tr>
  <tr id="IconHidden">
    <td>A_IconHidden</td>
    <td>Enthält 1, wenn das <a href="Program.htm#tray-icon">Tray-Symbol</a> gerade versteckt ist, andernfalls 0. Das Symbol kann mit der <a href="lib/_NoTrayIcon.htm">#NoTrayIcon</a>-Direktive oder dem <a href="lib/Menu.htm">Menu</a>-Befehl versteckt werden.</td>
  </tr>
  <tr id="IconTip">
    <td>A_IconTip</td>
    <td>Leer, es sei denn, für das <a href="Program.htm#tray-icon">Tray-Symbol</a> wurde via <code><a href="lib/Menu.htm">Menu</a>, Tray, Tip</code> ein benutzerdefinierter Tooltip definiert, dann ist der Text des Tooltips enthalten.</td>
  </tr>
  <tr id="IconFile">
    <td>A_IconFile</td>
    <td>Leer, es sei denn, ein benutzerdefiniertes <a href="Program.htm#tray-icon">Tray-Symbol</a> wurde via <code><a href="lib/Menu.htm">Menu</a>, Tray, Icon</code> definiert, dann ist der vollständige Pfadname der Datei des neuen Symbols enthalten.</td>
  </tr>
  <tr id="IconNumber">
    <td>A_IconNumber</td>
    <td>Leer, wenn A_IconFile leer ist. Andernfalls ist die Nummer der Symbolgruppe enthalten, die in A_IconFile verwendet wird (üblicherweise 1).</td>
  </tr>
</table>
<h3 id="User_Idle_Time">Inaktivität des Benutzers</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="TimeIdle">
    <td>A_TimeIdle</td>
    <td>
      <p>Die Zeit in Millisekunden, die seit der letzten Eingabe via Tastatur, Maus usw. verstrichen ist. Dies ist nützlich, um festzustellen, ob der Benutzer abwesend ist. Physische Benutzereingaben sowie künstlich erzeugte Eingaben durch ein <u>beliebiges</u> Programm oder Skript (z.B. via <a href="lib/Send.htm">Send</a>- oder <a href="lib/MouseMove.htm">MouseMove</a>-Befehl) setzen diesen Wert auf 0 zurück. Da dieser Wert tendenziell in 10er-Schritten ansteigt, sollte nicht geprüft werden, ob er mit einem anderen Wert übereinstimmt. Prüfen Sie stattdessen, ob dieser Wert größer oder kleiner als ein anderer Wert ist. Zum Beispiel:</p>
      <pre>If A_TimeIdle &gt; 600000
    MsgBox, Die letzte Aktivität war vor 10 Minuten</pre>
    </td>
  </tr>
  <tr id="TimeIdlePhysical">
    <td>A_TimeIdlePhysical</td>
    <td>Ähnlich wie oben, allerdings werden künstliche Tastendrücke und/oder Mausklicks ignoriert, wenn der entsprechende Hook (<a href="lib/_InstallKeybdHook.htm">Tastatur</a> oder <a href="lib/_InstallMouseHook.htm">Maus</a>) installiert ist, d.h. diese Variable reagiert nur auf physische Ereignisse. Dadurch wird verhindert, dass simulierte Tastendrücke und Mausklicks fälschlicherweise die Aktivität des Benutzers vortäuschen. Wenn keine Hooks installiert sind, ist diese Variable äquivalent zu A_TimeIdle. Wenn nur ein Hook installiert ist, wird A_TimeIdlePhysical nur von dieser Art der physischen Eingabe beeinflusst (die Eingabe des anderen/nicht-installierten Hooks hat weder physisch noch künstlich eine Auswirkung).</td>
  </tr>
  <tr id="TimeIdleKeyboard">
    <td>A_TimeIdleKeyboard<br><span class="ver">[v1.1.28+]</span></td>
    <td>Wenn der <a href="lib/_InstallKeybdHook.htm">Tastatur-Hook</a> installiert ist, enthält diese Variable die Zeit in Millisekunden, die seit der letzten physischen Tastatureingabe verstrichen ist. Andernfalls ist diese Variable äquivalent zu A_TimeIdle.</td>
  </tr>
  <tr id="TimeIdleMouse">
    <td>A_TimeIdleMouse<br><span class="ver">[v1.1.28+]</span></td>
    <td>Wenn der <a href="lib/_InstallMouseHook.htm">Maus-Hook</a> installiert ist, enthält diese Variable die Zeit in Millisekunden, die seit der letzten physischen Mauseingabe verstrichen ist. Andernfalls ist diese Variable äquivalent zu A_TimeIdle.</td>
  </tr>
</table>
<h3 id="gui">GUI-Fenster und Menüleisten</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="DefaultGui">
    <td>A_DefaultGui <span class="ver">[v1.1.23+]</span></td>
    <td>Name oder Nummer der <a href="lib/Gui.htm#Default">Standard-GUI</a> des aktuellen Threads.</td>
  </tr>
  <tr id="DefaultListView">
    <td>A_DefaultListView <span class="ver">[v1.1.23+]</span></td>
    <td><a href="lib/Gui.htm#Events">Variablenname</a> oder <a href="lib/Gui.htm#HwndOutputVar">HWND</a> des <a href="lib/ListView.htm">ListView-Steuerelements</a>, mit dem die <a href="lib/ListView.htm#BuiltIn">ListView-Funktionen</a> arbeiten. Wenn die Standard-GUI keine ListView hat, ist diese Variable leer.</td>
  </tr>
  <tr id="DefaultTreeView">
    <td>A_DefaultTreeView <span class="ver">[v1.1.23+]</span></td>
    <td><a href="lib/Gui.htm#Events">Variablenname</a> oder <a href="lib/Gui.htm#HwndOutputVar">HWND</a> des <a href="lib/TreeView.htm">TreeView-Steuerelements</a>, mit dem die <a href="lib/TreeView.htm#BuiltIn">TreeView-Funktionen</a> arbeiten. Wenn die Standard-GUI keine TreeView hat, ist diese Variable leer.</td>
  </tr>
  <tr id="Gui">
    <td>A_Gui</td>
    <td>Name oder Nummer der <a href="lib/Gui.htm">GUI</a>, die den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Diese Variable ist leer, es sei denn, ein GUI-Steuerelement, Menüpunkt oder Ereignis wie GuiClose/GuiEscape hat den aktuellen Thread gestartet.</td>
  </tr>
  <tr id="GuiControl">
    <td>A_GuiControl</td>
    <td>Der Name der zugeordneten Variable des GUI-Steuerelements, das den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Wenn dieses Steuerelement keine <a href="lib/Gui.htm#Events">zugeordnete Variable</a> hat, enthält A_GuiControl stattdessen den Text oder die Beschriftung des Steuerelements, bis zu einer Länge von 63 Zeichen (dies wird meist verwendet, um zu vermeiden, jeder Schaltfläche einen Variablennamen zu geben). A_GuiControl ist leer, wenn: 1) A_Gui leer ist; 2) ein GUI-Menüpunkt oder Ereignis wie GuiClose/GuiEscape den aktuellen Thread gestartet hat; 3) das Steuerelement keine zugeordnete Variable und Beschriftung hat; oder 4) das Steuerelement, das den aktuellen Thread ursprünglich gestartet hat, nicht mehr existiert (z.B. aufgrund von <a href="lib/Gui.htm#Destroy">Gui Destroy</a>).</td>
  </tr>
  <tr id="GuiWidth">
    <td>A_GuiWidth<br>
    A_GuiHeight</td>
    <td>Diese Variablen enthalten die Breite und Höhe des GUI-Fensters für <a href="lib/Gui.htm#GuiSize">GuiSize</a>-Ereignisse. Diese gelten nur für den Clientbereich des GUI-Fensters (das ist der Bereich ohne Titelleiste, Menüleiste und Rahmen). <span class="ver">[v1.1.11+]</span>: Diese Werte werden durch die <a href="lib/Gui.htm#DPIScale">DPI-Skalierung</a> beeinflusst.</td>
  </tr>
  <tr>
    <td><span id="GuiX"></span><span id="GuiY"></span>A_GuiX<br>
    A_GuiY</td>
    <td>Diese Variablen enthalten die X- und Y-Koordinate für <a href="lib/Gui.htm#GuiContextMenu">GuiContextMenu</a>- und <a href="lib/Gui.htm#GuiDropFiles">GuiDropFiles</a>-Ereignisse. Die Koordinaten sind relativ zur linken oberen Ecke des Fensters. <span class="ver">[v1.1.11+]</span>: Diese Werte werden durch die <a href="lib/Gui.htm#DPIScale">DPI-Skalierung</a> beeinflusst.</td>
  </tr>
  <tr>
    <td><span id="GuiEvent"></span><span id="GuiControlEvent"></span>A_GuiEvent<br><span class="small80">oder A_GuiControlEvent</span></td>
    <td><p>Die Art des Ereignisses, das den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Wenn der Thread nicht durch eine <a href="lib/Gui.htm">GUI-Aktion</a> gestartet wurde, ist diese Variable leer. Andernfalls enthält sie eine der folgenden Zeichenketten:</p>
      <p><strong>Normal:</strong> Das Ereignis wurde via Linksklick oder Tastendrücke (z.B. <kbd>↑</kbd>, <kbd>→</kbd>, <kbd>↓</kbd>, <kbd>←</kbd>, <kbd>Tab</kbd>, <kbd>Leer</kbd> oder unterstrichene Tastaturkurzbefehle) ausgelöst. Dieser Wert wird auch für Menüpunkte und spezielle Ereignisse wie GuiClose und GuiEscape verwendet.</p>
      <p><strong>DoubleClick:</strong> Das Ereignis wurde durch einen Doppelklick ausgelöst. Hinweis: Der erste Klick des Doppelklicks bewirkt immer noch, dass ein <em>Normal</em>-Ereignis ausgelöst wird. Mit anderen Worten, die Subroutine wird zweimal gestartet: Zuerst durch den ersten Klick und dann durch den zweiten Klick.</p>
      <p><strong>RightClick:</strong> Tritt nur bei <a href="lib/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="lib/ListView.htm">ListViews</a> und <a href="lib/TreeView.htm">TreeViews</a> auf.</p>
      <p><strong>Kontextabhängige Werte:</strong> Siehe <a href="lib/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="lib/Gui.htm#GuiDropFiles">GuiDropFiles</a>, <a href="lib/GuiControls.htm#Slider">Slider</a>, <a href="lib/GuiControls.htm#MonthCal">MonthCal</a>, <a href="lib/ListView.htm">ListView</a> und <a href="lib/TreeView.htm">TreeView</a>.</p>
    </td>
  </tr>
  <tr id="EventInfo">
    <td>A_EventInfo</td>
    <td><p>Enthält zusätzliche Informationen über die folgenden Ereignisse:</p>
      <ul>
        <li>Das <a href="lib/OnClipboardChange.htm#label">OnClipboardChange-Label</a></li>
        <li><a href="Hotkeys.htm#Wheel">Mausrad-Hotkeys</a> (WheelDown/Up/Left/Right)</li>
        <li><a href="lib/OnMessage.htm">OnMessage()</a></li>
        <li><a href="lib/RegisterCallback.htm">RegisterCallback()</a></li>
        <li><a href="misc/RegExCallout.htm">Callouts in Regulären Ausdrücken</a></li>
        <li><a href="lib/Gui.htm#label">GUI-Ereignisse</a>, namentlich <a href="lib/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="lib/Gui.htm#GuiDropFiles">GuiDropFiles</a>, <a href="lib/GuiControls.htm#ListBox">ListBox</a>, <a href="lib/ListView.htm">ListView</a>, <a href="lib/TreeView.htm">TreeView</a> und <a href="lib/GuiControls.htm#StatusBar">StatusBar</a>. Wenn es keine zusätzlichen Informationen über ein Ereignis gibt, enthält A_EventInfo den Wert 0.</li>
      </ul></td>
  </tr>
</table>
<p class="note"><strong>Hinweis:</strong> Jeder <a href="misc/Threads.htm">Thread</a> hat seine eigenen Werte für A_Gui, A_GuiControl, A_GuiX/Y, A_GuiEvent und A_EventInfo, aber nicht für Variablen wie A_ThisHotkey. Wenn also ein Thread von einem anderen unterbrochen wird, sieht er bei seiner Wiederaufnahme immer noch seine ursprünglichen/korrekten Werte in diesen Variablen.</p>
<h3 id="h">Hotkeys, Hotstrings und benutzerdefinierte Menüpunkte</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="ThisMenuItem">
    <td>A_ThisMenuItem</td>
    <td>Der Name des zuletzt ausgewählten <a href="lib/Menu.htm">benutzerdefinierten Menüpunkts</a> (andernfalls leer).</td>
  </tr>
  <tr id="ThisMenu">
    <td>A_ThisMenu</td>
    <td>Der Name des Menüs, wo A_ThisMenuItem ausgewählt wurde.</td>
  </tr>
  <tr id="ThisMenuItemPos">
    <td>A_ThisMenuItemPos</td>
    <td>Eine Nummer, die die <u>aktuelle</u> Position von A_ThisMenuItem innerhalb von A_ThisMenu angibt. Der erste Menüpunkt ist 1, der zweite 2 und so weiter. Menütrennlinien werden mitgezählt. Diese Variable ist leer, wenn A_ThisMenuItem leer ist oder innerhalb von A_ThisMenu nicht mehr existiert. Sie ist auch leer, wenn A_ThisMenu selbst nicht mehr existiert.</td>
  </tr>
  <tr id="ThisHotkey">
    <td>A_ThisHotkey</td>
    <td><p>Der zuletzt ausgeführte <a href="Hotkeys.htm">Hotkey</a> oder <a href="Hotstrings.htm">nicht-automatisch-ersetzende Hotstring</a> (andernfalls leer), z.B. #z. Dieser Wert ändert sich, wenn der <a href="misc/Threads.htm">aktuelle Thread</a> von einem anderen Hotkey oder Hotstring unterbrochen wird, daher ist es ratsam, diesen Wert sofort in eine andere Variable zu speichern, wenn der originale Wert später für eine andere Subroutine benötigt wird.</p>
      <p>Jeder neu erstellte Hotkey – entweder via <a href="lib/Hotkey.htm">Hotkey-Befehl</a> oder <a href="Hotkeys.htm">Zweifach-Doppelpunkt-Label</a> – erhält einen festen Namen, der sich aus dem Tastennamen und der Reihenfolge der Modifikatorsymbolen zusammensetzt und von allen <a href="lib/_IfWinActive.htm#variant">Varianten</a> des Hotkeys verwendet wird.</p>
      <p>Jeder neu erstellte Hotstring – entweder via <a href="lib/Hotstring.htm">Hotstring-Funktion</a> oder <a href="Hotstrings.htm">Zweifach-Doppelpunkt-Label</a> – erhält einen festen Namen, der sich aus der auslösenden Zeichenkette und der Sequenz von Optionszeichen zusammensetzt.</p>
      <p>Siehe auch: <a href="#ThisLabel">A_ThisLabel</a></p></td>
  </tr>
  <tr id="PriorHotkey">
    <td>A_PriorHotkey</td>
    <td>Dasselbe wie oben, aber für den vorherigen Hotkey. Andernfalls leer.</td>
  </tr>
  <tr id="PriorKey">
    <td>A_PriorKey</td>
    <td><span class="ver">[v1.1.01+]</span>: Der Name der Taste, die vor dem Drücken oder Loslassen der letzten Taste gedrückt wurde, oder leer, wenn im Tastenverlauf kein entsprechender Tastendruck gefunden werden kann. Alle via Skript erzeugten Eingaben werden ignoriert. Bevor diese Variable verwendet werden kann, muss der <a href="lib/_InstallKeybdHook.htm">Tastatur</a>- oder <a href="lib/_InstallMouseHook.htm">Maus-Hook</a> installiert und der <a href="lib/KeyHistory.htm">Tastenverlauf</a> aktiviert sein.</td>
  </tr>
  <tr id="TimeSinceThisHotkey">
    <td>A_TimeSinceThisHotkey</td>
    <td>Die Zeit in Millisekunden, die seit dem Drücken von A_ThisHotkey verstrichen ist. Dieser Wert ist -1, wenn A_ThisHotkey leer ist.</td>
  </tr>
  <tr id="TimeSincePriorHotkey">
    <td>A_TimeSincePriorHotkey</td>
    <td>Die Zeit in Millisekunden, die seit dem Drücken von A_PriorHotkey verstrichen ist. Dieser Wert ist -1, wenn A_PriorHotkey leer ist.</td>
  </tr>
  <tr id="EndChar">
    <td>A_EndChar</td>
    <td>Ein <a href="Hotstrings.htm#EndChars">Endungszeichen</a>, das der Benutzer zuletzt gedrückt hat, um einen <a href="Hotstrings.htm">nicht-automatisch-ersetzenden Hotstring</a> auszulösen. Wenn kein Endungszeichen erforderlich war (wegen der <a href="Hotstrings.htm#Asterisk">*-Option</a>), ist diese Variable leer.</td>
  </tr>
</table>
<h3 id="os">Betriebssystem und Benutzerinformationen</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="ComSpec">
    <td>ComSpec <span class="ver">[v1.0.43.08+]</span><br>
    A_ComSpec <span class="ver">[v1.1.28+]</span></td>
    <td>
      <p>Enthält dieselbe Zeichenkette wie die ComSpec-Umgebungsvariable, was üblicherweise der vollständige Pfad zur ausführbaren Datei der Eingabeaufforderung (cmd.exe) ist. Diese Variable wird oft mit <a href="lib/Run.htm">Run/RunWait</a> verwendet. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Windows\system32\cmd.exe</pre>
    </td>
  </tr>
  <tr id="Temp">
    <td>A_Temp<br>
    <span class="ver">[v1.0.43.09+]</span></td>
    <td><p>Der vollständige Pfadname des Ordners zum Speichern von temporären Dateien. Folgende Orte werden der Reihenfolge nach durchsucht, um den Pfadnamen zu ermitteln: 1) <a href="Concepts.htm#environment-variables">Umgebungsvariable</a> TMP, TEMP oder USERPROFILE; 2) Windows-Verzeichnis. Zum Beispiel:</p>
    <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\AppData\Local\Temp</pre>
  </td>
  </tr>
  <tr id="OSType">
    <td>A_OSType</td>
    <td>Der Typ des Betriebssystems. Da AutoHotkey 1.1 nur NT-basierte Betriebssysteme unterstützt, enthält diese Variable immer WIN32_NT. Ältere Versionen von AutoHotkey geben WIN32_WINDOWS zurück, wenn Windows 95/98/ME verwendet wird.</td>
  </tr>
  <tr id="OSVersion">
    <td>A_OSVersion</td>
    <td><p>Enthält je nach Windows-Version eine der folgenden Zeichenketten: WIN_7 in <span class="ver">[AHK_L 42+]</span>, WIN_8 in <span class="ver">[v1.1.08+]</span>, WIN_8.1 in <span class="ver">[v1.1.15+]</span>, WIN_VISTA, WIN_2003, WIN_XP, WIN_2000.</p>
    <p>Beachten Sie, dass das Betriebssystem eine andere Versionsnummer meldet bzw. A_OSVersion einen anderen Wert enthält, wenn der Kompatibilitätsmodus im Eigenschaftenfenster der AutoHotkey-EXE-Datei oder des kompilierten Skripts eingeschaltet wurde.</p>
    <p><span class="ver">[v1.1.20+]</span>: Wenn die Systemversion nicht als eine der oben genannten erkannt wird, enthält die Variable eine Zeichenkette im Format "Haupt.Neben.Build". Zum Beispiel ist <code class="no-highlight">10.0.14393</code> Windows 10 Build 14393, auch bekannt als Version 1607.</p>
      <pre><em>; Das folgende Beispiel ist obsolet, da diese Systeme nicht mehr unterstützt werden.</em>
if A_OSVersion in WIN_NT4,WIN_95,WIN_98,WIN_ME  <em>; Hinweis: Keine Leerzeichen vor oder nach den Kommas.</em>
{
    MsgBox Dieses Skript benötigt Windows 2000/XP oder höher.
    ExitApp
}</pre>
    </td>
  </tr>
  <tr id="Is64bitOS">
    <td>A_Is64bitOS</td>
    <td><span class="ver">[v1.1.08+]</span>: Enthält 1 (true), wenn das System 64-Bit ist, oder 0 (false), wenn es 32-Bit ist.</td>
  </tr>
  <tr id="PtrSize">
    <td>A_PtrSize</td>
    <td><span class="ver">[AHK_L 42+]</span>: Enthält die Größe eines Pointers in Bytes. Dieser Wert ist entweder 4 (32-Bit) oder 8 (64-Bit), abhängig davon, mit welcher EXE-Datei das Skript ausgeführt wird.</td>
  </tr>
  <tr id="Language">
    <td>A_Language</td>
    <td>Die Standardsprache des Systems als <a href="misc/Languages.htm">4-stelliger Code</a>.</td>
  </tr>
  <tr id="ComputerName">
    <td>A_ComputerName</td>
    <td>Der Netzwerkname des Computers.</td>
  </tr>
  <tr id="UserName">
    <td>A_UserName</td>
    <td>Der Anmeldename des Benutzers, der dieses Skript gestartet hat.</td>
  </tr>
  <tr id="WinDir">
    <td>A_WinDir</td>
    <td>Das Windows-Verzeichnis. Zum Beispiel: <code class="no-highlight">C:\Windows</code></td>
  </tr>
  <tr id="ProgramFiles">
    <td>A_ProgramFiles<br>
    oder ProgramFiles</td>
    <td>
      <p>Das Verzeichnis der Programmdateien (z.B. <code class="no-highlight">C:\Programme</code> oder <code class="no-highlight">C:\Programme (x86)</code>). Die <a href="Concepts.htm#environment-variables">Umgebungsvariable</a> <em>ProgramFiles</em> enthält üblicherweise denselben Wert.</p>
      <p>Für <a href="#Is64bitOS">64-Bit-Systeme</a> (nicht 32-Bit-Systeme) gilt folgendes:</p>
      <ul>
        <li>Wenn die EXE-Datei, mit der das Skript ausgeführt wird, 32-Bit ist, enthält A_ProgramFiles den Pfadnamen des Ordners "Programme (x86)".</li>
        <li>Für 32-Bit-Prozesse enthält die Umgebungsvariable <em>ProgramW6432</em> den Pfadnamen des 64-Bit-Ordners "Programme". In Windows 7 und höher wird sie auch für 64-Bit-Prozesse gesetzt.</li>
        <li>Die Umgebungsvariable <em>ProgramFiles(x86)</em> enthält den Pfadnamen des 32-Bit-Ordners "Programme (x86)".</li>
      </ul>
      <p><span class="ver">[v1.0.43.08+]</span>: Das Präfix "A_" kann weggelassen werden, um den Umstieg auf <a href="lib/_NoEnv.htm">#NoEnv</a> zu unterstützen.</p>
    </td>
  </tr>
  <tr id="AppData">
    <td>A_AppData<br>
    <span class="ver">[v1.0.43.09+]</span></td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der anwendungsspezifische Daten des aktuellen Benutzers enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\AppData\Roaming</pre>
    </td>
  </tr>
  <tr id="AppDataCommon">
    <td>A_AppDataCommon<br>
    <span class="ver">[v1.0.43.09+]</span></td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der anwendungsspezifische Daten aller Benutzer enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\ProgramData</pre>
    </td>
  </tr>
  <tr id="Desktop">
    <td>A_Desktop</td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der die Desktop-Dateien des aktuellen Benutzers enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\Desktop</pre>
    </td>
  </tr>
  <tr id="DesktopCommon">
    <td>A_DesktopCommon</td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der die Desktop-Dateien aller Benutzer enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\Public\Desktop</pre>
    </td>
  </tr>
  <tr id="StartMenu">
    <td>A_StartMenu</td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der die Startmenü-Dateien des aktuellen Benutzers enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\AppData\Roaming\Microsoft\Windows\Start Menu</pre>
    </td>
  </tr>
  <tr id="StartMenuCommon">
    <td>A_StartMenuCommon</td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der die Startmenü-Dateien aller Benutzer enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\ProgramData\Microsoft\Windows\Start Menu</pre>
    </td>
  </tr>
  <tr id="Programs">
    <td>A_Programs</td>
    <td>
      <p>Der vollständige Pfadname des Startmenü-Ordners "Programme" des aktuellen Benutzers. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs</pre>
    </td>
  </tr>
  <tr id="ProgramsCommon">
    <td>A_ProgramsCommon</td>
    <td>
      <p>Der vollständige Pfadname des Startmenü-Ordners "Programme" aller Benutzer. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\ProgramData\Microsoft\Windows\Start Menu\Programs</pre>
  </td>
  </tr>
  <tr id="Startup">
    <td>A_Startup</td>
    <td>
      <p>Der vollständige Pfadname des Startmenü-Ordners "Autostart" des aktuellen Benutzers. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</pre>
  </td>
  </tr>
  <tr id="StartupCommon">
    <td>A_StartupCommon</td>
    <td>
      <p>Der vollständige Pfadname des Startmenü-Ordners "Autostart" aller Benutzer. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup</pre>
  </td>
  </tr>
  <tr id="MyDocuments">
    <td>A_MyDocuments</td>
    <td>
      <p>Der vollständige Pfadname des Ordners "Dokumente", der beliebige Dateien (vorzugsweise Dokumente) des aktuellen Benutzers enthält. Im Gegensatz zu den meisten anderen ähnlichen Variablen wird, wenn der Ordner das Stammverzeichnis eines Laufwerks ist, der umgekehrte Schrägstrich am Ende weggelassen (z.B. <code class="no-highlight">M:</code> statt <code class="no-highlight">M:\</code>). Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\Documents</pre>
  </td>
  </tr>
  <tr id="IsAdmin">
    <td>A_IsAdmin</td>
    <td><p>Enthält 1, wenn der aktuelle Benutzer Adminrechte hat, andernfalls 0.</p>
    <p id="RequireAdmin">Wenn das Skript sich selbst mit Adminrechten neu starten soll (oder um diese Rechte vom Benutzer via Dialogfenster einzufordern), verwenden Sie <a href="lib/Run.htm#RunAs">Run *RunAs</a>. Beachten Sie aber, dass die Skriptausführung als Administrator dazu führt, dass alle Programme, die vom Skript gestartet werden, ebenfalls als Administrator ausgeführt werden. Eine mögliche Alternative finden Sie in <a href="FAQ.htm#uac">der FAQ</a>.</p>
    </td>
  </tr>
  <tr id="Screen">
    <td><p>A_ScreenWidth<br>
    A_ScreenHeight</p></td>
    <td><p>Die Breite und Höhe des primären Bildschirms in Pixel (z.B. 1024 und 768).</p>
      <p>Mit <a href="lib/SysGet.htm">SysGet</a> können die Dimensionen von nicht-primären Bildschirmen abgerufen werden.</p>
      <p>Um stattdessen die Breite und Höhe des gesamten Desktops abzurufen (selbst wenn er sich über mehrere Bildschirme erstreckt), verwenden Sie folgendes Beispiel:</p>
<pre>
<a href="lib/SysGet.htm">SysGet</a>, VirtuelleBreite, 78
<a href="lib/SysGet.htm">SysGet</a>, VirtuelleHöhe, 79
</pre>
    <p>Mit <a href="lib/SysGet.htm">SysGet</a> kann auch der Arbeitsbereich eines Bildschirms abgerufen werden. Dieser Bereich ist in der Regel kleiner als der gesamte Bildschirmbereich, da die Taskleiste und andere registrierte Desktopsymbolleisten ausgeschlossen werden.</p></td>
  </tr>
  <tr id="ScreenDPI">
    <td>A_ScreenDPI <span class="ver">[v1.1.11+]</span></td>
    <td>Die Anzahl der Pixel pro logischem Zoll entlang der Bildschirmbreite. In einem System mit mehreren anzeigefähigen Bildschirmen ist dieser Wert für alle Bildschirme gleich. Standardmäßig gilt ein DPI-Wert von 96, abhängig von der Textgrößeneinstellung des Systems. Siehe auch <a href="lib/Gui.htm#DPIScale">Gui -DPIScale</a>.</td>
  </tr>
  <tr id="IPAddress">
    <td>A_IPAddress1 bis 4</td>
    <td>Die IP-Adressen der ersten 4 Netzwerkadapter im Computer.</td>
  </tr>
</table>
<h3 id="misc">Sonstiges</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="Cursor">
    <td>A_Cursor</td>
    <td><p>Der Typ des aktuell angezeigten Mauszeigers. Die Variable enthält eines der folgenden Wörter: AppStarting, Arrow, Cross, Help, IBeam, Icon, No, Size, SizeAll, SizeNESW, SizeNS, SizeNWSE, SizeWE, UpArrow, Wait, Unknown. Die Großbuchstaben hinter Size sind Himmelsrichtungen, z.B. NESW = NorthEast+SouthWest (Nordost+Südwest). Die handförmigen Mauszeiger (Zeigen und Greifen) sind als Unknown klassifiziert.</p></td>
  </tr>
  <tr id="Caret">
    <td>A_CaretX<br>
    A_CaretY</td>
    <td><p>Die aktuelle X- und Y-Koordinate des Textcursors (Texteinfügemarke). Standardmäßig sind die Koordinaten relativ zum aktiven Fenster. Mit <a href="lib/CoordMode.htm">CoordMode</a> können die Koordinaten relativ zum gesamten Bildschirm gemacht werden. Wenn kein Fenster aktiv ist oder die Position des Textcursors nicht ermittelt werden kann, sind diese Variablen leer.</p>
      <p>Das folgende Skript zeigt die aktuellen Positionsdaten eines Textcursors in einem sich selbst aktualisierenden Tooltip an. Beachten Sie, dass einige Fenster (z.B. bestimmte Versionen von MS Word) immer die gleichen Positionsdaten melden, egal wo sich der Textcursor gerade befindet.</p>
<pre>
#Persistent
SetTimer, TextcursorAbfragen, 100
return
TextcursorAbfragen:
    ToolTip, X%A_CaretX% Y%A_CaretY%, A_CaretX, A_CaretY - 20
return
</pre>
    </td>
  </tr>
  <tr id="Clipboard">
    <td>Clipboard</td>
    <td rowspan="2">Kann verwendet werden, um den Inhalt der systeminternen Zwischenablage abzurufen oder zu setzen. Einzelheiten finden Sie unter <a href="misc/Clipboard.htm">Clipboard</a>.</td>
  </tr>
  <tr id="A_Clipboard">
    <td>A_Clipboard <span class="ver">[v1.1.35+]</span></td>
  </tr>
  <tr id="ClipboardAll">
    <td>ClipboardAll</td>
    <td>Der gesamte Inhalt der Zwischenablage (z.B. Formatierung und Text). Einzelheiten finden Sie unter <a href="misc/Clipboard.htm#ClipboardAll">ClipboardAll</a>.</td>
  </tr>
  <tr id="ErrorLevel">
    <td>ErrorLevel</td>
    <td>Diese Variable wird gesetzt, um den Erfolg oder Misserfolg bestimmter Befehle zu kennzeichnen. Einzelheiten finden Sie unter <a href="misc/ErrorLevel.htm">ErrorLevel</a>.</td>
  </tr>
  <tr id="LastError">
    <td>A_LastError</td>
    <td>Das Ergebnis der Systemfunktion GetLastError() oder des letzten indirekten Aufrufs eines COM-Objekts. Einzelheiten finden Sie unter <a href="lib/DllCall.htm#LastError">DllCall()</a> und <a href="lib/Run.htm#LastError">Run/RunWait</a>.</td>
  </tr>
  <tr id="TrueFalse">
    <td>True<br />False</td>
    <td><p>Enthalten 1 und 0. Diese können verwendet werden, um die Lesbarkeit eines Skripts zu verbessern. Einzelheiten finden Sie unter <a href="Concepts.htm#boolean">Boolesche Werte</a>.</p>
    </td>
  </tr>
</table>
<h3 id="loop">Loop</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="Index">
    <td>A_Index</td>
    <td>Enthält die Nummer der aktuellen Schleifenwiederholung (ein 64-Bit-Integer). Sie enthält 1, wenn der Körper der Schleife zum ersten Mal ausgeführt wurde. Beim zweiten Mal enthält sie 2 und so weiter. Wenn eine innere Schleife von einer äußeren Schleife umschlossen ist, hat die innere Schleife Vorrang. A_Index funktioniert in <a href="Language.htm#loop-statement">jeder Schleifenvariante</a>, enthält aber außerhalb einer Schleife den Wert 0.</td>
  </tr>
  <tr>
    <td>A_LoopFileName, etc.</td>
    <td>Diese und verwandte Variablen sind nur für <a href="lib/LoopFile.htm">Datei-Schleifen</a> relevant.</td>
  </tr>
  <tr>
    <td>A_LoopRegName, etc.</td>
    <td>Diese und verwandte Variablen sind nur für <a href="lib/LoopReg.htm">Registry-Schleifen</a> relevant.</td>
  </tr>
  <tr>
    <td>A_LoopReadLine</td>
    <td>Siehe <a href="lib/LoopReadFile.htm">dateilesende Schleife</a>.</td>
  </tr>
  <tr>
    <td>A_LoopField</td>
    <td>Siehe <a href="lib/LoopParse.htm">parsende Schleife</a>.</td>
  </tr>
</table>

<h2 id="cap">Kapazität und Speicher von Variablen</h2>
<ul>
  <li>Jede Variable kann bis zu 64 MB Text enthalten (dieses Limit kann mit <a href="lib/_MaxMem.htm">#MaxMem</a> erhöht werden).</li>
  <li>Wenn einer Variable eine neue Zeichenkette zugewiesen wird, die länger ist als der aktuelle Inhalt der Variable, wird der reservierte Systemspeicher automatisch erweitert.</li>
  <li>Um den reservierten Speicher einer großen Variable wieder freizugeben, weisen Sie ihr einen leeren Wert zu (z.B. <code>Var := ""</code>).</li>
  <li>Es können beliebig viele Variablen erstellt werden. Das Programm unterstützt mehrere Millionen Variablen ohne nennenswerte Performanzeinbußen.</li>
  <li>Befehle, Funktionen und Ausdrücke, die numerische Eingaben akzeptieren, unterstützen in der Regel Floating-Point-Werte mit einer Genauigkeit von 15 Dezimalstellen. Integer können vorzeichenfähige 64-Bit-Werte sein, die einen Bereich von -9223372036854775808 (-0x8000000000000000) bis 9223372036854775807 (0x7FFFFFFFFFFFFFFF) abdecken. Integerkonstanten oder numerische Zeichenketten außerhalb dieses Bereichs werden nicht unterstützt, und können zu inkonsistenten Ergebnissen führen, wenn sie als Zahlen verwendet werden. Arithmetische Operationen mit Integern werden bei Überlauf umgekehrt (z.B. 0x7FFFFFFFFFFFFFFF + 1 = -0x8000000000000000).</li>
</ul>
</body>
</html>
