<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Skriptkompatibilität | AutoHotkey v1</title>
<meta name="description" content="Finden Sie heraus, was sich im Vergleich zu AutoHotkey v1.0 geändert hat und wie groß die Auswirkungen sind." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Skriptkompatibilität</h1>

<p>Obwohl viele Skripte, die für AutoHotkey v1.0 geschrieben wurden, für AutoHotkey v1.1 nicht geändert werden müssen, kann es vorkommen, dass einige Skripte nicht richtig funktionieren, weil beide Versionen notwendige Unterschiede aufweisen. Die meisten Benutzer müssen sich keine Sorgen machen, da die problematischen Unterschiede nur erweiterte Funktionalitäten wie DllCall() betreffen.</p>
<p>AutoHotkey v1.1 ist auch unter den Namen "AutoHotkey_L" bekannt. AutoHotkey v1.0 trägt seit einiger Zeit den Namen "AutoHotkey Basic". Es gibt einige ältere Versionen von AutoHotkey_L, die eine Versionsnummer im Format 1.0.* haben, daher verwendet dieses Dokument die Namen der beiden AutoHotkey-Zweige, um Missverständnissen vorzubeugen.</p>
<p class="note"><strong>Hinweis:</strong> Einige der am häufigsten auftretenden Probleme sind auf Änderungen bzgl. der Unterstützung von Unicode-Text zurückzuführen. Mit der ANSI-Version von AutoHotkey_L können solche Probleme umgangen werden.</p>

<h2 id="toc">Inhaltsverzeichnis</h2>
<h3 id="toc_basic">Grundlagen</h3>
<p>Hohe Auswirkung:</p>
<ul>
  <li><a href="#Syntax_Errors">Bestimmte Syntaxfehler werden nicht länger toleriert</a></li>
  <li><a href="#FileRead">FileRead könnte fehlerhafte Binärdaten zurückgeben</a></li>
  <li><a href="#Names">Variablen- und Funktionsnamen dürfen keine [, ] oder ? enthalten</a></li>
  <li><a href="#DPIScale">DPI-Skalierung ist standardmäßig für GUIs aktiviert</a></li>
</ul>
<p>Mittlere Auswirkung:</p>
<ul>
  <li><a href="#Transform">Der <em>Unicode</em>-Unterbefehl von Transform ist in Unicode-Versionen nicht verfügbar</a></li>
  <li><a href="#Default_Script">AutoHotkey.ahk wird anstelle von AutoHotkey.ini gestartet</a></li>
  <li><a href="#SetFormat">SetFormat, Integer, <strong>H</strong> ist Groß-/Kleinschreibung-sensitiv</a></li>
  <li><a href="#LastError">A_LastError wird von noch mehr Befehlen gesetzt</a></li>
  <li><a href="#MsgBox">MsgBox-Befehle behandeln Kommas konsistenter</a></li>
  <li><a href="#GuiOwner">Gui +Owner überschreibt zusätzliche Styles</a></li>
  <li><a href="#VistaSound">SoundSet und SoundGet funktionieren besser in Vista und höher</a></li>
  <li><a href="#Tilde">Tilde (~) beeinflusst das Verhalten benutzerdefinierter Modifikatortasten</a></li>
  <li><a href="#ComboUpDown"><code>x &amp; y::</code> bewirkt, dass <code>x::</code> und <code>x up::</code> ausgelöst werden, sobald x losgelassen wird</a></li>
</ul>
<p>Geringe Auswirkung:</p>
<ul>
  <li><a href="#IfIs"><em>If Var is [not] Typ</em> ignoriert standardmäßig die Sprach- und Regionseinstellungen des Systems</a></li>
  <li><a href="#Window_Groups">GroupActivate setzt ErrorLevel; <em>Label</em> von GroupAdd funktioniert anders</a></li>
  <li><a href="#Run">Run und RunWait interpretieren <em>Ziel</em> unterschiedlich</a></li>
  <li><a href="#ControlZ">STRG+Z wird nicht als End-of-File (Dateiende) interpretiert</a></li>
  <li><a href="#Compatibility_Mode">Der Kompatibilitätsmodus kann irreführend sein</a></li>
  <li><a href="#IsCompiled">A_IsCompiled ist immer schreibgeschützt</a></li>
  <li><a href="#Escaped_Whitespace">Am Anfang und Ende befindliche `t-Sequenzen werden nicht länger verworfen</a></li>
</ul>

<h3 id="toc_advanced">Erweitert</h3>
<ul>
  <li><a href="#Format">Unicode vs. ANSI</a>
    <ul>
      <li><a href="#VarSetCapacity">VarSetCapacity</a></li>
      <li><a href="#DllCall">DllCall</a></li>
      <li><a href="#NumPutGet">NumPut / NumGet</a></li>
    </ul>
  </li>
  <li><a href="#ptr">Pointer-Größe</a></li>
</ul>

<h2 id="Basic">Grundlagen</h2>

<span id="Validation"></span><h3 id="Syntax_Errors">Syntaxfehler</h3>
<p>Bestimmte Syntaxfehler, die bei AutoHotkey Basic toleriert wurden, sind bei AutoHotkey_L nicht mehr erlaubt. Viele dieser Fehler können leicht korrigiert werden, sobald sie entdeckt werden. In AutoHotkey_L werden die folgenden Fehler sofort nach dem Start eines Skripts erkannt - solche Fehler müssen korrigiert werden, damit das Skript lauffähig ist:</p>
<ul>
  <li>Zwischen dem Namen eines Befehls und seinen Parametern muss ein Leerzeichen, Tabulatorzeichen oder Komma stehen. Zum Beispiel sind <code class="no-highlight">MsgBox&lt; foo</code> und <code class="no-highlight">If!foo</code> keine gültigen Angaben.</li>
  <li><code>Hotkey, If<i>Irgendetwas</i></code>, wobei <i>Irgendetwas</i> ungültig ist, wird nicht toleriert.</li>
</ul>
<p>Einige Syntaxfehler werden während der Skriptausführung erkannt. Das Skript wird eine Fehlermeldung anzeigen, bevor es den aktuellen Thread verlässt:</p>
<ul>
  <li><strong>Häufig auftretend:</strong> Unbekannte oder falsch formatierte Optionen von <a href="lib/Gui.htm#Options">Gui</a>, <a href="lib/Gui.htm#Show">Gui Show</a> oder <a href="lib/GuiControl.htm">GuiControl</a>.</li>
  <li>GroupAdd mit leerem Gruppennamen. Früher bewirkte dieser Fehler, dass der Thread <em>ohne Meldung</em> beendet wurde.</li>
  <li>Die Gui-Option <a href="lib/Gui.htm#LastFoundExist">+LastFoundExist</a> darf nicht mit einer anderen Option kombiniert werden, weil sie sich sonst wie <a href="lib/Gui.htm#LastFound">+LastFound</a> verhalten würde.</li>
</ul>
<p>Andere Syntaxfehler werden aktuell nicht erkannt, aber verursachen Probleme mit AutoHotkey_L:</p>
<ul>
  <li><a href="Variables.htm#concat">Auto-Verkettung</a> mit <code>(</code> ist selektiver, damit einige ungültige Ausdrücke wie <code>12(34)</code> nicht mehr funktionieren.</li>
</ul>

<h3 id="FileRead">FileRead</h3>
<p>In bestimmten Fällen übersetzt <a href="lib/FileRead.htm#Binary">FileRead</a> den Text in eine andere Codepage und kann daher fehlerhafte Binärdaten ausgeben. Um das zu verhindern, fügen Sie die <code class="no-highlight">*c</code>-Option hinzu oder nutzen Sie stattdessen <a href="lib/FileOpen.htm">FileOpen()</a>.</p>

<h3 id="Names">Variablen- und Funktionsnamen</h3>
<p>Die Zeichen <code>[</code>, <code>]</code> und <code>?</code> sind für die Nutzung in <a href="Variables.htm#Expressions">Ausdrücken</a> reserviert und daher nicht mehr in Variablennamen gültig. Folglich benötigt <code>?</code> (das in <a href="Variables.htm#ternary">ternären Operationen</a> benutzt wird) kein Leerzeichen mehr auf beiden Seiten. Siehe auch <a href="Objects.htm#Syntax">Objektsyntax</a>.</p>
<p>Fehler werden oder werden nicht automatisch erkannt:</p>
<ul>
  <li>Wenn der Name einer Variable innerhalb eines Ausdrucks diese Zeichen enthält, wird das Skript in der Regel ohne Fehlermeldung weiterlaufen, aber fehlinterpretiert werden, weil die Zeichen als Operatoren angesehen werden.</li>
  <li>Wenn diese Zeichen in einer <a href="Variables.htm#ref">Doppeldereferenz</a> (double-deref) verwendet werden (z.B. <code>Array%n%</code>, wobei <em>n</em> eines der oben genannten Zeichen enthält), wird bei der Auswertung der Doppeldereferenz während der Skriptausführung eine Fehlermeldung angezeigt.</li>
  <li>Wenn diese Zeichen in einem anderen Kontext verwendet werden (z.B. auf der linken Seite einer Zuweisung, im Namen der Ein-/Ausgabevariable eines Befehls oder zwischen %Prozentzeichen%), wird eine Fehlermeldung angezeigt und der Skriptstart verhindert.</li>
</ul>

<h3 id="DPIScale">DPI-Skalierung</h3>
<p>Die <a href="lib/Gui.htm#DPIScale">DPI-Skalierung</a> ist standardmäßig für Skript-GUIs aktiviert, um sicherzustellen, dass sie gemäß den <a href="Variables.htm#ScreenDPI">systeminternen DPI-Einstellungen</a> skaliert werden. Wenn sie aktiviert ist und die systeminterne DPI-Einstellung ungleich 96 (100&nbsp;%) ist, sind Positionen und Größen, die von Gui-Befehlen akzeptiert oder zurückgegeben werden, nicht mit anderen Befehlen kompatibel. Die DPI-Skalierung kann mit <code>Gui -DPIScale</code> deaktiviert werden.</p>

<h3 id="Transform">Transform</h3>
<p>Einige <i>Transform</i>-Unterbefehle wurden in den Unicode-Versionen von AutoHotkey_L geändert oder deaktiviert:</p>
<ul>
  <li><a href="lib/Transform.htm#Unicode">Transform Unicode</a> ist nicht verfügbar. Unicode-Text kann mit einer regulären Zuweisung an die Zwischenablage übergeben werden. Siehe auch: <a href="lib/StrPut.htm">StrPut()</a> / <a href="lib/StrGet.htm">StrGet()</a>.</li>
  <li><a href="lib/Transform.htm#HTML">Transform HTML</a> unterstützt zusätzliche Features.</li>
</ul>

<h3 id="Default_Script">Standardskript</h3>
<p>Startet man AutoHotkey_L ohne Angabe eines Skripts, wird standardmäßig eine AHK-Datei anstelle einer INI-Datei geladen. Der Name dieser Datei basiert auf dem Dateinamen der aktuellen EXE-Datei. Weitere Informationen finden Sie unter <a href="Scripts.htm#cmd">Befehlszeilenparameter an ein Skript übergeben</a>.</p>

<h3 id="SetFormat">SetFormat, Integer[Fast], H</h3>
<p>Verwendet man ein großes H, werden die Hexadezimalzeichen A-F auch in Großbuchstaben sein. AutoHotkey Basic verwendet hingegen immer Kleinbuchstaben. Siehe <a href="lib/SetFormat.htm">SetFormat</a>.</p>

<h3 id="LastError">A_LastError</h3>
<p>Die folgenden Befehle setzen nun <a href="Variables.htm#LastError">A_LastError</a>, um das Debuggen zu unterstützen: FileAppend, FileRead, FileReadLine, FileDelete, FileCopy, FileMove, FileGetAttrib/Time/Size/Version, FileSetAttrib/Time, FileCreateDir, RegRead, RegWrite, RegDelete. Sobald man einen dieser Befehle benutzt, wird der vorherige Wert von A_LastError überschrieben.</p>

<h3 id="MsgBox">MsgBox</h3>
<p>Die smarte Kommabehandlung des <a href="lib/MsgBox.htm">MsgBox</a>-Befehls wurde geändert, um ihn flexibler und konsistenter mit anderen Befehlen zu machen. In den meisten Fällen wird sich der MsgBox-Befehl wie vorgesehen verhalten. In einigen seltenen Fällen kann es vorkommen, dass sich Skripte, die noch auf das alte, sonderbare Verhalten angewiesen sind, anders als sonst verhalten werden. Zum Beispiel:</p>
<pre><em>; Dies wird nun getrennt als Ausdruck (Optionen) gefolgt von Text (Titel) interpretiert,
; anstatt als einzelner Ausdruck (Text) mit mehreren <a href="Variables.htm#comma">Teilausdrücken</a>:</em>
MsgBox % x, y
<em>; Mit runden Klammern kann die alte Interpretation erzwungen werden:</em>
MsgBox % (x, y)

<em>; Dies wird nun ein leeres Dialogfenster anzeigen, anstatt den Text "0, Titel":</em>
MsgBox 0, Titel
<em>; Diese verhalten sich in AutoHotkey_L und AutoHotkey Basic wie erwartet:</em>
MsgBox 0, Titel, % ""   <em>; Zeigt ein leeres Dialogfenster an</em>
MsgBox 0`, Titel        <em>; Zeigt den Text "0, Titel" an</em>

<em>; Dies wird nun ein leeres Dialogfenster anzeigen, anstatt den Text ", Titel":</em>
MsgBox,, Titel
</pre>

<h3 id="GuiOwner">Gui +Owner</h3>
<p>Wendet man die <a href="lib/Gui.htm#Owner">+Owner</a>-Option auf eine GUI an, wird zusätzlich der WS_CHILD-Style entfernt und der WS_POPUP-Style gesetzt. Diese Änderung kann dazu führen, dass Skripte, die das übergeordnete Fenster einer GUI mit <code class="no-highlight">+Owner</code> setzen, <em>nachdem</em> die Styles gesetzt wurden, nicht mehr ordnungsgemäß funktionieren.</p>

<h3 id="VistaSound">Sound-Befehle in Windows Vista oder höher</h3>
<p><a href="lib/SoundSet.htm">SoundSet</a>, <a href="lib/SoundGet.htm">SoundGet</a>, <a href="lib/SoundSetWaveVolume.htm">SoundSetWaveVolume</a> und <a href="lib/SoundGetWaveVolume.htm">SoundGetWaveVolume</a> werden in Windows Vista oder höher besser unterstützt. Folgende Änderungen treten dabei in Kraft:</p>
<ul>
  <li>Skripte beeinflussen nicht nur sich selbst, sondern das ganze System (wie ursprünglich gedacht).</li>
  <li>Geräte werden anders nummeriert - jeder Ausgang oder Eingang wird als separates Gerät betrachtet.</li>
</ul>

<h3 id="Tilde">Tilde-Präfix und benutzerdefinierte Kombinationen</h3>
<p>In <span class="ver">[v1.1.14+]</span> beeinflusst das <a href="Hotkeys.htm#Tilde">Tilde-Präfix</a> das Verhalten einer Taste, die als Modifikatortaste in einer benutzerdefinierten Tastenkombination verwendet wird.</p>

<h3 id="ComboUpDown">Benutzerdefinierte Kombinationen und Taste-Unten/Oben-Hotkeys</h3>
<p>Wenn sowohl ein Taste-Unten- als auch Taste-Oben-Hotkey für eine benutzerdefinierte Modifikatortaste ohne Tilde-Präfix definiert sind, werden beide beim Loslassen der Taste ausgelöst. Zum Beispiel würde <code>x &amp; y::</code> bewirken, dass <code>x::</code> und <code>x up::</code> ausgelöst werden, wenn x losgelassen wird. Früher wurde <code>x::</code> dabei nie ausgelöst.</p>

<h3 id="IfIs">If Var is [not] Typ</h3>
<p><a href="lib/IfIs.htm">If Var is [not] Typ</a> ignoriert die Sprach- und Regionseinstellungen des Systems, es sei denn, <a href="lib/StringCaseSense.htm">StringCaseSense Locale</a> wurde verwendet.</p>

<h3 id="Window_Groups">Fenstergruppen</h3>
<p><a href="lib/GroupActivate.htm">GroupActivate</a> setzt ErrorLevel auf 1, wenn kein einziges Fenster aktiviert werden konnte, andernfalls auf 0. Früher blieb ErrorLevel unverändert.</p>
<p>Der <em>Label</em>-Parameter von <a href="lib/GroupAdd.htm">GroupAdd</a> gilt für die gesamte Fenstergruppe, nicht nur für eine bestimmte Fensterspezifikation innerhalb der Gruppe. Eine Diskussion zu dieser Änderung kann <a href="https://www.autohotkey.com/community/viewtopic.php?t=61362">im Forum</a> gefunden werden. Allerdings wird dieser Parameter <strong>nicht empfohlen</strong>; überprüfen Sie stattdessen ErrorLevel nach dem Aufruf von GroupActivate.</p>

<h3 id="Run">Run / RunWait</h3>
<p>AutoHotkey_L enthält Verbesserungen hinsichtlich dessen, wie <a href="lib/Run.htm">Run</a> und <a href="lib/Run.htm">RunWait</a> ihren <em>Ziel</em>-Parameter interpretieren. Diese Verbesserungen bieten neue Möglichkeiten, die früher nicht möglich waren, können aber bestehende Skripte beeinträchtigen, die unter AutoHotkey Basic liefen. Das neue Verhalten äußert sich wie folgt:</p>
<ul>
  <li>Wenn <i>Ziel</i> mit einem Anführungszeichen beginnt, wird alles bis zum nächsten Anführungszeichen als Aktion, üblicherweise eine EXE-Datei, interpretiert.</li>
  <li>Andernfalls wird die erste Teilzeichenkette, die mit einem Leerzeichen endet und entweder eine vorhandene Datei ist oder auf .exe, .bat, .com, .cmd oder .hta endet, als Aktion interpretiert. Dadurch können Dateitypen wie beispielsweise .ahk, .vbs oder .lnk beliebige Parameter akzeptieren, während "bekannte" EXE-Dateien wie wordpad.exe weiterhin ohne absoluten Pfad gestartet werden können (wie es früher der Fall war).</li>
</ul>

<h3 id="ControlZ">STRG+Z</h3>
<p><a href="lib/LoopReadFile.htm">Loop Read</a> und <a href="lib/FileReadLine.htm">FileReadLine</a> interpretieren das Zeichen <kbd>Strg</kbd>+<kbd>Z</kbd> (0x1A) nicht länger als Dateiendemarke (end-of-file marker). Jedes <kbd>Strg</kbd>+<kbd>Z</kbd> wird unverändert geladen, selbst wenn es ganz am Ende einer Datei steht. <a href="lib/FileRead.htm">FileRead</a> ignoriert dieses Zeichen bereits und ist daher von diesem Problem nicht betroffen.</p>

<h3 id="Compatibility_Mode">Kompatibilitätsmodus</h3>
<p>Wenn Sie im Eigenschaftsfenster der EXE-Datei, mit der das Skript ausgeführt werden soll, den <a href="https://support.microsoft.com/windows/make-older-apps-or-programs-compatible-with-windows-783d6dd7-b439-bdb0-0490-54eea0f45938">Kompatibilitätsmodus</a> auf Windows 95, NT4 oder 98/ME setzen, kann es vorkommen, dass sich das Skript je nach Inhalt falsch verhält. Das liegt daran, dass der Kompatibilitätsmodus dem Programm eine bestimmte Version von Windows meldet, die AutoHotkey_L nicht unterstützt. Setzt man bspw. den Kompatibilitätsmodus auf Windows 95 oder 98/ME, würde <code>MsgBox %A_OSVersion%</code> die Version <code class="no-highlight">WIN_NT4</code> melden.</p>

<h3 id="IsCompiled">A_IsCompiled</h3>
<p><a href="Variables.htm#IsCompiled">A_IsCompiled</a> enthält eine leere Zeichenkette, wenn das Skript nicht kompiliert ist. Früher blieb sie undefiniert, wodurch Zuweisungen wie <code>A_IsCompiled := 1</code> in einem unkompilierten Skript möglich waren. Nun wird sie in jedem Fall als schreibgeschützte interne Variable behandelt.</p>

<h3 id="Escaped_Whitespace">Escapezeichenversehene Leerraumzeichen</h3>
<p>Escapezeichenversehene Leerraumzeichen wie <code class="no-highlight">`t</code> und <code class="no-highlight">` </code> werden nicht länger am Anfang oder am Ende eines Arguments verworfen. Zum Beispiel ist <code>StringReplace s, s, `t</code> nun gültig und wird alle Tabulatorzeichen aus <em>s</em> entfernen.</p>


<h2 id="Format">Unicode vs. ANSI</h2>
<p class="note"><strong>Hinweis:</strong> Dieser Abschnitt baut auf Themen auf, die in anderen Teilen der Dokumentation behandelt werden: <a href="Concepts.htm#strings">Zeichenketten (Strings)</a>, <a href="Concepts.htm#string-encoding">Zeichenkettenkodierung</a>.</p>
<p>Innerhalb einer Zeichenkette (Textwert) ist der numerische Zeichencode und die Größe (in Bytes) jedes einzelnen Zeichens von der <a href="Concepts.htm#native-encoding">nativen Kodierung</a> des Skripts und von der AutoHotkey-EXE-Datei abhängig; also <i>Unicode</i> oder <i>ANSI</i>. Solche Details sind in der Regel nur für Skripte interessant, die folgende Aktionen durchführen:</p>
<ul>
  <li>Zeichenketten via <a href="#DllCall">DllCall</a> an externe Funktionen übergeben.</li>
  <li>Zeichenketten via <a href="lib/PostMessage.htm">PostMessage/SendMessage</a> übergeben.</li>
  <li>Zeichenketten direkt via <a href="#NumPutGet">NumPut/NumGet</a> manipulieren.</li>
  <li>Mit <a href="#VarSetCapacity">VarSetCapacity</a> sicherstellen, dass eine Variable eine bestimmte Anzahl von Zeichen enthalten kann.</li>
</ul>
<p>Skripte, die nur für ein bestimmtes Format gedacht waren, werden oft auf Probleme stoßen, wenn sie mit der falschen AutoHotkey-Version laufen. Zum Beispiel werden einige Skripte, die für AutoHotkey Basic geschrieben wurden, mit der ANSI-Version von AutoHotkey_L korrekt funktionieren, aber nicht mit der Unicode-Version. Mit dem folgenden Skript kann man herausfinden, welche Version gerade verwendet wird:</p>
<pre>MsgBox % <a href="Variables.htm#IsUnicode">A_IsUnicode</a> ? "Unicode" : "ANSI"</pre>
<p><strong>ANSI:</strong> Jedes Zeichen ist <strong>ein Byte</strong> groß (8 Bits). Zeichencodes über 127 sind von den Spracheinstellungen Ihres Systems abhängig.</p>
<p><strong>Unicode:</strong> Jedes Zeichen ist <strong>zwei Bytes</strong> groß (16 Bits). Zeichencodes sind durch das <a href="https://en.wikipedia.org/wiki/UTF-16">UTF-16-Format</a> definiert.</p>
<p class="Indent"><em>Semantischer Hinweis</em>: Technisch gesehen sind einige Unicode-Zeichen durch <i>zwei</i> 16-Bit-Codeeinheiten vertreten, ugs. "Ersatzzeichenpaar" (surrogate pair). Ebenso enthalten einige <a href="https://learn.microsoft.com/windows/win32/intl/code-pages">ANSI-Codepages</a> (ugs. <a href="https://learn.microsoft.com/windows/win32/intl/double-byte-character-sets">Doppelbyte-Zeichensätze</a>) einige Doppelbyte-Zeichen. Aus praktischen Gründen werden diese jedoch fast immer als zwei einzelne Einheiten behandelt (der Einfachheit halber als "Zeichen" bezeichnet).</p>

<h3 id="VarSetCapacity">VarSetCapacity</h3>
<p>VarSetCapacity bestimmt die Kapazität einer Variable <i>in Bytes</i>. Um die Kapazität einer Variable in Bezug auf die Anzahl der Zeichen zu setzen, muss die Größe eines Zeichens berücksichtigt werden. Zum Beispiel:</p>
<pre>VarSetCapacity(ansi_var,    capacity_in_chars)
VarSetCapacity(unicode_var, capacity_in_chars * 2)
VarSetCapacity(native_var,  capacity_in_chars * (A_IsUnicode ? 2 : 1))
VarSetCapacity(native_var,  t_size(capacity_in_chars))  <em>; siehe <a href="#NumPutGet">unten</a></em>
</pre>
<p>Es gibt zwei Anwendungsmöglichkeiten für VarSetCapacity:</p>
<ol>
  <li>Eine Variable auf eine ungefähre Anzahl von Zeichen erweitern, um die Verkettung von Zeichenketten performanter zu machen. Zum Beispiel ermöglicht <code>VarSetCapacity(var, 1000)</code> eine Kapazität von 1000 Bytes, die in den Unicode-Versionen von AutoHotkey_L nur für 500 Zeichen ausreichen würde. Das könnte Einfluss auf die Performanz haben, aber das Skript selbst sollte weiterhin normal funktionieren.</li>
  <li>Die Größe einer Variable für eine Binärstruktur anpassen. Wenn die Struktur explizit Text enthält, muss das Format des Textes berücksichtigt werden. Das hängt von der Struktur ab - manchmal wird ANSI-Text auch in einer Unicode-Version von AutoHotkey_L verwendet. Wenn die Variable zu klein ist, kann das Skript abstürzen oder sich falsch verhalten (abhängig davon, wie die Struktur verwendet wird).</li>
</ol>

<h3 id="DllCall">DllCall</h3>
<p>Verwendet man den "Str"-Typ, handelt es sich um eine Zeichenkette im nativen Format des aktuellen Builds. Da einige Funktionen möglicherweise Zeichenketten in einem bestimmten Format benötigen oder zurückgeben müssen, stehen folgende Zeichenkettentypen zur Verfügung:</p>
<table class="info">
  <tr><th>&nbsp;</th><th class="center">Zeichengröße</th><th>C / Win32-Typen</th><th>Kodierung</th></tr>
  <tr><td class="Syntax center">WStr</td><td class="center">16-Bit</td><td>wchar_t*, WCHAR*, LPWSTR, LPCWSTR</td><td>UTF-16</td></tr>
  <tr><td class="Syntax center">AStr</td><td class="center">8-Bit</td><td>char*, CHAR*, LPSTR, LPCSTR</td><td>ANSI (die Standard-ANSI-Codepage des Systems)</td></tr>
  <tr><td class="Syntax center">Str</td><td class="center">--</td><td>TCHAR*, LPTSTR, LPCTSTR</td><td>Äquivalent zu <b>WStr</b> in Unicode-Builds und <b>AStr</b> in ANSI-Builds.</td></tr>
</table>
<p>Verwendet man "Str" oder den äquivalenten Typ des aktuellen Builds als Parameter, wird die Adresse der Zeichenkette oder Variable an die Funktion übergeben, andernfalls wird stattdessen eine temporäre Kopie der Zeichenkette im gewünschten Format erstellt und übergeben. In der Regel sollten "AStr" und "WStr" nicht verwendet werden, wenn die Funktion einen Wert in diesen Parameter schreibt.</p>
<p class="note"><b>Hinweis:</b> "AStr" und "WStr" können sowohl für die Parameter als auch für den Rückgabewert der Funktion verwendet werden.</p>
<p>Wenn ein Skript eine Funktion via DllCall() aufruft, die eine Zeichenkette als Parameter akzeptiert, muss eine der folgenden Vorgehensweisen verwendet werden:</p>
<ol>
  <li>Wenn sowohl die Unicode- (W) als auch die ANSI-Version (A) der Funktion verfügbar sind, rufen Sie je nach aktuellem Build die entsprechende Version auf. Im folgenden Beispiel ist "DeleteFile" intern als "DeleteFileA" oder "DeleteFileW" bekannt. Da "DeleteFile" selbst nicht wirklich existiert, wird DllCall() je nach aktuellem Build automatisch "A" oder "W" anfügen:
  <pre>DllCall("DeleteFile", "Ptr", &amp;DateiName)
DllCall("DeleteFile", "Str", DateiName)</pre>
  <p>In diesem Beispiel übergibt <code>&amp;DateiName</code> die Adresse der Zeichenkette, so dass die Funktion eine Zeichenkette im gleichen Format wie der "Str"-Typ erwarten muss. Beachten Sie, dass in AutoHotkey Basic "UInt" statt "Ptr" verwendet werden muss, aber der resultierende Code möglicherweise nicht 64-Bit-kompatibel ist.</p>
  <p class="note"><b>Hinweis:</b> Wenn der Name der Funktion nicht gefunden werden kann, fügt AutoHotkey_L das Suffix "A" oder "W" an, egal welche DLL angegeben ist. AutoHotkey Basic hingegen fügt das Suffix "A" nur bei Funktionen in User32.dll, Kernel32.dll, ComCtl32.dll oder Gdi32.dll an.</p></li>
  <li>Wenn die Funktion nur einen bestimmten Zeichenkettentyp als Eingabe akzeptiert, kann das Skript den entsprechenden Zeichenkettentyp verwenden:
  <pre>DllCall("DeleteFileA", "AStr", DateiName)
DllCall("DeleteFileW", "WStr", DateiName)</pre></li>
  <li>Wenn die Funktion eine Zeichenkette (in einem nicht-nativen Format) modifizieren muss, muss das Skript wie <a href="#VarSetCapacity">oben</a> beschrieben Pufferspeicher reservieren und dessen Adresse an die Funktion übergeben. Wenn der Parameter eine Eingabe akzeptiert, muss das Skript die eingehende Zeichenkette zudem in das passende Format umwandeln, z.B. mit <a href="lib/StrPut.htm">StrPut()</a>.</li>
</ol>

<h3 id="NumPutGet">NumPut / NumGet</h3>
<p>Verwendet man NumPut() oder NumGet() mit Zeichenketten, muss der korrekte Offset und Typ für den angegebenen Zeichenkettentyp angegeben werden. Folgendes kann Ihnen dabei helfen:</p>
<pre><em>;  8-Bit/ANSI   Zeichenketten:  size_of_char=1  type_of_char="Char"
; 16-Bit/UTF-16 Zeichenketten:  size_of_char=2  type_of_char="UShort"</em>
<i>n</i>th_char := NumGet(var, (<i>n</i>-1)*<i>size_of_char</i>, <i>type_of_char</i>)
NumPut(<i>n</i>th_char, var, (<i>n</i>-1)*<i>size_of_char</i>, <i>type_of_char</i>)</pre>
<p>Wenn <code>var</code> eine Zeichenkette im nativen Format enthält, können die passenden Werte auf Basis von <code>A_IsUnicode</code> bestimmt werden:</p>
<pre><i>n</i>th_char := NumGet(var, t_size(<i>n</i>-1), t_char())
NumPut(<i>n</i>th_char, var, t_size(<i>n</i>-1), t_char())

<em>; Definieren Sie Funktionen für Komfort und Übersichtlichkeit:</em>
t_char() {
    return A_IsUnicode ? "UShort" : "Char"
}
t_size(char_count=1) {
    return A_IsUnicode ? char_count*2 : char_count
}</pre>

<h2 id="ptr">Pointer-Größe</h2>
<p>Pointer sind in 32-Bit-Builds (einschließlich AutoHotkey Basic) 4 Bytes und in 64-Bit-Builds 8 Bytes groß. Skripte, die Strukturen oder DllCalls verwenden, sollten das berücksichtigen, um eine korrekte Ausführung auf beiden Plattformen zu gewährleisten. Bestimmte Bereiche, die auch betroffen sind:</p>
<ul>
  <li>Offset-Berechnung bei Strukturfeldern, die ein oder mehr Pointer enthalten.</li>
  <li>Größenberechnung bei Strukturen, die ein oder mehr Pointer enthalten.</li>
  <li>Typnamen, die mit <a href="lib/DllCall.htm">DllCall()</a>, <a href="lib/NumPut.htm">NumPut()</a> oder <a href="lib/NumGet.htm">NumGet()</a> verwendet werden.</li>
</ul>
<p>Für Größen- und Offset-Berechnungen kann <a href="Variables.htm#PtrSize">A_PtrSize</a> verwendet werden. Für DllCall(), NumPut() und NumGet() kann je nach Bedarf der <a href="lib/DllCall.htm">Ptr</a>-Typ verwendet werden.</p>
<p>Beachten Sie, dass der Offset eines Feldes üblicherweise die Gesamtgröße aller vorherigen Felder ist. Beachten Sie auch, dass Handles (einschließlich Typen wie HWND und HBITMAP) prinzipiell Pointer-Typen sind.</p>
<pre><em>/*
  typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;    // Ptr
    HANDLE hThread;
    DWORD  dwProcessId; // UInt (4 Bytes)
    DWORD  dwThreadId;
  } <a href="https://learn.microsoft.com/windows/win32/api/processthreadsapi/ns-processthreadsapi-process_information">PROCESS_INFORMATION</a>, *LPPROCESS_INFORMATION;
*/</em>
VarSetCapacity(pi, A_PtrSize*2 + 8) <em>; Ptr + Ptr + UInt + UInt</em>
DllCall("<a href="https://learn.microsoft.com/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa">CreateProcess</a>", <span class="dull">&lt;gekürzt&gt;</span>, "Ptr", &amp;pi, <span class="dull">&lt;gekürzt&gt;</span>)
hProcess    := NumGet(pi, 0)         <em>; Standardmäßig "Ptr".</em>
hThread     := NumGet(pi, A_PtrSize) <em>;</em>
dwProcessId := NumGet(pi, A_PtrSize*2,     "UInt")
dwProcessId := NumGet(pi, A_PtrSize*2 + 4, "UInt")
</pre>


<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
</body>
</html>
