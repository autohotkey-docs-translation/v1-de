<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Skripte - Definition &amp; Verwendung | AutoHotkey v1</title>
<meta name="description" content="Erfahren Sie mehr über Skripte im Allgemeinen, das Aufteilen langer Zeilen, das Kompilieren eines Skripts, das Übergeben von Befehlszeilenparametern, die Codepage und das Debuggen." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Skripte</h1>
<p>Verwandte Themen:</p>
<ul>
  <li><a href="Program.htm">Verwendung des Programms</a>: Wie man AutoHotkey grundsätzlich benutzt.</li>
  <li><a href="Concepts.htm">Konzepte und Konventionen</a>: Allgemeine Erklärung der verschiedenen Konzepte, auf denen AutoHotkey basiert.</li>
  <li><a href="Language.htm">Skriptsprache</a>: Spezifische Details zur Syntax (wie man Skripte schreibt).</li>
</ul>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#intro">Einführung</a></li>
  <li><a href="#auto">Der Anfang des Skripts (automatischer Ausführungsbereich)</a>: Dieser Bereich wird automatisch ausgeführt, wenn das Skript gestartet wird.</li>
  <li><a href="#continuation">Eine lange Zeile in mehrere kurze Zeilen aufteilen</a>: Dies kann zur besseren Lesbarkeit und Wartbarkeit des Skripts beitragen.</li>
  <li><a href="#ahk2exe">Ein Skript in eine EXE-Datei umwandeln (Ahk2Exe)</a>: Ein .ahk-Skript in eine .exe-Datei umwandeln, die auf jedem PC ausgeführt werden kann.</li>
  <li><a href="#cmd">Befehlszeilenparameter an ein Skript übergeben</a>: Die Variablen %1%, %2% usw. enthalten die eingehenden Parameter.</li>
  <li><a href="#cp">Skriptdateicodepage</a>: Sichere Verwendung von ASCII-fremde Zeichen in Skripten.</li>
  <li><a href="#debug">Ein Skript debuggen</a>: Wie man Fehler in einem Skript findet, das sich falsch verhält.</li>
</ul>
<h2 id="intro">Einführung</h2>
<p>Jedes Skript ist eine reine Textdatei mit mehreren Zeilen, die das Programm (AutoHotkey.exe) ausführen soll. Solche Skripte können <a href="Hotkeys.htm">Hotkeys</a> und <a href="Hotstrings.htm">Hotstrings</a> enthalten oder nur aus diesen bestehen. Ohne Hotkeys und Hotstrings führt ein Skript jedoch seine Befehle beim Start der Reihe nach von oben nach unten aus.</p>
<p>Das Programm lädt das Skript zeilenweise in den Speicher. Jede Zeile kann bis zu 16383 Zeichen lang sein. Während des Ladevorgangs wird das Skript <a href="misc/Performance.htm">optimiert</a> und auf seine Gültigkeit überprüft. Stößt das Programm auf einen Syntaxfehler, wird dieser angezeigt. Solche Fehler müssen korrigiert werden, bevor das Skript ausgeführt werden kann.</p>
<h2 id="auto">Der Anfang des Skripts (automatischer Ausführungsbereich)</h2>
<p>Nachdem das Skript geladen wurde, beginnt die Ausführung bei der obersten Zeile, bis ein <a href="lib/Return.htm">Return</a>, <a href="lib/ExitApp.htm">Exit</a>, das erste <a href="Hotkeys.htm">Hotkey-/Hotstring-Label</a> oder das physische Ende des Skripts erreicht wird (je nachdem, was zuerst kommt). Dieser oberste Bereich des Skripts wird auch als <em>automatischer Ausführungsbereich</em> bezeichnet, ist aber eigentlich nur eine <a href="Language.htm#subroutines">Subroutine</a>, die nach dem Programmstart aufgerufen wird.</p>
<p class="warning"><strong>Hinweis:</strong> Während das <em>erste</em> Hotkey/Hotstring-Label des Skripts denselben Effekt wie <a href="lib/Return.htm">Return</a> hat, haben andere Hotkeys und Labels diesen nicht.</p>
<p id="persistent">Wenn das Skript nicht <a href="lib/_Persistent.htm">persistent</a> ist, wird es nach Abschluss des automatischen Ausführungsbereichs terminiert. Andernfalls läuft das Skript im Leerlauf weiter und reagiert auf Ereignisse wie <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="lib/Gui.htm#label">GUI-Ereignisse</a>, <a href="lib/Menu.htm">benutzerdefinierte Menüpunkte</a> und <a href="lib/SetTimer.htm">Timer</a>. Ein Skript ist automatisch persistent, wenn es Hotkeys, Hotstrings, <a href="lib/OnMessage.htm">OnMessage()</a> oder <a href="lib/Gui.htm">GUI</a> enthält, sowie in einigen anderen Fällen. Mit der <a href="lib/_Persistent.htm">#Persistent</a>-Direktive kann das Skript explizit persistent gemacht werden.</p>
<p>Jeder <a href="misc/Threads.htm">Thread</a>, der per <a href="Hotkeys.htm">Hotkey</a>, <a href="Hotstrings.htm">Hotstring</a>, <a href="lib/Menu.htm">Menüpunkt</a>, <a href="lib/Gui.htm#label">GUI-Ereignis</a> oder <a href="lib/SetTimer.htm">Timer</a> gestartet wird, verwendet vorerst die Standardwerte von folgenden Einstellungen, die im automatischen Ausführungsbereich festgelegt werden können. Wenn diese nicht festgelegt sind, werden die vordefinierten Standardwerte verwendet (welche das sind, finden Sie auf den folgenden Seiten): <a href="lib/AutoTrim.htm">AutoTrim</a>, <a href="lib/CoordMode.htm">CoordMode</a>, <a href="lib/Critical.htm">Critical</a>, <a href="lib/DetectHiddenText.htm">DetectHiddenText</a>, <a href="lib/DetectHiddenWindows.htm">DetectHiddenWindows</a>, <a href="lib/FileEncoding.htm">FileEncoding</a>, <a href="lib/ListLines.htm">ListLines</a>, <a href="lib/SendLevel.htm">SendLevel</a>, <a href="lib/SendMode.htm">SendMode</a>, <a href="lib/SetBatchLines.htm">SetBatchLines</a>, <a href="lib/SetControlDelay.htm">SetControlDelay</a>, <a href="lib/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>, <a href="lib/SetFormat.htm">SetFormat</a>, <a href="lib/SetKeyDelay.htm">SetKeyDelay</a>, <a href="lib/SetMouseDelay.htm">SetMouseDelay</a>, <a href="lib/SetRegView.htm">SetRegView</a>, <a href="lib/SetStoreCapsLockMode.htm">SetStoreCapsLockMode</a>, <a href="lib/SetTitleMatchMode.htm">SetTitleMatchMode</a>, <a href="lib/SetWinDelay.htm">SetWinDelay</a>, <a href="lib/StringCaseSense.htm">StringCaseSense</a> und <a href="lib/Thread.htm">Thread</a>.</p>
<p>Wenn der automatische Ausführungsbereich sehr lange dauert (oder nie sein Ende erreicht), werden die Standardwerte für die obigen Einstellungen automatisch nach 100 Millisekunden wirksam. Wenn der automatische Ausführungsbereich schließlich sein Ende erreicht hat (wenn überhaupt), werden die Standardwerte mit den benutzerdefinierten Standardwerten aus dem automatischen Ausführungsbereich überschrieben. In der Regel ist es am besten, die Standardwerte von <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="lib/SetTimer.htm">Timern</a> oder <a href="lib/Menu.htm">benutzerdefinierten Menüpunkten</a> im oberen Bereich des Skripts zu ändern. Beachten Sie auch, dass jeder <a href="misc/Threads.htm">Thread</a> seine eigene Sammlung der obigen Einstellungen hat. Das bedeutet, dass Einstellungen, die in einem <a href="misc/Threads.htm">Thread</a> geändert werden, keinen Einfluss auf die Einstellungen in anderen Threads haben.</p>

<h2 id="continuation">Eine lange Zeile in mehrere kurze Zeilen aufteilen</h2>
<p>Lange Zeilen können in mehrere kurze Zeilen aufgeteilt werden, um die Lesbarkeit und Wartbarkeit des Skripts zu verbessern. Dies hat keinen negativen Einfluss auf die Ausführungsgeschwindigkeit des Skripts, da solche Zeilen bereits beim Start des Skripts im Speicher zusammengeführt werden.</p>
<p id="continuation-line"><strong>Methode #1:</strong> Eine Zeile, die mit "and", "or", ||, &amp;&amp;, einem Komma oder einem <a href="Variables.htm#concat">Punkt</a> beginnt, wird automatisch mit der darüber liegenden Zeile zusammengeführt (in <span class="ver">[v1.0.46+]</span> gilt dies auch für alle anderen <a href="Variables.htm#Operators">Ausdrucksoperatoren</a> außer ++ und --). Im folgenden Beispiel wird die zweite Zeile an die erste angefügt, da sie mit einem Komma beginnt:</p>
<pre>FileAppend, Das ist der Text, der angefügt wird.`n   <em>; Kommentar hier möglich.</em>
    , %A_ProgramFiles%\BeliebigeApp\Log-Datei.txt  <em>; Kommentar.</em></pre>
<p>Ebenso werden die Zeilen im nächsten Beispiel zu einer einzelnen Zeile zusammengeführt, da die letzten beiden mit "and" oder "or" beginnen:</p>
<pre>if (Farbe = "Rot" or Farbe = "Grün" or Farbe = "Blau"   <em>; Kommentar.</em>
    or Farbe = "Schwarz" or Farbe = "Grau" or Farbe = "Weiß")   <em>; Kommentar.</em>
    and ProduktIstInFarbeVerfügbar(Produkt, Farbe)   <em>; Kommentar.</em></pre>
<p>Der <a href="Variables.htm#ternary">ternäre Operator</a> ist ebenfalls ein guter Kandidat:</p>
<pre>ProduktIstVerfügbar := (Farbe = "Rot")
    ? false  <em>; Rote Produkte sind nicht verfügbar, daher ist der folgende Funktionsaufruf irrelevant.</em>
    : ProduktIstInFarbeVerfügbar(Produkt, Farbe)</pre>
<p>Obwohl die Einrückungen in den obigen Beispielen optional sind, können sie die Lesbarkeit verbessern, da sie die Zusammengehörigkeit der Zeilen verdeutlichen. Außerdem ist es nicht notwendig, zusätzliche Leerzeichen für Zeilen einzufügen, die mit den Wörtern "AND" und "OR" beginnen; das Programm tut dies automatisch. In den obigen Beispielen können leere Zeilen oder <a href="Language.htm#comments">Kommentare</a> zwischen oder am Ende jeder Zeile eingefügt werden.</p>
<p id="continuation-section"><strong>Methode #2:</strong> Diese Methode sollte verwendet werden, wenn sehr viele Zeilen zusammengeführt werden müssen oder wenn die Zeilen nicht für Methode #1 geeignet sind. Obwohl diese Methode besonders für <a href="Hotstrings.htm">automatisch-ersetzende Hotstrings</a> nützlich ist, kann sie auch für jeden anderen Befehl oder <a href="Variables.htm#Expressions">Ausdruck</a> verwendet werden. Zum Beispiel:</p>
<pre><em>; BEISPIEL #1:</em>
Var =
(
Eine Textzeile.
<i>Standardmäßig</i> wird der Zeilenumbruch (Enter) zwischen der vorherigen und dieser Zeile als Zeilenvorschub (`n) gespeichert.
    <i>Standardmäßig</i> werden auch die Leerzeichen links von dieser Zeile gespeichert (dasselbe gilt für Tabulatoren).
<i>Standardmäßig</i> werden Variablenreferenzen wie %Var% mit dem Inhalt der Variable ersetzt.
)

<em>; BEISPIEL #2 - Ausdruckssyntax (empfohlen):</em>
Var := "
(
Wie oben, außer dass Variablenreferenzen wie %Var% nicht aufgelöst werden.
Geben Sie Variablen stattdessen wie folgt an:" Var "
)"

<em>; BEISPIEL #3:</em>
FileAppend,  <em>; Das Komma ist in diesem Fall erforderlich.</em>
(
Zeile 1 des Textes.
Zeile 2 des Textes. Standardmäßig ist ein Zeilenvorschub (`n) zwischen den Zeilen.
), C:\Meine Datei.txt</pre>
<p>In den obigen Beispielen sind mehrere Zeilen in runde Klammern eingeschlossen. Dies nennt sich <em>Fortsetzungsbereich</em>. Beachten Sie, dass die unterste Zeile den letzten Parameter von <a href="lib/FileAppend.htm">FileAppend</a> hinter der runden Endklammer enthält. Diese Schreibweise ist optional; sie wird in Fällen wie diesem angewandt, damit das Komma als Parametertrennung gesehen wird, nicht als direkt geschriebenes Komma.</p>
<p>Das Standardverhalten eines Fortsetzungsbereichs kann überschrieben werden, indem eine oder mehrere der folgenden Optionen rechts von der runden Startklammer eingefügt werden. Mehrere Optionen müssen mit Leerzeichen voneinander getrennt werden. Zum Beispiel: <code class="no-highlight">( LTrim Join| %</code>.</p>
<p id="Join"><strong>Join</strong><em>Zkette</em>: Gibt an, wie die Zeilen verbunden werden sollen. Wenn diese Option nicht verwendet wird, endet jede Zeile außer der letzten mit einem Zeilenvorschubzeichen (`n). Wenn <em>Zkette</em> weggelassen wird, werden die Zeilen direkt miteinander verbunden, ohne Zeichen dazwischen. Andernfalls geben Sie für <em>Zkette</em> eine Zeichenkette von bis zu 15 Zeichen an. Zum Beispiel bewirkt <code class="no-highlight">Join`s</code>, dass nach jeder Zeile außer der letzten ein Leerzeichen eingefügt wird (<code class="no-highlight">`s</code> gibt ein direkt geschriebenes Leerzeichen an - eine spezielle Escapesequenz, die nur von dieser Option erkannt wird). Weitere Beispiele sind <code class="no-highlight">Join`r`n</code>, das ein Wagenrücklauf-Zeilenvorschub-Paar zwischen den Zeilen einfügt, und <code class="no-highlight">Join|</code>, das einen Vertikalstrich zwischen den Zeilen einfügt. Um die letzte Zeile des Fortsetzungsbereichs ebenfalls mit <em>Zkette</em> enden zu lassen, fügen Sie direkt über der runden Endklammer des Bereichs eine Leerzeile ein.</p>
<p>Bekannte Einschränkung: Wenn das letzte Zeichen von <em>Zkette</em> ein Doppelpunkt ist, darf Join nicht die letzte Option in der Zeile sein. Zum Beispiel wird <code class="no-highlight">(Join:</code> als Label "(Join" behandelt und <code class="no-highlight">(LTrim Join:</code> nicht unterstützt, während <code class="no-highlight">(Join: C</code> völlig in Ordnung ist.</p>
<p id="LTrim"><strong>LTrim:</strong> Entfernt Leer- und Tabulatorzeichen am Anfang jeder Zeile. Diese Option erlaubt es, den Fortsetzungsbereich eingerückt zu lassen. Geben Sie <code>#LTrim</code> ohne Parameter an, um diese Option für mehrere Fortsetzungsbereiche einzuschalten. Die #LTrim-Direktive ist positionsabhängig, d.h. sie beeinflusst nur Fortsetzungsbereiche, die sich physisch darunter befinden. Die Einstellung kann mit <code>#LTrim Off</code> ausgeschaltet werden.</p>
<p><strong>RTrim0</strong> (RTrim gefolgt von 0): Verhindert das automatische Entfernen von Leer- und Tabulatorzeichen am Ende jeder Zeile.</p>
<p id="CommentOption"><strong>Comments</strong> (oder <strong>Comment</strong> oder <strong>Com</strong> oder <strong>C</strong>) <span class="ver">[v1.0.45.03+]</span>: Erlaubt <a href="Language.htm#comments">Semikolon-Kommentare</a> innerhalb des Fortsetzungsbereichs (aber nicht <code>/*..*/</code>). Solche Kommentare (sowie links stehende Leer- und Tabulatorzeichen) werden im zusammengefügten Ergebnis entfernt, anstatt als direkt geschriebener Text behandelt zu werden. Jeder Kommentar kann auf der rechten Seite einer Zeile oder auf einer neuen Zeile stehen.</p>
<p><strong>%</strong> (Prozentzeichen): Behandelt Prozentzeichen als direkt geschriebenen Text, nicht als Variablenreferenzen. Dadurch entfällt die Notwendigkeit, jedes Prozentzeichen mit einem <a href="misc/EscapeChar.htm">Escapezeichen</a> zu versehen, um es als direkt geschriebenen Text zu behandeln. Diese Option kann weggelassen werden, wenn der Fortsetzungsbereich an Stellen verwendet wird, wo Prozentzeichen bereits als direkt geschriebener Text behandelt werden, wie z.B. bei <a href="Hotstrings.htm">automatisch-ersetzenden Hotstrings</a>.</p>
<p><strong>,</strong> (Komma): Behandelt Kommas als Trennzeichen, nicht als direkt geschriebenen Text. Diese selten verwendete Option wird nur für die Kommas zwischen den Befehlsparametern benötigt, da in <a href="Functions.htm">Funktionsaufrufen</a> die Art des Kommas keine Rolle spielt. Außerdem werden mit dieser Option nur Kommas transformiert, die tatsächlich Parameter trennen. Mit anderen Worten: Sobald der letzte Parameter des Befehls erreicht ist (oder wenn keine Parameter vorhanden sind), werden nachfolgende Kommas als direkt geschriebener Text behandelt, unabhängig von dieser Option.</p>
<p id="accent"><strong>`</strong> (Akzent/umgekehrtes Häkchen): Behandelt jedes umgekehrte Häkchen als direkt geschriebenen Text, nicht als <a href="misc/EscapeChar.htm">Escapezeichen</a>. Dies verhindert auch, dass Kommas und Prozentzeichen explizit und einzeln mit einem Escapezeichen versehen werden können oder dass explizit angegebene Escapesequenzen wie `r und `t übersetzt werden.</p>
<p id="non-continuation"><strong>)</strong> <span class="ver">[v1.1.01+]</span>: Eine runde Endklammer in den Optionen des Fortsetzungsbereichs (außer als Parameter der <a href="#Join">Join</a>-Option) bewirkt, dass die Zeile als Ausdruck neu interpretiert wird, nicht als Beginn eines Fortsetzungsbereichs. Auf diese Weise können Ausdrücke wie <code>(x.y)[z]()</code> funktionsfähig gemacht werden, ohne die runde Startklammer mit einem Escapezeichen versehen zu müssen.</p>

<h3 id="continuation-remarks">Bemerkungen</h3>
<p><a href="misc/EscapeChar.htm">Escapesequenzen</a> wie `n (Zeilenvorschub) und `t (Tabulator) werden innerhalb des Fortsetzungsbereichs unterstützt, es sei denn, die <a href="#accent">Akzent-Option (`)</a> wird verwendet.</p>
<p>Wenn die <a href="#CommentOption">Comment-Option</a> fehlt, werden Semikolon- und /*..*/-Kommentare innerhalb eines Fortsetzungsbereichs nicht unterstützt, da diese als direkt geschriebener Text gesehen werden. Allerdings können Kommentare auf der untersten und obersten Zeile des Bereichs eingefügt werden. Zum Beispiel:</p>
<pre>FileAppend,   <em>; Kommentar.
; Kommentar.</em>
( LTrim Join    <em>; Kommentar.</em>
    &nbsp;; Dies ist <strong>kein</strong> Kommentar; es ist direkt geschriebener Text. Fügen Sie das Wort <i>Comments</i> in die Zeile darüber ein, um es zu einem Kommentar zu machen.
), C:\Datei.txt   <em>; Kommentar.</em></pre>
<p>Infolgedessen müssen Semikolons innerhalb eines Fortsetzungsbereichs nie mit einem <a href="misc/EscapeChar.htm">Escapezeichen</a> versehen werden.</p>
<p>Ein Fortsetzungsbereich kann keine Zeilen erzeugen, die länger als 16383 Zeichen sind (das Programm warnt Sie bei dem Versuch). Eine Möglichkeit, dies zu umgehen, besteht darin, mehrere Fortsetzungsbereiche via Verkettung zu einer Variable zusammenzufassen. Zum Beispiel:</p>
<pre>Var := "
(
...
)"
Var .= "`n  <em>; Mehr Text zur Variable via anderen Fortsetzungsbereich hinzufügen.</em>
(
...
)"
FileAppend, %Var%, C:\Meine Datei.txt</pre>
<p>Da eine runde Endklammer das Ende eines Fortsetzungsbereichs markiert, muss eine direkt geschriebene runde Endklammer am Zeilenanfang mit einem Escapezeichen (Akzent/umgekehrtes Häkchen) versehen werden: <code class="no-highlight">`)</code>.</p>
<p>Unmittelbar nach einem Fortsetzungsbereich kann eine Zeile angegeben werden, die die runde Startklammer eines weiteren Fortsetzungsbereichs enthält. Auf diese Weise können verschiedene Optionen beim Zusammenbau einer einzelnen Zeile angewendet werden.</p>
<p>Die stückweise Konstruktion eines Fortsetzungsbereichs via <a href="lib/_Include.htm">#Include</a> wird nicht unterstützt.</p>

<h2 id="ahk2exe">Ein Skript in eine EXE-Datei umwandeln (Ahk2Exe)</h2>
<p>Im Lieferumfang des Programms ist ein Skriptcompiler enthalten (von fincs bereitgestellt und von TAC109 um Features erweitert).</p>
<p>Ein kompiliertes Skript ist eine eigenständige EXE-Datei, d.h. das Skript kann ohne AutoHotkey.exe gestartet werden. Der Kompiliervorgang erstellt eine EXE-Datei und fügt ihr Folgendes hinzu: Den AutoHotkey-Interpreter, das Skript, alle <a href="lib/_Include.htm">zu inkludierenden</a> Dateien und alle via <a href="lib/FileInstall.htm">FileInstall</a> zu integrierenden Dateien. <span class="ver">[v1.1.33+]</span>: Zusätzliche Dateien können mittels <a href="misc/Ahk2ExeDirectives.htm">Compilerdirektiven</a> inkludiert werden.</p>
<p>Für v1.1- und v2-Skripte wird derselbe Compiler verwendet. Der Compiler unterscheidet Skriptversionen durch Überprüfung der Hauptversion der bereitgestellten Basisdatei.</p>
<h3 id="ahk2exe-toc">Compilerthemen</h3>
<ul>
  <li><a href="#ahk2exe-run">Compiler ausführen</a></li>
  <li><a href="#ahk2exe-base">Ausführbare Basisdatei</a></li>
  <li><a href="#CompilerDirectives">Skriptcompilerdirektiven</a></li>
  <li><a href="#mpress">Kompilierte Skripte komprimieren</a></li>
  <li><a href="#information">Hintergrundinformationen</a></li>
</ul>
<h3 id="ahk2exe-run">Compiler ausführen</h3>
<p>Ahk2Exe kann auf folgende Arten verwendet werden:</p>
<ul>
  <li>
    <p><strong>GUI-Schnittstelle:</strong> Starten Sie die Verknüpfung "Convert .ahk to .exe" im Startmenü. (Nach dem Aufruf der GUI kann es zu einer Verzögerung kommen, bis das Fenster angezeigt wird; weitere Details finden Sie unter <a href="#information">Hintergrundinformationen</a>.)</p>
  </li>
  <li>
    <p><strong>Rechtsklick:</strong> Rechtsklicken Sie in einem Explorer-Fenster auf eine .ahk-Datei und wählen Sie "Compile Script" aus (nur verfügbar, wenn die Option "Script Compiler" bei der Installation von AutoHotkey ausgewählt wurde). Nach einer kurzen Zeit wird im Verzeichnis des Skripts eine gleichnamige EXE-Datei erstellt. Hinweis: Die Erstellung der EXE-Datei erfolgt mit den Einstellungen (Symbol, .bin-Datei, <a href="#mpress">Komprimierung</a>), die zuletzt in Methode #1 oben gespeichert wurden, oder wie im Skript per <a href="misc/Ahk2ExeDirectives.htm">Compilerdirektive</a> angegeben.</p>
  </li>
  <li id="ahk2exeCmd">
    <p><strong>Befehlszeile:</strong> Der Compiler kann über die Befehlszeile mit den unten aufgeführten Parametern gestartet werden. Jeder Befehlszeilenparameter außer <code class="no-highlight">/gui</code> bewirkt, dass das Skript sofort kompiliert wird. Alle Parameter sind optional, außer <code class="no-highlight">/gui</code> und <code class="no-highlight">/in</code>.</p>
    <style>
      #param_pairs td:not(:last-child) {
        white-space: nowrap;
      }
    </style>
    <table class="info" id="param_pairs">
      <tr>
        <th abbr="Param">Parameterpaar</th>
        <th>Bedeutung</th>
      </tr>
      <tr id="SlashIn">
        <td>/in <i>Skriptname</i></td>
        <td>Der Pfad und Name des Skripts, das kompiliert werden soll. Dies muss angegeben werden, sobald mindestens einer der anderen Parameter verwendet wird, es sei denn, es wird <code class="no-highlight">/gui</code> verwendet.</td>
      </tr>
      <tr id="SlashOut">
        <td>/out <i>EXE_Name</i></td>
        <td>Der Pfad\Name der EXE-Datei, die erstellt werden soll. Standardmäßig wird das Verzeichnis und der Basisname der Eingabedatei, plus ".exe" als Dateiendung, oder eine entsprechende <a href="misc/Ahk2ExeDirectives.htm">Compilerdirektive</a> im Skript verwendet.</td>
      </tr>
      <tr id="slashIcon">
        <td>/icon <i>Symbolname</i></td>
        <td>Die zu verwendende Symboldatei. Standardmäßig wird das zuletzt in der GUI-Oberfläche gespeicherte Symbol oder eine <a href="misc/Ahk2ExeDirectives.htm#SetMainIcon">SetMainIcon</a>-Compilerdirektive im Skript verwendet.</td>
      </tr>
      <tr id="SlashBase">
        <td>/base <i>Dateiname</i></td>
        <td><span class="ver">[v1.1.33.10+]</span>: Die zu verwendende Basisdatei (eine BIN-Datei oder in <span class="ver">[v1.1.34+]</span> eine EXE-Datei). Die Hauptversion der verwendeten Basisdatei muss mit der Version des zu kompilierenden Skripts übereinstimmen. Standardmäßig wird der zuletzt in der GUI-Oberfläche gespeicherte Basisdateiname oder eine <a href="misc/Ahk2ExeDirectives.htm#Bin">Base</a>-Compilerdirektive im Skript verwendet.</td>
      </tr>
      <tr id="SlashResourceID">
        <td>/resourceid <i>Name</i></td>
        <td><span class="ver">[v1.1.34+]</span>: Weist eine untypische Ressourcen-ID zu, die für das Hauptskript bei der Kompilierung mit einer <a href="#SlashBase">EXE-Basisdatei</a> verwendet wird (siehe <a href="Program.htm#embedded-scripts">Eingebettete Skripte</a>). Numerische Ressourcen-IDs müssen aus einem Rautezeichen (#) gefolgt von einer Dezimalzahl bestehen. Standardmäßig wird #1 oder eine <a href="misc/Ahk2ExeDirectives.htm#ResourceID">ResourceID</a>-Compilerdirektive im Skript verwendet.</td>
      </tr>
      <tr id="SlashCp">
        <td>/cp <i>Codepage</i></td>
        <td><span class="ver">[v1.1.23.01+]</span>: Überschreibt die Standardcodepage, mit der die Skriptdateien gelesen werden. Eine Liste möglicher Werte finden Sie unter <a href="https://learn.microsoft.com/windows/win32/intl/code-page-identifiers">Code Page Identifiers</a>. Beachten Sie, dass Unicode-Skripte mit einer Byte-Order-Markierung (BOM) beginnen sollten, was die Verwendung dieses Parameters überflüssig macht.</td>
      </tr>
      <tr id="SlashCompress">
        <td>/compress <i>n</i></td>
        <td><span class="ver">[v1.1.33+]</span>: Soll die EXE-Datei <a href="#mpress">komprimiert</a> werden? 0 = nein, 1 = MPRESS verwenden (falls vorhanden), 2 = UPX verwenden (falls vorhanden). Standardmäßig wird die zuletzt in der GUI-Oberfläche gespeicherte Einstellung verwendet.</td>
      </tr>
      <tr id="SlashGui">
        <td>/gui</td>
        <td><span class="ver">[v1.1.33+]</span>: Zeigt die GUI anstelle einer sofortigen Kompilierung an. Die anderen Parameter können verwendet werden, um die zuletzt in der GUI gespeicherten Einstellungen zu überschreiben. <code class="no-highlight">/in</code> ist in diesem Fall optional.</td>
      </tr>
      <tr id="SlashGuiSilent">
        <td>/silent [verbose]</td>
        <td><span class="ver">[v1.1.33.10+]</span>: Deaktiviert alle Mitteilungsfenster und gibt stattdessen die Fehler in die Standardfehlerausgabe (stderr) aus; oder in die Standardausgabe (stdout), wenn stderr fehlschlägt. Sonstige Meldungen werden ebenfalls in stdout ausgegeben. Geben Sie optional das Wort <code class="no-highlight">verbose</code> an, um Statusmeldungen ebenfalls in stdout auszugeben.</td>
      </tr>
      <tr id="SlashAhk">
        <td class="warning"><strong>Veraltet:</strong><br>/ahk <i>Dateiname</i></td>
        <td class="warning"><span class="ver">[v1.1.33+]</span>: Der Pfad\Name der AutoHotkey.exe-Datei, die zum Kompilieren des Skripts verwendet werden soll.</td>
      </tr>
      <tr id="SlashMpress">
        <td class="warning"><strong>Veraltet:</strong><br>/mpress <i>0oder1</i></td>
        <td class="warning">Soll die EXE-Datei mit MPRESS <a href="#mpress">komprimiert</a> werden? 0 = nein, 1 = ja. Standardmäßig wird die zuletzt in der GUI-Oberfläche verwendete Einstellung verwendet.</td>
      </tr>
      <tr id="SlashBin">
        <td class="warning"><strong>Veraltet:</strong><br>/bin <i>Dateiname</i></td>
        <td class="warning">Die zu verwendende BIN-Datei. Standardmäßig wird der zuletzt in der GUI-Oberfläche gespeicherte BIN-Dateiname verwendet.</td>
      </tr>
    </table>
    <p>Zum Beispiel:</p>
    <pre class="no-highlight">Ahk2exe.exe /in "Skript.ahk" /icon "Symbol.ico"</pre>
  </li>
</ul>
<p>Hinweise:</p>
<ul>
  <li>Parameter, die Leerzeichen enthalten, müssen in doppelte Anführungszeichen gesetzt werden.</li>
  <li>Die Performanz des Skripts kann in der Regel nicht durch das Kompilieren verbessert werden.</li>
  <li>In <span class="ver">[v1.1.01+]</span> werden Passwortschutz und die /NoDecompile-Option nicht unterstützt.</li>
  <li><a href="lib/_NoTrayIcon.htm">#NoTrayIcon</a> und <code><a href="lib/Menu.htm#MainWindow">Menu, Tray, MainWindow</a></code> beeinflussen das Verhalten kompilierter Skripte.</li>
  <li>Die interne Variable <a href="Variables.htm#IsCompiled">A_IsCompiled</a> enthält 1, wenn das Skript in kompilierter Form ausgeführt wird. Andernfalls ist sie leer.</li>
  <li><span class="ver">[v1.0.43+]</span>: Wenn Parameter an Ahk2Exe übergeben wurden, wird eine Meldung in die Standardausgabe (stdout) geschrieben, ob der Kompiliervorgang erfolgreich war oder nicht. Obwohl die Meldung nicht in der Eingabeaufforderung angezeigt wird, kann sie mit Mitteln wie dem Weiterleiten der Ausgabe an eine Datei "abgefangen" werden. </li>
  <li> <span class="ver">[v1.1.22.03+]</span>: Im Falle eines Fehlers gibt Ahk2Exe einen Exitcode zurück, der die Art des Fehlers spezifiziert. Diese Fehlercodes finden Sie auf <a href="https://github.com/AutoHotkey/Ahk2Exe/blob/master/ErrorCodes.md">GitHub (ErrorCodes.md)</a>.</li>
</ul>
<p>Den Quellcode sowie neuere Versionen des Compilers finden Sie auf <a href="https://github.com/AutoHotkey/Ahk2Exe">GitHub</a>.</p>

<h3 id="ahk2exe-base">Ausführbare Basisdatei</h3>
<p>Jede EXE-Datei eines kompilierten Skripts basiert auf einer ausführbaren Datei, die den Interpreter implementiert. Die Basisdateien im Compiler-Verzeichnis haben die Endung ".bin"; diese Dateien sind Versionen des Interpreters, die nicht die Möglichkeit bieten, externe Skriptdateien zu laden. Stattdessen wird das Programm nach einer Win32-Ressource (RCDATA) namens "&gt;AUTOHOTKEY SCRIPT&lt;" suchen und diese laden, oder fehlschlagen, wenn sie nicht gefunden wird.</p>
<p><span class="ver">[v1.1.34+]</span>: Die Standard-AutoHotkey-EXE-Dateien können auch als Basis für ein kompiliertes Skript verwendet werden, indem eine Win32-Ressource (RCDATA) mit der ID 1 eingebettet wird. (Weitere Skripte können mit der <a href="misc/Ahk2ExeDirectives.htm#AddResource">AddResource</a>-Compilerdirektive hinzugefügt werden.) Auf diese Weise kann die EXE-Datei eines kompilierten Skripts zusammen mit der Befehlszeilenoption <a href="#SlashScript">/script</a> verwendet werden, um ein anderes Skript als das eingebettete Hauptskript auszuführen. Weitere Informationen finden Sie unter <a href="Program.htm#embedded-scripts">Eingebettete Skripte</a>.</p>

<h3 id="CompilerDirectives">Skriptcompilerdirektiven</h3>
<p><span class="ver">[v1.1.33+]</span>: Skriptcompilerdirektiven ermöglichen es dem Benutzer, genau anzugeben, wie ein Skript kompiliert werden soll. Einige der Features sind:</p>
<ul>
  <li>Versionsinformationen ändern (z.B. Name, Beschreibung, Version...)</li>
  <li>Ressourcen zum kompilierten Skript hinzufügen</li>
  <li>Verschiedene Aspekte der Kompilierung verfeinern</li>
  <li>Codeabschnitte aus dem kompilierten Skript entfernen und umgekehrt</li>
</ul>
<p>Weitere Informationen finden Sie unter <a href="misc/Ahk2ExeDirectives.htm">Skriptcompilerdirektiven</a>.</p>

<h3 id="mpress">Kompilierte Skripte komprimieren</h3>
<p>Ahk2Exe kann optional MPRESS- oder in <span class="ver">[v1.1.33+]</span> UPX-Freeware verwenden, um kompilierte Skripte zu komprimieren. Wenn <strong>MPRESS.exe</strong> und/oder <strong>UPX.exe</strong> in den Compiler-Unterordner von AutoHotkey kopiert wurde, kann die EXE-Datei via <code class="no-highlight">/compress</code>-Parameter oder GUI-Einstellung komprimiert werden. </p>
<p><strong>MPRESS:</strong> <a href="https://www.autohotkey.com/mpress/mpress_web.htm">Archivierte offizielle Webseite</a> (Downloads und Informationen) | <a href="https://www.autohotkey.com/mpress/mpress.219.zip">Direkt-Download</a> (95 KB)</p>
<p><strong>UPX:</strong> <a href="https://upx.github.io/">Offizielle Webseite</a> (Downloads und Informationen)</p>
<p><strong>Hinweis:</strong> Die Komprimierung einer EXE-Datei verhindert, dass der Quellcode des Skripts einfach mit einem Texteditor wie Notepad oder PE-Resource-Editor eingesehen werden kann, aber sie verhindert nicht, dass der Quellcode mit speziell dafür entwickelten Tools extrahiert werden kann.</p>

<h3 id="information">Hintergrundinformationen</h3>
 <p>In <span class="ver">[v1.1.33.10+]</span> wird die folgende Ordnerstruktur unterstützt, wobei sich die standardmäßig verwendete Version von <code class="no-highlight">Ahk2Exe.exe</code> im ersten \Compiler-Verzeichnis befindet, wie unten gezeigt:</p>
<pre class="no-highlight">\AutoHotkey 
   AutoHotkeyA32.exe 
   AutoHotkeyU32.exe
   AutoHotkeyU64.exe
   \Compiler
      Ahk2Exe.exe  <em>; die standardmäßig verwendete Version von Ahk2Exe</em>
      ANSI 32-bit.bin
      Unicode 32-bit.bin
      Unicode 64-bit.bin
   \AutoHotkey v2.0-a135
      AutoHotkey32.exe
      AutoHotkey64.exe
      \Compiler
   \v2.0-beta.1
      AutoHotkey32.exe
      AutoHotkey64.exe</pre>
<p>Der Suchalgorithmus zum Finden der Basisdatei wird beim Start von Ahk2Exe kurz ausgeführt und funktioniert wie folgt:</p>
<p>Der Algorithmus sucht nach qualifizierten AutoHotkey-EXE-Dateien und allen BIN-Dateien im Verzeichnis des Compilers, im Elternverzeichnis des Compilers und in allen Geschwisterverzeichnissen des Compilers, deren Namen mit <code class="no-highlight">AutoHotkey</code> oder <code class="no-highlight">V</code>, aber nicht mit <code class="no-highlight">AutoHotkey_H</code> beginnen. Die ausgewählten Verzeichnisse werden rekursiv durchsucht. Alle gefundenen AutoHotkey.exe-Dateien werden ausgeschlossen - übrig bleiben Dateien wie AutoHotkeyA32.exe, AutoHotkey64.exe usw. sowie alle gefundenen BIN-Dateien. Alle enthaltenen EXE-Dateien müssen einen Namen haben, der mit <code class="no-highlight">AutoHotkey</code> beginnt, und eine Dateibeschreibung, die das Wort <code class="no-highlight">AutoHotkey</code> enthält, sowie die Version <code class="no-highlight">1.1.34+</code> oder <code class="no-highlight">2.0-a135+</code>.</p>
<p>Für eine erfolgreiche Kompilierung wird außerdem eine Version des AutoHotkey-Interpreters (als Hilfsmittel) benötigt, die nach einem ähnlichen Algorithmus ausgewählt wird. In den meisten Fällen wird die Version des verwendeten Interpreters mit der Version der Basisdatei übereinstimmen, die der Benutzer für die Kompilierung ausgewählt hat.</p>


<h2 id="cmd">Befehlszeilenparameter an ein Skript übergeben</h2>
<p>Skripte unterstützen Befehlszeilenparameter. Das Format ist:</p>
<pre class="no-highlight">AutoHotkey.exe [<i>Optionen</i>] [<i>Skriptdateiname</i>] [<i>Skriptparameter</i>]</pre>
<p>Für kompilierte Skripte lautet das Format:</p>
<pre class="no-highlight">KompiliertesSkript.exe [<i>Optionen</i>] [<i>Skriptparameter</i>]</pre>
<p><strong>Optionen:</strong> Folgende Optionen können angegeben werden:</p>
<table class="info">
  <tr><th>Option</th><th>Bedeutung</th><th class="wrap" abbr="Kompiliert?">Kompiliert?</th></tr>
  <tr id="SlashF">
    <td>/f oder /force</td>
    <td>Skript bedingungslos starten und Warndialogfenster überspringen. Diese Option hat denselben Effekt wie <a href="lib/_SingleInstance.htm">#SingleInstance Off</a>.</td>
    <td>Ja</td>
  </tr>
  <tr id="SlashR">
    <td>/r oder /restart</td>
    <td>Gibt an, dass das Skript neu gestartet werden soll und dass eine ältere Instanz des Skripts, wenn möglich, geschlossen werden soll (diese Option wird auch intern vom <a href="lib/Reload.htm">Reload</a>-Befehl verwendet).</td>
    <td>Ja</td>
  </tr>
  <tr id="ErrorStdOut">
    <td>/ErrorStdOut<br><br>/ErrorStdOut=<em>Kodierung</em></td>
    <td>
      <p>Sendet alle Syntaxfehler, die den Start eines Skripts verhindern, an die Standardfehlerausgabe (stderr), anstatt ein Dialogfenster anzuzeigen. Einzelheiten finden Sie unter <a href="lib/_ErrorStdOut.htm">#ErrorStdOut</a>. Diese Option kann mit /iLib kombiniert werden, um die Gültigkeit des Skripts zu prüfen, ohne es auszuführen.</p>
      <p><span class="ver">[v1.1.33+]</span>: Es kann optional eine <a href="lib/FileEncoding.htm">Kodierung</a> angegeben werden. Zum Beispiel bewirkt <code class="no-highlight">/ErrorStdOut=UTF-8</code>, dass Meldungen als UTF-8 kodiert werden, bevor sie in die Standardfehlerausgabe (stderr) geschrieben werden.</p>
    </td>
    <td>Ja</td>
  </tr>
  <tr id="SlashDebug">
    <td>/Debug</td>
    <td><span class="ver">[AHK_L 11+]</span>: Stellt eine Verbindung zu einem Debugger-Client her. Weitere Informationen finden Sie unter <a href="#idebug">Interaktives Debuggen</a>.</td>
    <td>Nein</td>
  </tr>
  <tr id="CPn">
    <td>/CP<i>n</i></td>
    <td>
      <p><span class="ver">[AHK_L 51+]</span>: Überschreibt die Standardcodepage, mit der die Skriptdateien gelesen werden. Weitere Informationen finden Sie unter <a href="#cp">Skriptdateicodepage</a>.</p>
      <p><span class="ver">[v1.1.33+]</span>: Wenn "Default to UTF-8" im Installer aktiviert ist, wird der Dateityp ".ahk" mit einer Befehlszeile registriert, die <code class="no-highlight">/CP65001</code> enthält. Dies hat zur Folge, dass alle Skripte, die über die Shell (Explorer) gestartet werden, standardmäßig UTF-8 verwenden, wenn keine UTF-16-Byte-Order-Markierung vorhanden ist. Skripte, die direkt über AutoHotkey.exe gestartet werden, verwenden weiterhin standardmäßig <code class="no-highlight">CP0</code>, da der Parameter <code class="no-highlight">/CP65001</code> fehlt.</p>
    </td>
    <td>Nein</td>
  </tr>
  <tr>
    <td>/iLib <em>"AusgabeDatei"</em></td>
    <td>
      <p><span class="ver">[v1.0.47+]</span>: AutoHotkey lädt das Skript, ohne es auszuführen. Für jedes Skript, das mit dem <a href="Functions.htm#lib">Bibliotheksmechanismus</a> automatisch inkludiert wurde, werden zwei Zeilen in <em>AusgabeDatei</em> geschrieben. Diese Zeilen werden im folgenden Format geschrieben, wobei <em>BiblVerz</em> der vollständige Pfad des Bibliotheksordners und <em>BiblDatei</em> der Dateiname der Bibliothek ist:</p>
<pre>#Include BiblVerz\
#IncludeAgain BiblVerz\BiblDatei.ahk</pre>
      <p>Wenn die Ausgabedatei bereits existiert, wird sie überschrieben. <em>AusgabeDatei</em> kann <code class="no-highlight">*</code> sein, um die Ausgabe in die Standardausgabe (stdout) zu schreiben.</p>
      <p>Wenn das Skript Syntaxfehler enthält, kann die Ausgabedatei leer sein. Der Exitcode des Prozesses kann verwendet werden, um diesen Zustand zu erkennen; im Falle eines Syntaxfehlers ist der Exitcode 2. Mit der /ErrorStdOut-Option kann die Fehlermeldung unterdrückt oder abgefangen werden.</p>
    </td>
    <td>Nein</td>
  </tr>
  <tr id="SlashInclude">
    <td>/include <em>"IncDatei"</em></td>
    <td>
      <p><span class="ver">[v1.1.34+]</span>: <a href="lib/_Include.htm">Inkludiert</a> eine Datei vor dem Hauptskript. Mit dieser Methode kann nur eine einzelne Datei inkludiert werden. Wenn das Skript <a href="lib/Reload.htm">neu geladen</a> wird, wird diese Befehlszeilenoption automatisch an die neue Instanz übergeben.</p>
    </td>
    <td>Nein</td>
  </tr>
  <tr id="SlashScript">
    <td>/script</td>
    <td>
      <p><span class="ver">[v1.1.34+]</span>: Wenn diese Option mit einem kompilierten Skript verwendet wird, das auf einer EXE-Datei basiert, bewirkt sie, dass das Programm das eingebettete Hauptskript ignoriert. Dadurch kann die EXE-Datei eines kompilierten Skripts externe Skriptdateien oder eingebettete Skripte anstelle des Hauptskripts ausführen. Andere Optionen, die normalerweise von kompilierten Skripten nicht unterstützt werden, können ebenfalls verwendet werden, müssen aber rechts von dieser Option angegeben werden. Zum Beispiel:</p>
      <pre class="no-highlight">KompiliertesSkript.exe /script /ErrorStdOut MeinSkript.ahk "Skript-Arg 1"</pre>
      <p>Diese Option kann auch angegeben werden, wenn die aktuelle EXE-Datei kein eingebettetes Skript hat, aber dann ist sie wirkungslos.</p>
      <p>Diese Option wird von kompilierten Skripten, die auf einer BIN-Datei basieren, nicht unterstützt.</p>
      <p>Siehe auch: <a href="#ahk2exe-base">Ausführbare Basisdatei (Ahk2Exe)</a></p>
    </td>
    <td>N/A</td>
  </tr>
</table>

<p id="defaultfile"><strong>Skriptdateiname:</strong> Dies kann weggelassen werden, wenn keine <em>Skriptparameter</em> vorhanden sind. Wenn weggelassen (z.B. wenn AutoHotkey direkt über das Startmenü gestartet wird), sucht das Programm nach einer Skriptdatei namens <code class="no-highlight"><i>AutoHotkey</i>.ahk</code> an folgenden Orten (in dieser Reihenfolge):</p>
<ul>
  <li>Das Verzeichnis, das die <a href="Variables.htm#AhkPath">AutoHotkey-EXE-Datei</a> enthält.</li>
  <li>Der Ordner "<a href="Variables.htm#MyDocuments">Dokumente</a>" des aktuellen Benutzers.</li>
</ul>
<p>Der Dateiname <code class="no-highlight"><i>AutoHotkey</i>.ahk</code> hängt vom Namen der EXE-Datei ab, mit der das Skript gestartet wurde. Wenn Sie z.B. AutoHotkey.exe in MeinSkript.exe umbenennen, wird das Programm versuchen, MeinSkript.ahk zu finden. Wenn Sie AutoHotkeyU32.exe ohne Parameter starten, sucht das Programm nach AutoHotkeyU32.ahk.</p>
<p>Hinweis: In den Versionen vor <a href="AHKL_ChangeLog.htm#L51">Revision 51</a> wurde im Arbeitsverzeichnis nach AutoHotkey.ini oder im Ordner "Dokumente" nach AutoHotkey.ahk gesucht.</p>
<p><span class="ver">[v1.1.17+]</span>: Geben Sie ein Sternchen (*) als Dateinamen an, um den Text des Skripts aus der Standardeingabe (stdin) zu lesen. Siehe das Beispiel <a href="lib/Run.htm#ExecScript">SkriptAusführen()</a>.</p>
<p><span class="ver">[v1.1.34+]</span>: Wenn die aktuelle EXE-Datei <a href="Program.htm#embedded-scripts">eingebettete Skripte</a> enthält, kann für diesen Parameter ein Sternchen gefolgt vom Ressourcennamen oder der ID eines eingebetteten Skripts angegeben werden. Bei kompilierten Skripten (also wenn ein eingebettetes Skript mit der ID #1 existiert) muss diesem Parameter die Befehlszeilenoption <code class="no-highlight">/script</code> vorangestellt werden.</p>
<p id="cmd_args"><strong>Skriptparameter:</strong> Eine oder mehrere Zeichenketten, die an das Skript übergeben werden sollen, jeweils durch mindestens ein Leerzeichen voneinander getrennt. Jeder Parameter, der Leerzeichen enthält, muss in Anführungszeichen gesetzt werden. Wenn Sie eine leere Zeichenkette als Parameter übergeben wollen, geben Sie zwei aufeinanderfolgende Anführungszeichen an. Um ein direkt geschriebenes Anführungszeichen zu übergeben, stellen Sie diesem einen umgekehrten Schrägstrich voran (\"). Folglich wird jeder Schrägstrich am Ende in einem in Anführungszeichen gesetzten Parameter (z.B. "C:\Meine Dokumente<span class="red">\"</span>) wie ein direkt geschriebenes Anführungszeichen behandelt (d.h. das Skript erkennt die Zeichenkette C:\Meine Dokumente<span class="red">"</span>). Mit <code><a href="lib/StringReplace.htm">StringReplace</a>, 1, 1, <span class="red">"</span>,, All</code> können solche Anführungszeichen entfernt werden.</p>
<p><span class="ver">[v1.1.27+]</span>: Eingehende Parameter werden, sofern vorhanden, als Array in die interne Variable <strong>A_Args</strong> gespeichert und können mit der <a href="Objects.htm#Usage_Simple_Arrays">Arraysyntax</a> abgerufen werden. <code>A_Args[1]</code> enthält den ersten Parameter. Das folgende Beispiel beendet das Skript, wenn zu wenig Parameter übergeben wurden:</p>
<pre>if A_Args.Length() &lt; 3
{
    MsgBox % "Das Skript benötigt mindestens 3 Parameter, hat aber nur " A_Args.Length() " empfangen."
    ExitApp
}</pre>
<p>Wenn die Anzahl der Parameter, die an das Skript übergeben werden, variiert (z.B. wenn der Benutzer mit dem Mauszeiger mehrere Dateien auf ein Skript zieht und ablegt), kann das folgende Beispiel verwendet werden, um sie einzeln zu extrahieren:</p>
<pre>for n, param in A_Args  <em>; Für jeden Parameter:</em>
{
    MsgBox Parameter Nr. %n% ist %param%.
}
</pre>
<p>Wenn die Parameter Dateinamen sind, kann das folgende Beispiel verwendet werden, um sie in lange Namen mit korrekter Groß-/Kleinschreibung (wie im Dateisystem gespeichert) und vollständigem/absolutem Pfad umzuwandeln:</p>
<pre>for n, EingabePfad in A_Args  <em>; Für jeden Parameter (oder für jede auf ein Skript gezogene Datei):</em>
{
    Loop Files, %EingabePfad%, FD  <em>; Dateien und Verzeichnisse einbeziehen.</em>
        LangerPfad := A_LoopFileFullPath
    MsgBox Der lange Pfadname mit korrekter Groß-/Kleinschreibung der Datei`n%EingabePfad%`nist:`n%LangerPfad%
}</pre>
<p><strong>Bekannte Einschränkung:</strong> Das Ziehen und Ablegen von Dateien auf eine .ahk-Datei kann fehlschlagen, wenn 8.3-Namen (Kurznamen) in einem NTFS-Dateisystem deaktiviert sind. Um das zu umgehen, können Sie z.B. das Skript <a href="#ahk2exe">kompilieren</a> und dann die Dateien auf die resultierende EXE-Datei ziehen.</p>
<p id="cmd_args_old"><strong>Legacy:</strong> Die Befehlszeilenparameter sind auch in den <a href="Variables.htm">Variablen</a> %1%, %2% usw. enthalten, wie in den Versionen vor <span class="ver">[v1.1.27]</span>. Zusätzlich enthält %0% die Anzahl der übergebenen Parameter (andernfalls 0). Allerdings können diese Variablen nicht direkt in einem Ausdruck referenziert werden, da sie dort als Zahlen und nicht als Variablen interpretiert werden. Das folgende Beispiel beendet das Skript, wenn zu wenig Parameter übergeben wurden:</p>
<pre>if 0 &lt; 3  <em>; Die linke Seite einer <a href="lib/IfEqual.htm">Nicht-Ausdrucks-If-Anweisung</a> ist immer der Name einer Variable.</em>
{
    MsgBox Das Skript benötigt mindestens 3 Parameter`, hat aber nur %0% empfangen.
    ExitApp
}</pre>
<p>Wenn die Anzahl der Parameter, die an das Skript übergeben werden, variiert (z.B. wenn der Benutzer mit dem Mauszeiger mehrere Dateien auf ein Skript zieht und ablegt), kann das folgende Beispiel verwendet werden, um sie einzeln zu extrahieren:</p>
<pre>Loop, %0%  <em>; Für jeden Parameter:</em>
{
    param := %A_Index%  <em>; Den Inhalt der Variable abrufen, deren Name in A_Index enthalten ist.</em>
    MsgBox, 4,, Parameter Nr. %A_Index% ist %param%.  Weiter?
    IfMsgBox, No
        break
}</pre>
<p>Wenn die Parameter Dateinamen sind, kann das folgende Beispiel verwendet werden, um sie in lange Namen mit korrekter Groß-/Kleinschreibung (wie im Dateisystem gespeichert) und vollständigem/absolutem Pfad umzuwandeln:</p>
<pre>Loop %0%  <em>; Für jeden Parameter (oder für jede auf ein Skript gezogene Datei):</em>
{
    EingabePfad := %A_Index%  <em>; Den Inhalt der Variable abrufen, deren Name in A_Index enthalten ist.</em>
    Loop %EingabePfad%, 1
        LangerPfad := A_LoopFileLongPath
    MsgBox Der lange Pfadname mit korrekter Groß-/Kleinschreibung der Datei`n%EingabePfad%`nist:`n%LangerPfad%
}</pre>

<h2 id="cp">Skriptdateicodepage <span class="ver">[AHK_L 51+]</span></h2>
<p>Damit ASCII-fremde Zeichen korrekt aus einer Datei gelesen werden, muss die Kodierung, die zum Speichern der Datei verwendet wurde (meist via Texteditor), mit der Kodierung übereinstimmen, die AutoHotkey zum Lesen der Datei verwendet. Ist dies nicht der Fall, werden die Zeichen falsch dekodiert. AutoHotkey entscheidet nach folgenden Regeln, welche Kodierung verwendet wird:</p>
<ul>
  <li>Wenn die Datei mit einer UTF-8- oder UTF-16-Byte-Order-Markierung (BOM) beginnt, wird die entsprechende Codepage verwendet und die <a href="#CPn">/CP<i>n</i></a>-Option ignoriert.</li>
  <li>Wenn die <a href="#CPn">/CP<i>n</i></a>-Option über die Befehlszeile übergeben wurde, wird Codepage <i>n</i> verwendet. Eine Liste möglicher Werte finden Sie unter <a href="https://learn.microsoft.com/windows/win32/intl/code-page-identifiers">Code Page Identifiers</a>.
  <p class="note"><strong>Hinweis:</strong> Die Option "Default to UTF-8" im Installer von AutoHotkey <span class="ver">[v1.1.33+]</span> fügt <code class="no-highlight">/CP65001</code> zu den Befehlszeilen aller Skripte hinzu, die über die Shell (Explorer) gestartet werden.</p></li>
  <li>In allen anderen Fällen wird die Standard-ANSI-Codepage des Betriebssystems verwendet.</li>
</ul>
<p>Beachten Sie, dass dies nur für Skriptdateien gelten, die von AutoHotkey geladen wurden, nicht für die Datei-Ein-/Ausgabe im Skript selbst. <a href="lib/FileEncoding.htm">FileEncoding</a> bestimmt die Standardkodierung für Dateien, die vom Skript gelesen oder geschrieben werden, während <a href="lib/IniRead.htm">IniRead</a> und <a href="lib/IniWrite.htm">IniWrite</a> immer in UTF-16 oder ANSI arbeiten.</p>
<p>Da der gesamte Text (wo nötig) in das <a href="Compat.htm#Format">native Zeichenkettenformat</a> umgewandelt wird, werden Zeichen, die ungültig sind oder in der nativen Codepage nicht existieren, mit einem Platzhalter ersetzt: ANSI '?' oder Unicode '�'. In Unicode-Builds geschieht dies nur, wenn Kodierungsfehler in der Skriptdatei auftreten oder wenn die zum Speichern oder Laden der Datei verwendeten Codepages nicht übereinstimmen.</p>
<p>Mit <a href="lib/RegWrite.htm">RegWrite</a> kann die Standardkodierung für Skripte festgelegt werden, die aus dem Explorer heraus gestartet werden (z.B. durch Doppelklick auf eine Datei):</p>
<pre><em>; Entkommentieren Sie die entsprechende Zeile unten oder lassen Sie sie alle
; kommentiert, um den Standard des aktuellen Builds wiederherzustellen:
; Codepage := 0        ; Standard-ANSI-Codepage des Systems
; Codepage := 65001    ; UTF-8
; Codepage := 1200     ; UTF-16
; Codepage := 1252     ; ANSI-Latin-1; Westeuropäisch (Windows)</em>
if (Codepage != "")
    Codepage := " /CP" . Codepage
Befehl="%A_AhkPath%"%Codepage% "`%1" `%*
Schlüssel=AutoHotkeyScript\Shell\Open\Command
if A_IsAdmin    <em>; Für alle Benutzer setzen.</em>
    RegWrite, REG_SZ, HKCR, %Schlüssel%,, %Befehl%
else            <em>; Nur für den aktuellen Benutzer setzen.</em>
    RegWrite, REG_SZ, HKCU, Software\Classes\%Schlüssel%,, %Befehl%</pre>
<p>Dies setzt natürlich voraus, dass AutoHotkey bereits installiert ist. Andernfalls wäre das Ergebnis alles andere als zufriedenstellend.</p>

<h2 id="debug">Ein Skript debuggen</h2>
<p>Befehle wie <a href="lib/ListVars.htm">ListVars</a> und <a href="lib/Pause.htm">Pause</a> können Ihnen dabei helfen, ein Skript zu debuggen (Fehler zu finden und zu beheben). Zum Beispiel erstellen die folgenden zwei Zeilen, wenn sie richtig platziert sind, sogenannte "Haltepunkte":</p>
<pre>ListVars
Pause</pre>
<p>Sobald das Skript diese zwei Zeilen erreicht, zeigt es den aktuellen Inhalt aller Variablen zur Überprüfung an. Wenn Sie bereit sind fortzufahren, entpausieren Sie das Skript via Datei- oder Tray-Menü. Das Skript wird dann bis zum nächsten "Haltepunkt" (falls vorhanden) fortgesetzt.</p>
<p>Generell empfiehlt es sich, diese "Haltepunkte" an Stellen einzufügen, wo das aktive Fenster für das Skript irrelevant ist, wie z.B. unmittelbar vor einem WinActivate-Befehl. Auf diese Weise kann das Skript seine Ausführung ordnungsgemäß fortsetzen, sobald Sie es entpausieren.</p>
<p>Die folgenden Befehle eignen sich ebenfalls zum Debuggen: <a href="lib/ListLines.htm">ListLines</a>, <a href="lib/KeyHistory.htm">KeyHistory</a> und <a href="lib/OutputDebug.htm">OutputDebug</a>.</p>
<p>Häufig auftretende Fehler wie Tippfehler und fehlende "globale" Deklarationen können durch das <a href="lib/_Warn.htm">Einschalten von Warnungen</a> erkannt werden.</p>
<h3 id="idebug">Interaktives Debuggen <span class="ver">[AHK_L 11+]</span></h3>
<p>Interaktives Debuggen ist mit einem unterstützten <a href="AHKL_DBGPClients.htm">DBGp-Client</a> möglich. Üblicherweise sind folgende Aktionen möglich:</p>
<ul>
  <li>Haltepunkte auf Zeilen setzen oder entfernen - die Ausführung pausieren, wenn ein <a href="https://en.wikipedia.org/wiki/Breakpoint">Haltepunkt</a> erreicht ist.</li>
  <li>Den Code zeilenweise durchgehen - Funktionen und Subroutinen betreten, überspringen oder verlassen.</li>
  <li>Alle oder eine bestimmte Variable überwachen.</li>
  <li>Den Stapel von laufenden Subroutinen und Funktionen anzeigen.</li>
</ul>
<p>Beachten Sie, dass diese Funktionalität für kompilierte Skripte, <a href="#ahk2exe-base">die auf einer BIN-Datei basieren</a>, deaktiviert ist. Für kompilierte Skripte, die auf einer EXE-Datei basieren, muss /debug nach <a href="#SlashScript">/script</a> angegeben werden.</p>
<p>Um interaktives Debuggen zu aktivieren, starten Sie zuerst einen unterstützten Debugger-Client und dann das Skript mit der <b>/Debug</b>-Befehlszeilenoption.</p>
<pre class="Syntax">AutoHotkey.exe /Debug<span class="optional">=<i>SERVER</i>:<i>PORT</i></span> ...</pre>
<p><i>SERVER</i> und <i>PORT</i> können weggelassen werden. Zum Beispiel sind die folgenden Zeilen funktionsgleich:</p>
<pre class="no-highlight">AutoHotkey /Debug "MeinSkript.ahk"
AutoHotkey /Debug=localhost:9000 "MeinSkript.ahk"</pre>
<p id="debug_attach"><span class="ver">[AHK_L 59+]</span>: Um den Debugger nachträglich mit einem Skript zu verbinden, senden Sie ihm eine Meldung wie folgt:</p>
<pre>SkriptPfad := "" <em>; HIER DEN VOLLSTÄNDIGEN PFAD DES SKRIPTS SETZEN</em>
DetectHiddenWindows On
if WinExist(SkriptPfad " ahk_class AutoHotkey")
    <em>; Optionale Parameter:
    ;   wParam  = IPv4-Adresse des Debugger-Clients als 32-Bit-Integer.
    ;   lParam  = Port, der vom Debugger-Client abgehört werden soll.</em>
    PostMessage DllCall("RegisterWindowMessage", "Str", "AHK_ATTACH_DEBUGGER")
</pre>
<p>Sobald der Debugger-Client verbunden ist, kann die Verbindung durch Senden des DBGp-Befehls "detach" getrennt werden, ohne das Skript zu terminieren.</p>

<h2 id="Script_Showcase">Skriptbeispiele</h2>
<p>Auf <a href="scripts/">dieser Seite</a> finden Sie einige nützliche Skripte.</p>
</body>
</html>
