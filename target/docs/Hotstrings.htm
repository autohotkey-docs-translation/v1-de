<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Hotstrings - Definition &amp; Verwendung | AutoHotkey v1</title>
<meta name="description" content="Erfahren Sie mehr über Hotstrings im Allgemeinen, Endungszeichen, Optionen, lange Ersetzungen, kontextabhängige Hotstrings, Funktions-Hotstrings, etc." />
<meta name="keywords" content="auto-replace,autotext,autocorrect,auto text,auto correct,abbreviation expansion,abbreviation,abbreviations,autoreplace,auto replace,text,expander,free,type,typing,word,words,auto-ersetzen,abkürzungserweiterung,abkürzung,abkürzungen,kostenlos,eingeben,eingabe,wort,wörter">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Hotstrings</h1>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#intro">Einführung und einfache Beispiele</a></li>
  <li><a href="#EndChars">Endungszeichen</a></li>
  <li><a href="#Options">Optionen</a></li>
  <li><a href="#continuation">Lange Ersatztexte</a></li>
  <li><a href="#variant">Kontextabhängige Hotstrings</a></li>
  <li><a href="#AutoCorrect">AutoCorrect</a></li>
  <li><a href="#remarks">Bemerkungen</a></li>
  <li><a href="#Function">Funktions-Hotstrings</a> <span class="ver">[v1.1.28+]</span></li>
  <li><a href="#Helper">Hotstring Helper</a></li>
</ul>

<h2 id="intro">Einführung und einfache Beispiele</h2>
<p>Hotstrings werden hauptsächlich verwendet, um geschriebene Abkürzungen in lange Texte umzuwandeln (kurz Auto-Ersetzen), aber auch, um eine geskriptete Aktion zu starten. Im Prinzip verhalten sich Hotstrings wie <a href="Hotkeys.htm">Hotkeys</a>, außer dass sie in der Regel aus mehr als einem Zeichen (also einer Zeichenkette) bestehen.</p>
<p>Um einen Hotstring zu definieren, umschließen Sie die auslösende Abkürzung mit Doppelpunktpaaren. Zum Beispiel:</p>
<pre>::bzw::beziehungsweise</pre>
<p>Das obige Beispiel hat die folgende Wirkung: Jedes Mal, wenn Sie die Abkürzung "bzw" eingeben, wird diese automatisch mit "beziehungsweise" ersetzt (allerdings geschieht das standardmäßig nur, wenn Sie nach der Eingabe von "bzw" ein <a href="#EndChars">Endungszeichen</a> wie <kbd>Leer</kbd>, <kbd>.</kbd> oder <kbd>Enter</kbd> eingeben).</p>
<p id="auto">Das "beziehungsweise"-Beispiel oben ist ein sogenannter automatisch-ersetzender Hotstring. Er löscht automatisch den eingegebenen Text und ersetzt ihn mit der Zeichenkette nach dem zweiten Doppelpunktpaar. Ein Hotstring kann auch verwendet werden, um eine benutzerdefinierte Aktion auszuführen, wie in den folgenden Beispielen. Beachten Sie, dass die Befehle <u>unterhalb</u> des Hotstrings angegeben werden müssen:</p>
<pre>::bzw::
MsgBox Sie haben "bzw" eingegeben.
return

:*:]d::  <em>; Dieser Hotstring ersetzt "]d" mit dem heutigen Datum via den Befehlen unten.</em>
<a href="lib/FormatTime.htm">FormatTime</a>, AktuellerZeitstempel,, d.M.yyyy HH:mm  <em>; z.B. 21.6.2011 15:10</em>
SendInput %AktuellerZeitstempel%
return</pre>
<p>Obwohl die beiden Beispiele oben keine automatisch-ersetzende Hotstrings sind, wird auch hier die eingegebene Abkürzung standardmäßig gelöscht. Dieses Löschen erfolgt durch automatisches Backspacing (wiederholtes Löschen des letzten Zeichens), was mit der <a href="#b0">b0-Option</a> deaktiviert werden kann.</p>

<h2 id="EndChars">Endungszeichen</h2>
<p>Um einen Hotstring auszulösen, müssen Sie standardmäßig nach der Eingabe der Abkürzung ein <em>Endungszeichen</em> eingeben (was aber mit der <a href="#Asterisk">Sternchen-Option</a> geändert werden kann). Zu den Endungszeichen gehören standardmäßig die folgenden: <strong>-()[]{}':;"/\,.?!`n `t</strong> (`n ist <kbd>Enter</kbd> und `t ist <kbd>Tab</kbd>; zwischen `n und `t befindet sich ein Leerzeichen). Dieser vordefinierte Zeichensatz kann mit dem folgenden Beispiel geändert werden; beachten Sie aber, dass die neuen Endungszeichen für <u>alle</u> Hotstrings gesetzt werden, nicht nur für Hotstrings, die danach folgen:</p>
<pre>#Hotstring EndChars -()[]{}:;'"/\,.?!`n `t</pre>
<p><span class="ver">[v1.1.28+]</span>: Die Endungszeichen können während der Skriptausführung geändert werden, indem man die <a href="lib/Hotstring.htm">Hotstring</a>-Funktion wie folgt aufruft:</p>
<pre>Hotstring("EndChars", "-()[]{}:;")</pre>

<h2 id="Options">Optionen</h2>
<p>Es gibt zwei Möglichkeiten, wie das Standardverhalten eines Hotstrings geändert werden kann:</p>
<ol>
  <li>Die <a href="lib/_Hotstring.htm">#Hotstring</a>-Direktive, die alle Hotstrings beeinflusst, die sich im Skript physisch darunter befinden. Das folgende Beispiel aktiviert die Optionen C und R: <code>#Hotstring <strong>c r</strong></code>.</li>
  <li>Optionen in das erste Doppelpunktpaar des Hotstrings einfügen. Das folgende Beispiel aktiviert die Optionen C und * (Groß-/Kleinschreibung-sensitiv und "ohne Endungszeichen auslösbar") für einen einzelnen Hotstring: <code>:<strong>c*</strong>:j@::john@somedomain.com</code>.</li>
</ol>
<p>Die folgende Liste beschreibt die einzelnen Optionen. Mehrere Optionen können optional mit Leerzeichen voneinander getrennt werden.</p>
<p id="Asterisk"><strong>*</strong> (Sternchen): Der Hotstring kann ohne Endungszeichen (z.B. <kbd>Leer</kbd>, <kbd>.</kbd> oder <kbd>Enter</kbd>) ausgelöst werden. Zum Beispiel:</p>
<pre>:*:j@::jsmith@somedomain.com</pre>
<p>Das obige Beispiel sendet seinen Ersatztext, sobald Sie das @-Zeichen eingegeben haben. Mit <strong>*0</strong> (unter Nutzung der <a href="lib/_Hotstring.htm">#Hotstring</a>-Direktive) kann diese Option wieder deaktiviert werden.</p>
<p id="Question"><strong>?</strong> (Fragezeichen): Bewirkt, dass der Hotstring immer ausgelöst wird, egal ob er sich in einem anderen Wort befindet oder nicht, d.h. das davor eingegebene Zeichen kann alphanumerisch sein. Wenn Sie zum Beispiel den Hotstring <code>:?:de::Deutschland</code> verwenden, würde die Eingabe von "Fahrstunde " dazu führen, dass "FahrstunDeutschland " erzeugt wird. Mit <strong>?0</strong> kann diese Option wieder deaktiviert werden.</p>
<p id="b0"><strong>B0</strong> (B gefolgt von einer Null): Bewirkt, dass die eingegebene Abkürzung <u>nicht</u> via automatisches Backspacing (wiederholtes Löschen des letzten Zeichens) gelöscht wird. Mit <strong>B</strong> kann das Backspacing, falls es zuvor deaktiviert war, wieder aktiviert werden. Mit {bs 5}, das <kbd>Backspace</kbd> fünfmal sendet, kann ein Skript das Backspacing selbst durchführen. Mit {left 5} kann <kbd>←</kbd> fünfmal gesendet werden. Der folgende Hotstring beispielsweise erzeugt "&lt;em&gt;&lt;/em&gt;" und verschiebt den Textcursor 5 Stellen nach links (so dass der Textcursor genau zwischen den Tags liegt):</p>
<pre>:*b0:&lt;em&gt;::&lt;/em&gt;{left 5}</pre>
<p id="C"><strong>C:</strong> Groß-/Kleinschreibung-sensitiv: Bewirkt, dass der Hotstring nur dann ausgelöst wird, wenn die Groß-/Kleinschreibung der eingegebenen Abkürzung exakt mit der im Skript definierten Variante übereinstimmt. Mit <strong>C0</strong> kann diese Option wieder deaktiviert werden.</p>
<p id="C1"><strong>C1:</strong> Nicht an die Groß-/Kleinschreibung anpassen. Verwenden Sie diese Option, um <a href="#auto">automatisch-ersetzende Hotstrings</a> nicht-Groß-/Kleinschreibung-sensitiv zu machen und zu verhindern, dass sie sich an die Groß-/Kleinschreibung der von Ihnen eingegebenen Zeichen anpassen. Groß-/Kleinschreibung-anpassende Hotstrings (Standardeinstellung) erzeugen den Ersatztext komplett in Großbuchstaben, wenn Sie die Abkürzung komplett in Großbuchstaben eingeben. Wenn Sie den ersten Buchstaben großschreiben, wird auch der erste Buchstabe des Ersatztextes großgeschrieben (sofern es ein Buchstabe ist). Wenn Sie die Groß-/Kleinschreibung auf eine andere Weise eingeben, wird der Ersatztext ohne Änderung der Groß-/Kleinschreibung gesendet. Mit <strong>C0</strong> (unter Nutzung der <a href="lib/_Hotstring.htm">#Hotstring</a>-Direktive) kann diese Option wieder deaktiviert werden.</p>
<p id="Kn"><strong>Kn:</strong> Tastenverzögerung: Diese selten verwendete Option bestimmt die Verzögerung zwischen den Tastendrücken, die via Auto-Backspacing oder <a href="#auto">Auto-Ersetzen</a> erzeugt werden. Geben Sie für <strong>n</strong> die neue Verzögerung an, z.B. k10 für eine Verzögerung von 10&nbsp;ms oder k-1 zum Deaktivieren der Verzögerung. Das genaue Verhalten dieser Option hängt vom gerade aktiven <a href="#SendMode">Send-Modus</a> ab:</p>
<ul>
  <li>SI (SendInput): Die Tastenverzögerung wird ignoriert, da in diesem Modus keine Verzögerung möglich ist. Die Ausnahme hiervon ist, wenn SendInput <a href="lib/Send.htm#SendInputUnavail">nicht verfügbar</a> ist, dann fallen die Hotstrings in den SendPlay-Modus unten zurück (der die Tastenverzögerung berücksichtigt).</li>
  <li>SP (SendPlay): Standardmäßig gilt eine Verzögerung von 0, was bei SendPlay äquivalent zu -1 (keine Verzögerung) ist. In diesem Modus bezieht sich die Verzögerung auf die <a href="lib/SetKeyDelay.htm#dur">Druckdauer</a>, nicht auf die Verzögerung zwischen den Tastendrücken.</li>
  <li>SE (SendEvent): Standardmäßig gilt eine Verzögerung von 0. Eine Verzögerung von 0 wird für die meisten Zwecke empfohlen, weil sie relativ kurz ist und dafür sorgt, dass der Hotstring gut mit anderen Prozessen kooperiert (aufgrund eines internen <a href="lib/Sleep.htm">Sleep 0</a>). Geben Sie k-1 an, um die Verzögerung komplett zu deaktivieren; dies ist z.B. nützlich, um Auto-Ersetzungen zu beschleunigen, wenn Ihre CPU häufig stark belastet wird. Wenn sie auf -1 gesetzt ist, hat die Prozesspriorität eines Skripts einen großen Einfluss darauf, wie schnell es Tastendrücke senden kann. Um die Priorität eines Skripts zu erhöhen, verwenden Sie <code><a href="lib/Process.htm">Process</a>, Priority,, High</code>.</li>
</ul>
<p id="O"><strong>O:</strong> Bewirkt, dass <a href="#auto">automatisch-ersetzende Hotstrings</a> ihren Ersatztext ohne Endungszeichen erzeugen. Diese Option ist nützlich, wenn Sie weiterhin mit einem Endungszeichen verhindern wollen, dass der Hotstring versehentlich ausgelöst wird, aber gleichzeitig auch erreichen wollen, dass dieses Endungszeichen nicht auf dem Bildschirm erscheint. Verwenden Sie zum Beispiel den Hotstring <code>:o:ar::Aristokrat</code>, würde die Eingabe von "ar" gefolgt von einem Leerzeichen dazu führen, dass "Aristokrat" ohne Leerzeichen am Ende erzeugt wird, was Ihnen z.B. die Möglichkeit bietet, das Wort in den Plural zu setzen, ohne <kbd>Backspace</kbd> verwenden zu müssen. Mit <strong>O0</strong> (Buchstabe O gefolgt von einer Null) kann diese Option wieder deaktiviert werden.</p>
<p id="Pn"><strong>Pn:</strong> Die <a href="misc/Threads.htm">Priorität</a> des Hotstrings (z.B. P1). Diese Option wird selten verwendet und funktioniert nicht bei <a href="#auto">automatisch-ersetzenden Hotstrings</a>.</p>
<p id="raw"><strong>R:</strong> Bewirkt, dass der Ersatztext im <a href="lib/Send.htm#SendRaw">Rohzustand</a> gesendet wird, d.h. es findet keine Übersetzung von {Enter} zu <kbd>Enter</kbd>, ^c zu <kbd>Strg</kbd>+<kbd>C</kbd> usw. statt. Diese Option wird automatisch für Hotstrings aktiviert, die einen <a href="#continuation">Fortsetzungsbereich</a> haben. Mit <strong>R0</strong> kann diese Option wieder deaktiviert werden.</p>
<p class="note"><strong>Hinweis:</strong> Der <a href="#T">Text-Modus</a> kann für das Senden von Text zuverlässiger sein. Die Optionen R und T schließen sich gegenseitig aus.</p>
<p id="SendMode"><strong>SI</strong> oder <strong>SP</strong> oder <strong>SE</strong> <span class="ver">[v1.0.43+]</span>: Bestimmt den Modus, den <a href="#auto">automatisch-ersetzende Hotstrings</a> zum Senden ihrer Tastendrücke verwenden. Diese Optionen schließen sich gegenseitig aus, d.h. es kann immer nur eine Option aktiv sein. Die folgende Liste beschreibt die einzelnen Optionen:</p>
<ul>
  <li>SI steht für <a href="lib/Send.htm#SendInputDetail">SendInput</a>. Dieser Modus ist in der Regel schneller und zuverlässiger als die anderen Modi. Außerdem hat SendInput (wie auch SendPlay unten) den Vorteil, dass alles, was Sie während einer <a href="#auto">automatischen Ersetzung</a> eingeben, nach hinten verschoben wird. Dadurch wird verhindert, dass Ihre Tastendrücke mit denen des Ersatztextes vermischt werden. Wenn SendInput <a href="lib/Send.htm#SendInputUnavail">nicht verfügbar</a> ist, verwenden Hotstrings stattdessen automatisch SendPlay.</li>
  <li>SP steht für <a href="lib/Send.htm#SendPlayDetail">SendPlay</a>. Dieser Modus erhöht die Chance, dass Hotstrings in einigen Videospielen funktionieren.</li>
  <li>SE steht für <a href="lib/Send.htm#SendEvent">SendEvent</a>. Dieser Modus wird standardmäßig in Versionen vor 1.0.43 verwendet.</li>
</ul>
<p>In <span class="ver">[v1.0.43+]</span> ist SendInput der Standardmodus. Anders als bei der SI-Option wird jedoch SendEvent anstelle von SendPlay verwendet, wenn SendInput nicht verfügbar ist.</p>
<p id="T"><strong>T</strong> <span class="ver">[v1.1.27+]</span>: Sendet den Ersatztext im <a href="#raw">Rohzustand</a>, ohne die Zeichen in Tastendrücke zu übersetzen. Weitere Informationen finden Sie unter <a href="lib/Send.htm#SendText">Text-Modus</a>. Diese Option kann mit <strong>T0</strong> oder <strong>R0</strong> wieder deaktiviert oder mit <strong>R</strong> überschrieben werden.</p>
<p id="X"><strong>X</strong> <span class="ver">[v1.1.28+]</span>: Execute (Ausführen). Anstelle eines Ersatztextes akzeptiert der Hotstring einen Befehl oder Ausdruck, den er ausführen soll. Zum Beispiel würde <code>:X:~mb::MsgBox</code> ein Mitteilungsfenster anzeigen, wenn der Benutzer "~mb" eingibt, anstatt diese Abkürzung automatisch mit "MsgBox" zu ersetzen. Das ist besonders für eine große Anzahl von Hotstrings nützlich, die Funktionen aufrufen, da sonst drei Zeilen pro Hotstring notwendig wären.</p>
<p>Wenn die X-Option in Verbindung mit der <a href="lib/Hotstring.htm">Hotstring</a>-Funktion verwendet wird, bewirkt sie, dass der <em>Ersatz</em>-Parameter als Label- oder Funktionsname statt als Ersatztext interpretiert wird. Allerdings hat die X-Option diesen Effekt nur, wenn sie bei jedem Aufruf der Funktion angegeben ist.</p>
<p id="z"><strong>Z:</strong> Diese selten verwendete Option setzt den Hotstring-Erkenner jedes Mal zurück, wenn der Hotstring ausgelöst wird. Mit anderen Worten, das Skript wartet auf einen völlig neuen Hotstring und verwirft alles, was Sie zuvor eingegeben haben. Dadurch können unerwünschte Auslösungen von Hotstrings verhindert werden. Schauen Sie sich dazu das folgende Beispiel an:</p>
<pre>:b0*?:11::
SendInput xx
return</pre>
<p>Wenn Sie mit diesem Beispiel drei aufeinanderfolgende Einsen (111) eingeben, wird der Hotstring zweimal ausgelöst, weil die mittlere 1 sowohl das <em>letzte</em> Zeichen der ersten Auslösung als auch das <em>erste</em> Zeichen der zweiten Auslösung ist. Wenn Sie vor b0 den Buchstaben Z einfügen, müssten Sie vier statt drei Einsen eingeben, um den Hotstring zweimal auszulösen. Mit <strong>Z0</strong> kann diese Option wieder deaktiviert werden.</p>
<h2 id="continuation">Lange Ersatztexte</h2>
<p>Wenn der Ersatztext eines Hotstrings relativ lang ist, kann er via <a href="Scripts.htm#continuation">Fortsetzungsbereich</a> in mehrere kurze Zeilen aufgeteilt werden, um die Übersichtlichkeit und Wartbarkeit des Skripts zu verbessern. Zum Beispiel:</p>
<pre>::text1::
(
Der gesamte Text zwischen der oberen und unteren Klammer wird als direkt geschriebener Text behandelt, einschließlich Kommas und Prozentzeichen.
Standardmäßig bleibt der Zeilenumbruch (Enter) zwischen der vorherigen und dieser Zeile erhalten.
    Standardmäßig bleibt die Einrückung (Tabulator) auf der linken Seite dieser Zeile erhalten.
)</pre>
<p>Unter <a href="Scripts.htm#continuation">Fortsetzungsbereich</a> erfahren Sie, wie Sie dieses Standardverhalten ändern können. Beachten Sie auch, dass ein Fortsetzungsbereich dazu führt, dass der Hotstring standardmäßig den <a href="#raw">Raw-Modus</a> verwendet. Die einzige Möglichkeit, dies zu überschreiben, besteht darin, bei jedem Hotstring mit einem Fortsetzungsbereich die <a href="#raw">r0-Option</a> anzugeben (z.B. <code>:r0:text1::</code>).</p>
<h2 id="variant">Kontextabhängige Hotstrings</h2>
<p>Mit den Direktiven <a href="lib/_IfWinActive.htm">#IfWinActive/Exist</a> und <a href="lib/_If.htm">#If</a> können bestimmte Hotstrings kontextabhängig gemacht werden. Solche Hotstrings senden einen anderen Ersatztext, führen eine andere Aktion aus oder tun gar nichts, abhängig von einer bestimmten Bedingung. Zum Beispiel:</p>
<pre>#IfWinActive ahk_class Notepad
::bzw::Dieser Ersatztext erscheint nur in Notepad.
#IfWinActive
::bzw::Dieser Ersatztext erscheint in einem anderen Fenster als Notepad.</pre>
<h2 id="AutoCorrect">AutoCorrect</h2>
<p>Das folgende Skript verwendet Hotstrings zum automatischen Korrigieren von ca. 4700 häufig vorkommenden englischen Rechtschreibfehlern. Mit dem Hotkey <kbd>Win</kbd>+<kbd>H</kbd> können Sie weitere Rechtschreibfehler hinzufügen:</p>
<p>Download: <a href="https://www.autohotkey.com/download/AutoCorrect.ahk">AutoCorrect.ahk</a> (127 KB)</p>
<p>Autor: <a href="http://www.biancolo.com/blog/autocorrect/">Jim Biancolo</a> und <a href="https://en.wikipedia.org/wiki/Wikipedia:Lists_of_common_misspellings">Wikipedia's Lists of Common Misspellings</a></p>

<h2 id="remarks">Bemerkungen</h2>
<p>Variablenreferenzen wie <code>%MeineVar%</code> werden im Ersatztext aktuell nicht unterstützt. Um das zu umgehen, machen Sie solche Hotstrings nicht <a href="#auto">automatisch-ersetzend</a>. Verwenden Sie stattdessen einen <a href="lib/Send.htm#SendInput">SendInput</a>-Befehl unter der Abkürzung, gefolgt von einer Zeile nur mit dem Wort Return.</p>
<p>Um ein zusätzliches Leer- oder Tabulatorzeichen nach einem Ersatztext zu senden, fügen Sie es am Ende des Ersatztextes ein, aber machen Sie das letzte Zeichen zu einem umgekehrten Häkchen (`). Zum Beispiel:</p>
<pre>:*:bzw::beziehungsweise `</pre>
<p id="NoMouse">Standardmäßig setzt ein Links- oder Rechtsklick den Hotstring-Erkenner zurück. Mit anderen Worten, das Skript wartet auf einen völlig neuen Hotstring und verwirft alles, was Sie zuvor eingegeben haben (falls das unerwünscht ist, fügen Sie irgendwo im Skript die Zeile <code><a href="lib/_Hotstring.htm">#Hotstring</a> NoMouse</code> ein). Dieses Zurücksetzen-bei-Mausklick-Verhalten ist standardmäßig aktiv, weil jeder Klick üblicherweise die Texteinfügemarke (Textcursor) verschiebt oder den Tastaturfokus auf ein neues Steuerelement/Feld setzt. In solchen Fällen ist es generell wünschenswert: 1) einen Hotstring auch dann auslösen zu können, wenn die <a href="#Question">Fragezeichenoption</a> fehlt; 2) eine Auslösung zu verhindern, wenn Sie nach einem Mausklick etwas eingeben, das zufällig eine gültige Abkürzung aus der vorherigen Eingabe formt.</p>
<p id="focus-reset">Der Hotstring-Erkenner prüft jedes Mal, wenn ein Zeichen eingegeben wird, das aktive Fenster und setzt sich zurück, wenn ein anderes als das vorherige Fenster aktiv ist. Wenn sich das aktive Fenster ändert, aber dann das vorherige Fenster wieder aktiv gemacht wird, bevor ein Zeichen eingegeben wurde, wird die Änderung nicht erkannt (aber der Hotstring-Erkenner könnte aus einem anderen Grund zurückgesetzt werden). Sie können den Hotstring-Erkenner auch mit <code><a href="lib/Hotstring.htm#Reset">Hotstring("Reset")</a></code> zurücksetzen.</p>
<p>Die interne Variable <strong>A_EndChar</strong> enthält das Endungszeichen, mit dem Sie zuletzt einen nicht-automatisch-ersetzenden Hotstring ausgelöst haben. Wenn kein Endungszeichen erforderlich war (wegen der <a href="#Asterisk">*-Option</a>), ist diese Variable leer. A_EndChar ist nützlich bei der Erstellung von Hotstrings, die den Send-Befehl verwenden oder deren Verhalten davon abhängen soll, welches Endungszeichen Sie eingegeben haben. Mit <code>SendRaw %A_EndChar%</code> kann das Endungszeichen selbst gesendet werden (in diesem Fall <a href="lib/Send.htm">SendRaw</a>, weil das normale Send Zeichen wie !{} nicht korrekt senden würde).</p>
<p>Innerhalb von Hotstring-Definitionen müssen nur umgekehrte Häkchen und Semikolons, denen ein Leer- oder Tabulatorzeichen vorangestellt ist, mit einem <a href="misc/EscapeChar.htm">Escapezeichen</a> versehen werden. Alle anderen Zeichen, inklusive Kommas, Prozentzeichen und einzelne Doppelpunkte, können ohne Escapezeichen angegeben werden. Eine vollständige Liste finden Sie unter <a href="misc/EscapeChar.htm">Escapesequenzen</a>.</p>
<p>Die Sonderzeichen des <a href="lib/Send.htm">Send-Befehls</a> wie {Enter} werden nur im Ersatztext von <a href="#auto">automatisch-ersetzenden Hotstrings</a> unterstützt (sofern die <a href="#raw">Raw-Option</a> nicht verwendet wird), nicht in der Abkürzung. Geben Sie stattdessen `n für <kbd>Enter</kbd> und `t (oder ein direkt geschriebenes Tabulatorzeichen) für <kbd>Tab</kbd> an (eine vollständige Liste finden Sie unter <a href="misc/EscapeChar.htm">Escapesequenzen</a>). Zum Beispiel würde der Hotstring <code>:*:ab`t::</code> ausgelöst werden, wenn Sie "ab" gefolgt von einem Tabulatorzeichen eingeben.</p>
<p>Innerhalb von Hotstring-Definitionen werden Leer- und Tabulatorzeichen als direkt geschriebener Text behandelt. Zum Beispiel würden die folgenden Hotstrings zwei unterschiedliche Ergebnisse erzeugen: <code>::bzw::beziehungsweise</code> und <code>::bzw:: :beziehungsweise</code>.</p>
<p>Jede Abkürzung eines Hotstrings darf nicht länger als 40 Zeichen sein. Das Programm warnt Sie, wenn diese Länge überschritten wurde. Die Länge des Ersatztextes ist hingegen auf ca. 5000 Zeichen begrenzt, sofern der <a href="#SendMode">Send-Modus</a> standardmäßig SendInput ist. Dieses Limit kann auf 16383 Zeichen erhöht werden, wenn Sie einen der anderen <a href="#SendMode">Send-Modi</a> verwenden. Alternativ können Sie auch so etwas wie <code><a href="lib/Send.htm#SendPlayDetail">SendPlay</a> %MeineVariable%</code> im Körper des Hotstrings verwenden, um eine unbegrenzte Menge an Text zu senden.</p>
<p>Die Reihenfolge, in der die Hotstrings definiert werden, bestimmt ihre relative Priorität zueinander. Mit anderen Worten, wenn Ihre Eingabe mehr als einen Hotstring auslösen kann, wird nur der erste im Skript gelistete Hotstring ausgelöst. Siehe auch: <a href="#variant">Kontextabhängige Hotstrings</a>.</p>
<p>Jedes von Ihnen durchgeführte Backspacing wird bei der Erkennung von Hotstrings berücksichtigt. Allerdings bewirken die Navigationstasten <kbd>↑</kbd>, <kbd>→</kbd>, <kbd>↓</kbd>, <kbd>←</kbd>, <kbd>Bild↑</kbd>, <kbd>Bild↓</kbd>, <kbd>Pos1</kbd> und <kbd>Ende</kbd>, dass der Hotstring-Erkennungsprozess zurückgesetzt wird. Mit anderen Worten, der Erkennungsprozess wartet auf einen völlig neuen Hotstring.</p>
<p>Der Ersatztext könnte auch dann gesendet werden, wenn das aktive Fenster die Tastendrücke des Benutzers ignoriert. Das heißt, der Hotstring wird auch ohne sichtbare Eingabe der Abkürzung ausgelöst. Auch hier können Sie <kbd>Backspace</kbd> drücken, um den letzten Tastendruck rückgängig zu machen (auch wenn Sie den Effekt nicht sehen).</p>
<p id="label">Es ist möglich, mit <a href="lib/Gosub.htm">Gosub</a> oder <a href="lib/Goto.htm">Goto</a> zu einem Hotstring-Label zu springen. Fügen Sie einfach das erste Doppelpunktpaar (einschließlich der Optionssymbole) vor seinem Namen ein. Zum Beispiel: <code>Gosub ::xyz</code>. Wenn das Ziel allerdings ein <a href="#auto">einzeiliger (automatisch-ersetzender) Hotstring</a> ist, wird nur ein <a href="lib/Return.htm">Return</a> ausgeführt.</p>
<p>Hotstrings werden weder überwacht noch während eines unsichtbaren <a href="lib/Input.htm">Input</a>-Befehls ausgelöst, können aber durch sichtbare Inputs ausgelöst werden.</p>
<p id="InputLevel">Standardmäßig können Hotstrings nicht durch Tastendrücke ausgelöst werden, die von einem AutoHotkey-Skript erzeugt wurden. Dadurch wird vermieden, dass eine Endlosschleife entsteht, in der sich Hotstrings immer wieder gegenseitig auslösen. In <span class="ver">[v1.1.06+]</span> kann dieses Verhalten mit <a href="lib/_InputLevel.htm">#InputLevel</a> und <a href="lib/SendLevel.htm">SendLevel</a> kontrolliert werden. Allerdings verwenden automatisch-ersetzende Hotstrings immer Sendlevel 0 und können daher niemals <a href="lib/_UseHook.htm">Hook-Hotkeys</a> oder Hotstrings auslösen.</p>
<p>Der <a href="lib/Suspend.htm">Suspend</a>-Befehl kann vorübergehend alle Hotstrings deaktivieren, außer denen, die Sie explizit ausgeschlossen haben. Für ein gezielteres Aktivieren/Deaktivieren sollten Sie <a href="lib/_IfWinActive.htm">#IfWinActive/Exist</a> oder <a href="lib/_If.htm">#If</a> verwenden.</p>
<p><span class="ver">[v1.1.28+]</span>: Hotstrings können dynamisch erstellt werden, z.B. mit der <a href="lib/Hotstring.htm">Hotstring</a>-Funktion, die auch in der Lage ist, bestehende Hotstrings einzeln zu modifizieren, zu deaktivieren oder zu aktivieren.</p>
<p>In bestimmten Fällen ist der <a href="lib/Input.htm">Input</a>-Befehl flexibler als Hotstrings. Zum Beispiel sind damit unsichtbare Tastendrücke im aktiven Fenster (z.B. eines Videospiels) möglich. Außerdem werden zeichenlose Endungstasten wie <kbd>Esc</kbd> unterstützt.</p>
<p>Jedes Skript, das Hotstrings enthält, verwendet automatisch den <a href="lib/_InstallKeybdHook.htm">Tastatur-Hook</a>.</p>
<p>Hotstrings verhalten sich in einigen Punkten genauso wie Hotkeys:</p>
<ul>
  <li>Sie werden vom <a href="lib/Suspend.htm">Suspend</a>-Befehl beeinflusst.</li>
  <li>Sie berücksichtigen <a href="lib/_MaxThreads.htm">#MaxThreads</a> und <a href="lib/_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a> (aber nicht <a href="lib/_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a>).</li>
  <li>Skripte, die Hotstrings enthalten, sind automatisch <a href="lib/_Persistent.htm">persistent</a>.</li>
  <li>Nicht-automatisch-ersetzende Hotstrings erzeugen beim Auslösen einen neuen <a href="misc/Threads.htm">Thread</a>. Sie aktualisieren auch interne Hotkey-Variablen wie <a href="Variables.htm#ThisHotkey">A_ThisHotkey</a>.</li>
</ul>
<p>Bekannte Einschränkung: Auf einigen Systemen können Hotstrings in Java-Anwendungen die Eingabe diakritischer Buchstaben (über tote Tasten) stören. Um das zu umgehen, schalten Sie <a href="lib/Suspend.htm">Suspend</a> vorübergehend ein (Suspend deaktiviert alle Hotstrings).</p>

<h2 id="Function">Funktions-Hotstrings <span class="ver">[v1.1.28+]</span></h2>
<p>Es ist möglich, einem oder mehreren Hotstrings eine <a href="Functions.htm">Funktion</a> zuzuweisen, indem man sie einfach unterhalb des Hotstring-Labels definiert. Zum Beispiel:</p>
<pre><em>; Zeigt auch die Implementierung von Groß-/Kleinschreibung-Anpassung.</em>
:C:BZW::  <em>; Alles großgeschrieben.</em>
:C:Bzw::  <em>; Nur den ersten Buchstaben großgeschrieben.</em>
: :bzw::  <em>; In einer beliebig anderen Kombination geschrieben.</em>
    bzw_an_schreibung_anpassen() {
        hs := A_ThisHotkey  <em>; Aus praktischen Gründen und falls wir unterbrochen werden.</em>
        if (hs == ":C:BZW")
            Send BEZIEHUNGSWEISE
        else if (hs == ":C:Bzw")
            Send Beziehungsweise
        else
            Send beziehungsweise
    }
</pre>
<p><a href="Hotkeys.htm">Hotkeys</a> können auch auf diese Weise definiert werden. Mehrere Hotkeys oder Hotstrings können vertikal gestapelt werden, um die gleiche Funktion aufzurufen.</p>
<p>Zwischen den Hotkey/Hotstring-Labels oder dem Label und der Funktion dürfen nur Leerraumzeichen, Kommentare oder Direktiven stehen. Hotkey/Hotstring-Labels, die auf diese Weise definiert wurden, sind für <a href="lib/IsLabel.htm">IsLabel()</a>, <a href="lib/Gosub.htm">Gosub</a> oder anderen Befehlen nicht sichtbar; allerdings endet der <a href="Scripts.htm#auto">automatische Ausführungsbereich</a> immer beim ersten Hotkey/Hotstring, egal ob diesem eine Funktion zugewiesen ist.</p>
<p>Die Nutzung einer Funktion hat den Vorteil, dass lokale Variablen verwendet werden können, um Konflikte zu vermeiden, wenn zwei oder mehr Hotstrings die gleichen Variablennamen für unterschiedliche Zwecke verwenden. Es begünstigt auch die Selbstdokumentation von Hotstrings, wie im obigen Code, wo der Funktionsname den Hotstring beschreibt.</p>
<p>Mit der <a href="lib/Hotstring.htm">Hotstring</a>-Funktion kann einem Hotstring auch eine Funktion oder ein Funktionsobjekt zugewiesen werden.</p>

<h2 id="Helper">Hotstring Helper</h2>
<p>Andreas Borutta hat das folgende Skript geschrieben, das nützlich sein könnte, wenn Sie viel mit Hotstrings arbeiten. Drücken Sie <kbd>Win</kbd>+<kbd>H</kbd> (oder einen anderen Hotkey Ihrer Wahl), um den aktuell markierten Text zu einem Hotstring zu machen. Wenn Sie z.B. in einem Textverarbeitungsprogramm "beziehungsweise" markieren und <kbd>Win</kbd>+<kbd>H</kbd> drücken, wird das Skript Sie auffordern, eine Abkürzung für diesen Text einzugeben (z.B. bzw), und dann den neuen Hotstring in das Skript einfügen. Danach wird das Skript neu geladen, um den Hotstring zu aktivieren.</p>
<p class="note"><strong>Hinweis:</strong> Mit der <a href="lib/Hotstring.htm">Hotstring</a>-Funktion können neue Hotstrings erstellt werden, ohne dass das Skript neu geladen werden muss. Schauen Sie sich das <a href="lib/Hotstring.htm#ExHelper">erste Beispiel</a> im Beispielabschnitt der Funktionsseite an, um einen Eindruck zu bekommen, wie das aussehen könnte.</p>
<pre class="NoIndent">#h::  <em>; Hotkey: WIN+H
; Ruft den aktuell markierten Text ab. Es wird die Zwischenablage statt
; "ControlGet Selected" verwendet, um das Skript für mehr Texteditoren
; funktionsfähig zu machen. Speichert die aktuelle Zwischenablage und
; stellt sie später wieder her (allerdings funktioniert das nur mit
; reinem Text):</em>
AutoTrim Off  <em>; Verhindert, dass Leerraumzeichen am Anfang oder Ende der Zwischenablage entfernt werden.</em>
ClipboardAlt := ClipboardAll
Clipboard := ""  <em>; Muss vorerst leer sein, damit die Erkennung funktioniert.</em>
Send ^c
ClipWait 1
if ErrorLevel  <em>; ClipWait hat das Zeitlimit überschritten.</em>
    return
<em>; Ersetze CRLF und/oder LF mit `n für einen Hotstring im Raw-Modus:
; Dasselbe wird für jedes andere Zeichen getan,
; das ein Problem im Raw-Modus sein könnte:</em>
StringReplace, Hotstring, Clipboard, ``, ````, All  <em>; Zuerst diese Ersetzung, um die darunter nicht zu stören.</em>
StringReplace, Hotstring, Hotstring, `r`n, ``n, All
StringReplace, Hotstring, Hotstring, `n, ``n, All
StringReplace, Hotstring, Hotstring, %A_Tab%, ``t, All
StringReplace, Hotstring, Hotstring, `;, ```;, All
Clipboard := ClipboardAlt  <em>; Den vorherigen Inhalt der Zwischenablage wiederherstellen.
; Den Textcursor des Eingabefensters auf eine benutzerfreundliche Position verschieben:</em>
SetTimer, VerschiebeTextcursor, 10
<em>; Das Eingabefenster mit dem vordefinierten Hotstring anzeigen:</em>
InputBox, Hotstring, Neuer Hotstring, Fügen Sie Ihre Abkürzung an der Position des Textcursors ein. Bei Bedarf können Sie den Ersatztext noch ändern.`n`nBeispieleintrag: :R:bzw::beziehungsweise,,,,,,,, :R:::%Hotstring%
if ErrorLevel  <em>; Der Benutzer hat Abbrechen gedrückt.</em>
    return
if InStr(Hotstring, ":R:::")
{
    MsgBox Sie haben keine Abkürzung angegeben. Der Hotstring wurde nicht hinzugefügt.
    return
}
<em>; Andernfalls den Hotstring hinzufügen und das Skript neu laden:</em>
FileAppend, `n%Hotstring%, %A_ScriptFullPath%  <em>; `n davorsetzen, wenn die Datei keine Leerzeile am Ende hat.</em>
Reload
Sleep 200 <em>; Bei Erfolg wird Reload diese Instanz während des Sleeps schließen, wodurch die folgende Zeile nie erreicht wird.</em>
MsgBox, 4,, Der gerade eingefügte Hotstring scheint fehlerhaft zu sein.  Wollen Sie das Skript öffnen und manuell bearbeiten? Den fehlerhaften Hotstring finden Sie ganz unten im Skript.
IfMsgBox, Yes, Edit
return

VerschiebeTextcursor:
if not WinActive("Neuer Hotstring")
    return
<em>; Andernfalls den Textcursor des Eingabefensters auf eine Position verschieben, wo der Benutzer die Abkürzung eintragen kann.</em>
Send {Home}{Right 3}
SetTimer, VerschiebeTextcursor, Off
return</pre>
</body>
</html>
